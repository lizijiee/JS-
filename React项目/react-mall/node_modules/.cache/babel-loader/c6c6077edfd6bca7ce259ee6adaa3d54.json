{"ast":null,"code":"import * as types from '../constants/actionTypes'; //注释在此文件中\n\nvar initState = {\n  memberData: {},\n  // 店内会员信息;\n  foodData: {},\n  // 所有菜品数据; \n  searchFood: {},\n  // 查找后的数据; \n  orderData: {},\n  // 所有订单信息 \n  num: 1,\n  // 第几页\n  total: 1 // 全部数据条数\n\n  /* \r\n    state 初始值分别为简单类型和复合类型;\r\n      1.为复合类型:\r\n        需要对state进行深克隆下,以保证为纯函数(使用条件)\r\n      2.为简单类型:\r\n        真是项目可能小\r\n        见Github练习: https://github.com/lizijiee/JS-/tree/master/react-redux%E8%AE%A1%E6%95%B0%E5%99%A8  \r\n  */\n\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  state = JSON.parse(JSON.stringify(state)); //initState为复合类型需要深克隆一下;\n\n  switch (action.type) {\n    case types.SET_DATA_MEMBER:\n      //请求数据后对redux进行赋值,可以写语句\n      state.memberData = action.data; //左变量用在组件中接收,右变量action传参来\n\n      break;\n\n    case types.GET_DATA_FOOD:\n      state.foodData = action.data;\n      break;\n\n    case types.BULK_OPERATION:\n      state.foodData = action.data; // action.data\n\n      break;\n\n    case types.BULK_SEARCH:\n      state.foodData = action.data;\n      break;\n\n    case types.GET_DATA_ORDER:\n      state.orderData = action.data;\n      state.total = action.total;\n      break;\n    //  case types.SWITCH_CHANGE:\n    //      state.changeFood= action.data;//还是修改菜品数据\n    //  break;\n    //  case types.REMOVE_MENU_ITEMS:\n    //      state.foodData=action.data;\n    //  break;\n  }\n\n  return state;\n};\n\nexport { reducer };\n/* 测试 */\n\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\redux\\reducers\\index.js"],"names":["types","initState","memberData","foodData","searchFood","orderData","num","total","reducer","state","action","JSON","parse","stringify","type","SET_DATA_MEMBER","data","GET_DATA_FOOD","BULK_OPERATION","BULK_SEARCH","GET_DATA_ORDER"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB,C,CAAmD;;AAEnD,IAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAC,EADK;AACA;AAChBC,EAAAA,QAAQ,EAAC,EAFO;AAEA;AAChBC,EAAAA,UAAU,EAAC,EAHK;AAGC;AACjBC,EAAAA,SAAS,EAAC,EAJM;AAIA;AAChBC,EAAAA,GAAG,EAAC,CALY;AAKP;AACTC,EAAAA,KAAK,EAAC,CANU,CAMP;;AAEX;;;;;;;;;AARkB,CAAlB;;AAgBA,IAAMC,OAAO,GAAE,SAATA,OAAS,GAA0B;AAAA,MAAzBC,KAAyB,uEAAnBR,SAAmB;AAAA,MAATS,MAAS;AAClCD,EAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,KAAf,CAAX,CAAR,CADkC,CACQ;;AACzC,UAAOC,MAAM,CAACI,IAAd;AACK,SAAKd,KAAK,CAACe,eAAX;AAA2B;AACxBN,MAAAA,KAAK,CAACP,UAAN,GAAiBQ,MAAM,CAACM,IAAxB,CADH,CACgC;;AAChC;;AACA,SAAKhB,KAAK,CAACiB,aAAX;AACIR,MAAAA,KAAK,CAACN,QAAN,GAAeO,MAAM,CAACM,IAAtB;AACJ;;AACA,SAAKhB,KAAK,CAACkB,cAAX;AACIT,MAAAA,KAAK,CAACN,QAAN,GAAeO,MAAM,CAACM,IAAtB,CADJ,CACgC;;AAChC;;AACA,SAAKhB,KAAK,CAACmB,WAAX;AACIV,MAAAA,KAAK,CAACN,QAAN,GAAeO,MAAM,CAACM,IAAtB;AACJ;;AACA,SAAKhB,KAAK,CAACoB,cAAX;AACKX,MAAAA,KAAK,CAACJ,SAAN,GAAgBK,MAAM,CAACM,IAAvB;AACDP,MAAAA,KAAK,CAACF,KAAN,GAAYG,MAAM,CAACH,KAAnB;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AAvBJ;;AAyBA,SAAOE,KAAP;AACH,CA5BL;;AA6BE,SAASD,OAAT;AACF;;AAEA","sourcesContent":["import * as types from '../constants/actionTypes'; //注释在此文件中\r\n\r\nconst initState = {\r\n  memberData:{},  // 店内会员信息;\r\n  foodData:{},    // 所有菜品数据; \r\n  searchFood:{},   // 查找后的数据; \r\n  orderData:{},   // 所有订单信息 \r\n  num:1,   // 第几页\r\n  total:1  // 全部数据条数\r\n}\r\n/* \r\n  state 初始值分别为简单类型和复合类型;\r\n    1.为复合类型:\r\n      需要对state进行深克隆下,以保证为纯函数(使用条件)\r\n    2.为简单类型:\r\n      真是项目可能小\r\n      见Github练习: https://github.com/lizijiee/JS-/tree/master/react-redux%E8%AE%A1%E6%95%B0%E5%99%A8  \r\n*/\r\nconst reducer= (state=initState,action)=>{ \r\n       state = JSON.parse(JSON.stringify(state));//initState为复合类型需要深克隆一下;\r\n        switch(action.type){\r\n             case types.SET_DATA_MEMBER://请求数据后对redux进行赋值,可以写语句\r\n                state.memberData=action.data;//左变量用在组件中接收,右变量action传参来\r\n             break;\r\n             case types.GET_DATA_FOOD:\r\n                 state.foodData=action.data;\r\n             break;\r\n             case types.BULK_OPERATION:\r\n                 state.foodData=action.data; // action.data\r\n             break;\r\n             case types.BULK_SEARCH:\r\n                 state.foodData=action.data; \r\n             break;\r\n             case types.GET_DATA_ORDER:\r\n                  state.orderData=action.data\r\n                 state.total=action.total; \r\n             break;\r\n             \r\n            //  case types.SWITCH_CHANGE:\r\n            //      state.changeFood= action.data;//还是修改菜品数据\r\n            //  break;\r\n            //  case types.REMOVE_MENU_ITEMS:\r\n            //      state.foodData=action.data;\r\n            //  break;\r\n        }\r\n        return state;\r\n    }\r\n  export  {reducer}\r\n/* 测试 */\r\n\r\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */"]},"metadata":{},"sourceType":"module"}