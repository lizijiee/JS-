{"ast":null,"code":"//说明： 哪里使用那里引入此文件;\nimport * as types from '../constants/actionTypes'; //注释在此文件中\n\nimport { finished } from 'stream';\nexport var setMemberInfo = function setMemberInfo(data) {\n  return {\n    type: types.SET_DATA_MEMBER,\n    data: data\n  };\n};\nexport var getFoodInfo = function getFoodInfo(data) {\n  return {\n    type: types.GET_DATA_FOOD,\n    data: data\n  };\n};\nexport var switchChange = function switchChange(data) {\n  return {\n    type: types.SWITCH_CHANGE,\n    data: data\n  };\n}; // export const deleteFood = data => ({\n//   type: types.REMOVE_MENU_ITEMS,\n//   data\n// })\n\nexport var bulkOperation = function bulkOperation(data) {\n  return {\n    //批量操作\n    type: types.BULK_OPERATION,\n    data: data\n  };\n};\nexport var combinedQuery = function combinedQuery(data) {\n  return {\n    //多重查找\n    type: types.BULK_SEARCH,\n    data: data\n  };\n};\nexport var fetchMemmberInfo = function fetchMemmberInfo(subreddit) {\n  return function (dispatch) {\n    //请求会员信息数据\n    return fetch(\"http://localhost:2000/pers/member\", {\n      method: 'GET'\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return dispatch(setMemberInfo(data));\n    });\n  };\n};\nexport var fetchFoodInfo = function fetchFoodInfo() {\n  return function (dispatch) {\n    //请求会员信息数据\n    return fetch(\"http://localhost:2000/food/list\", {\n      method: 'GET'\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return dispatch(getFoodInfo(data));\n    });\n  };\n}; //----------------------    按钮切换    -----------------\n\nexport var transRecommend = function transRecommend(valid, targetName, body) {\n  return function (dispatch) {\n    //请求会员信息数据\n    // valid: 切换后的状态   false 删除数据   true 增加数据\n    // targetName  目标类名\n    // body整条信息\n    var url = \"\";\n\n    if (valid) {\n      url = \"food?act=addMarket&&categoryName=\".concat(targetName);\n    } else {\n      url = \"food?act=delMarket&&categoryName=\".concat(targetName);\n    }\n\n    return fetch(\"http://localhost:2000/\".concat(url), {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return dispatch(fetchFoodInfo(data));\n    });\n  };\n}; //----------------------    菜品编辑    -----------------\n\nexport var editClick = function editClick(target, ele, ev) {\n  return function (dispatch) {\n    // ev.preventDefault();\n    target.history.push({\n      //将此条完整菜品信息藏在state中\n      pathname: \"/food/listDetails\",\n      state: {\n        ele: ele,\n        categoryName: ele.categoryName\n      },\n      search: '?num=' + ele.spuId\n    });\n  };\n}; //----------------------    批量查找   ----------------------\n\nexport var batchQuery = function batchQuery(require, data) {\n  return function (dispatch) {\n    // 请求会员信息数据\n    // 前端把操作方式和操作数据发送给后端,先进行判断如果已经存在就不要发送后端了,redux里面也有数据,判断下\n    // 三个变量就去state里面找;\n    // 两个变量,侧重推荐,选后两个的(例如：菜品类型,中进入推荐状态的)\n    // 一个变量,就不聊了\n    var result = null;\n\n    if (require.spuName) {\n      require.spuName = require.spuName.replace(/\\s+/g, \"\"); //不改变原数组\n    }\n\n    if (Object.values(require).every(function (ele) {\n      return !!ele == true;\n    }) && require.spuName !== \"\") {\n      // 当三个输入框都有内容,第一个input如果输入过以后,再获取会导致拿到空字符串,需要筛选出去;   \n      // every 为true;\n      var tempData = null;\n      var recommendData = data.find(function (i) {\n        return i.categoryName === require.recommendState;\n      }); //找出选中推荐状态对应数据\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var ele = _step.value;\n\n          // 找出菜品类型选中状态,对应数据进行查找,看里面有没有输入框中输入的数据\n          if (ele.categoryName === require.categoryName) {\n            tempData = ele;\n            var firstData = ele.spuList.filter(function (items) {\n              return items.spuName === require.spuName.replace(/\\s+/g, \"\");\n            });\n\n            if (JSON.stringify(firstData) !== \"[]\") {\n              // 验证菜品类型中存在后，检验在推荐状态对应数据中是否存在\n              result = recommendData.spuList.filter(function (ele) {\n                return ele.spuName === require.spuName.replace(/\\s+/g, \"\");\n              })[0];\n            } else {\n              result = null;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } else {\n      var _ret = function () {\n        /* \r\n          思路整理：  \r\n             1.首先判断到底是谁存在,用filter过滤出来然后去查找,查找要求为两个都符合要求;\r\n             2.如果只有一个true那很好弄,直接查找, 还是要用switch;\r\n             3.如果是两个为true,也是直接查找把如果主食和热销在一起情况特殊点，不考虑了.\r\n             因为数据结构本来写的也不好\r\n        */\n        //把有输入内容的key数值搞出来，形成一个数组,对数组进行循环\n        var queryReal = Object.keys(require).filter(function (item) {\n          return !!require[item] === true;\n        }); // 真实查找要求,经过筛选以后的key值  [\"spuName\"]\n\n        var arr = [];\n        var storeMethod = null;\n        var recommendList = null;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var items = _step2.value;\n            storeMethod = {\n              // 存放方法\n              categoryName: function categoryName() {\n                // 菜品/推荐  类型存在\n                if (items.spuList.find(function (i) {\n                  return i.spuName === require.spuName;\n                })) {\n                  result = items.spuList.find(function (i) {\n                    return i.spuName === require.spuName;\n                  });\n                }\n\n                if (!require.spuName) {\n                  // 菜名输入框没有内容\n                  result = items.spuList;\n                }\n              },\n              spuName: function spuName(item, list) {\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                  for (var _iterator3 = list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var _item = _step3.value;\n\n                    // 排除推荐类型和菜品类型以后,只剩下输入搜索\n                    if (_item.spuName == require.spuName) {\n                      // 深层循环\n                      arr.push(_item);\n                      result = arr;\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError3 = true;\n                  _iteratorError3 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                      _iterator3.return();\n                    }\n                  } finally {\n                    if (_didIteratorError3) {\n                      throw _iteratorError3;\n                    }\n                  }\n                }\n              } // 菜名存在分两种另外两个是否存在,两个二选一存在用或者,\n\n            };\n\n            if (items.categoryName === require.categoryName) {\n              storeMethod.categoryName();\n              console.log(require.recommendState);\n            } else if (items.categoryName === require.recommendState) {\n              storeMethod.categoryName(); // 推荐类型存在\n              //  菜品类型和推荐状态都存在\n              // 1.拿到菜品类型的tag,\n              // 2.选中推荐状态的spuList从总数据中拿到\n              // 3.查看spuList是否有需要的tag,生成新数组\n              // 0.操作数据时,类名对应tag,只修改文字value数值,tag当推荐类型中索引\n              // console.log(items.tag) //1 get √\n\n              recommendList = data.filter(function (ele) {\n                return ele.categoryName === require.recommendState;\n              })[0].spuList; //2 get √\n              // 循环生成新数组\n\n              var list = recommendList.filter(function (info) {\n                return info.tag === items.tag; //3 get √\n              });\n\n              if (!list) {\n                result = null;\n                return {\n                  v: {\n                    v: void 0\n                  }\n                };\n              }\n\n              result = list;\n            } else {\n              storeMethod.spuName(items, items.spuList);\n            }\n          };\n\n          for (var _iterator2 = data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _ret2 = _loop();\n\n            if (typeof _ret2 === \"object\") return _ret2.v;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }();\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return dispatch(combinedQuery(result)); //新数据丢进去\n  };\n};\n/*  fetch(`http://localhost:2000/pers?act=deleteClerks`,\r\n  {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(obj)\r\n  }\r\n)\r\n  .then(res => res.json())\r\n  .then(data => {\r\n    // 后台返回数据后页面是否渲染???\r\n    this.setState({\r\n      data: data.data,\r\n      storeData: data.data\r\n    })\r\n  }) */\n\n/* \r\nexport const getList=()=>{\r\n    //action可以是一个函数，有dispatch参数\r\n return (dispatch)=>{\r\n     axios.get('/api/headerList.json').then((res)=>{\r\n         const data=res.data;\r\n         dispatch(listInitAction(data.data))\r\n     }).catch(()=>{\r\n         console.log('error');\r\n     });\r\n }    \r\n};\r\n */","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\redux\\actions\\actions.js"],"names":["types","finished","setMemberInfo","data","type","SET_DATA_MEMBER","getFoodInfo","GET_DATA_FOOD","switchChange","SWITCH_CHANGE","bulkOperation","BULK_OPERATION","combinedQuery","BULK_SEARCH","fetchMemmberInfo","subreddit","dispatch","fetch","method","then","res","json","fetchFoodInfo","transRecommend","valid","targetName","body","url","headers","JSON","stringify","editClick","target","ele","ev","history","push","pathname","state","categoryName","search","spuId","batchQuery","require","result","spuName","replace","Object","values","every","tempData","recommendData","find","i","recommendState","firstData","spuList","filter","items","queryReal","keys","item","arr","storeMethod","recommendList","list","console","log","info","tag"],"mappings":"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","sourcesContent":["//说明： 哪里使用那里引入此文件;\r\nimport * as types from '../constants/actionTypes'; //注释在此文件中\r\nimport {\r\n  finished\r\n} from 'stream';\r\n\r\nexport const setMemberInfo = data => ({\r\n  type: types.SET_DATA_MEMBER,\r\n  data\r\n})\r\nexport const getFoodInfo = data => ({\r\n  type: types.GET_DATA_FOOD,\r\n  data\r\n})\r\nexport const switchChange = data => ({\r\n  type: types.SWITCH_CHANGE,\r\n  data\r\n})\r\n// export const deleteFood = data => ({\r\n//   type: types.REMOVE_MENU_ITEMS,\r\n//   data\r\n// })\r\nexport const bulkOperation = data => ({ //批量操作\r\n  type: types.BULK_OPERATION,\r\n  data\r\n})\r\nexport const combinedQuery = data => ({ //多重查找\r\n  type: types.BULK_SEARCH,\r\n  data\r\n})\r\n\r\n\r\n\r\n\r\nexport const fetchMemmberInfo = subreddit => dispatch => { //请求会员信息数据\r\n  return fetch(`http://localhost:2000/pers/member`, {\r\n      method: 'GET',\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => dispatch(setMemberInfo(data)))\r\n}\r\nexport const fetchFoodInfo = () => dispatch => { //请求会员信息数据\r\n  return fetch(`http://localhost:2000/food/list`, {\r\n      method: 'GET',\r\n    })\r\n    .then(res => res.json())\r\n    .then(data => dispatch(getFoodInfo(data)))\r\n}\r\n\r\n//----------------------    按钮切换    -----------------\r\nexport const transRecommend = (valid, targetName, body) => dispatch => { //请求会员信息数据\r\n  // valid: 切换后的状态   false 删除数据   true 增加数据\r\n  // targetName  目标类名\r\n  // body整条信息\r\n  let url = \"\"\r\n  if (valid) {\r\n    url = `food?act=addMarket&&categoryName=${targetName}`\r\n  } else {\r\n    url = `food?act=delMarket&&categoryName=${targetName}`\r\n  }\r\n  return fetch(`http://localhost:2000/${url}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n    .then(res => res.json())\r\n    .then(\r\n      (data) => dispatch(fetchFoodInfo(data)))\r\n}\r\n\r\n//----------------------    菜品编辑    -----------------\r\nexport const editClick = (target, ele, ev) => dispatch => {\r\n  // ev.preventDefault();\r\n  target.history.push({ //将此条完整菜品信息藏在state中\r\n    pathname: \"/food/listDetails\",\r\n    state: {\r\n      ele,\r\n      categoryName: ele.categoryName\r\n    },\r\n    search: '?num=' + ele.spuId\r\n  });\r\n}\r\n\r\n//----------------------    批量查找   ----------------------\r\nexport const batchQuery = (require, data) => dispatch => { // 请求会员信息数据\r\n  // 前端把操作方式和操作数据发送给后端,先进行判断如果已经存在就不要发送后端了,redux里面也有数据,判断下\r\n  // 三个变量就去state里面找;\r\n  // 两个变量,侧重推荐,选后两个的(例如：菜品类型,中进入推荐状态的)\r\n  // 一个变量,就不聊了\r\n  let result = null;\r\n  if (require.spuName) {\r\n    require.spuName = require.spuName.replace(/\\s+/g, \"\") //不改变原数组\r\n  }\r\n  if (Object.values(require).every(ele => (!!ele) == true) && require.spuName !== \"\") {\r\n    // 当三个输入框都有内容,第一个input如果输入过以后,再获取会导致拿到空字符串,需要筛选出去;   \r\n    // every 为true;\r\n    let tempData = null;\r\n    let recommendData = data.find(i => i.categoryName === require.recommendState) //找出选中推荐状态对应数据\r\n    for (let ele of data) { // 找出菜品类型选中状态,对应数据进行查找,看里面有没有输入框中输入的数据\r\n      if (ele.categoryName === require.categoryName) {\r\n        tempData = ele\r\n        let firstData = ele.spuList.filter((items) => {\r\n          return items.spuName === require.spuName.replace(/\\s+/g, \"\")\r\n        })\r\n        if (JSON.stringify(firstData) !== \"[]\") {\r\n          // 验证菜品类型中存在后，检验在推荐状态对应数据中是否存在\r\n          result = recommendData.spuList.filter((ele) => ele.spuName === require.spuName.replace(/\\s+/g, \"\"))[0]\r\n        } else {\r\n          result = null\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    /* \r\n      思路整理：  \r\n         1.首先判断到底是谁存在,用filter过滤出来然后去查找,查找要求为两个都符合要求;\r\n         2.如果只有一个true那很好弄,直接查找, 还是要用switch;\r\n         3.如果是两个为true,也是直接查找把如果主食和热销在一起情况特殊点，不考虑了.\r\n         因为数据结构本来写的也不好\r\n    */\r\n    //把有输入内容的key数值搞出来，形成一个数组,对数组进行循环\r\n    let queryReal = Object.keys(require).filter((item) => !!require[item] === true)\r\n    // 真实查找要求,经过筛选以后的key值  [\"spuName\"]\r\n    let arr = []\r\n    let storeMethod = null\r\n    let recommendList = null\r\n    for (let items of data) {\r\n      storeMethod = {\r\n        // 存放方法\r\n        categoryName: () => {\r\n          // 菜品/推荐  类型存在\r\n          if (items.spuList.find(i => i.spuName === require.spuName)) {\r\n            result = items.spuList.find(i => i.spuName === require.spuName)\r\n          }\r\n          if (!require.spuName) {\r\n            // 菜名输入框没有内容\r\n            result = items.spuList\r\n          }\r\n        },\r\n        spuName: (item, list) => {\r\n          for (let item of list) {\r\n            // 排除推荐类型和菜品类型以后,只剩下输入搜索\r\n            if (item.spuName == require.spuName) {\r\n              // 深层循环\r\n              arr.push(item)\r\n              result = arr\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 菜名存在分两种另外两个是否存在,两个二选一存在用或者,\r\n      if (items.categoryName === require.categoryName) {\r\n        storeMethod.categoryName()\r\n        console.log(require.recommendState)\r\n      } else if (items.categoryName === require.recommendState) {\r\n        storeMethod.categoryName() // 推荐类型存在\r\n        //  菜品类型和推荐状态都存在\r\n        // 1.拿到菜品类型的tag,\r\n        // 2.选中推荐状态的spuList从总数据中拿到\r\n        // 3.查看spuList是否有需要的tag,生成新数组\r\n        // 0.操作数据时,类名对应tag,只修改文字value数值,tag当推荐类型中索引\r\n        // console.log(items.tag) //1 get √\r\n        recommendList = data.filter(ele => ele.categoryName === require.recommendState)[0].spuList //2 get √\r\n        // 循环生成新数组\r\n        let list = recommendList.filter(info => {\r\n          return info.tag === items.tag //3 get √\r\n        })\r\n        if (!list) {\r\n          result = null\r\n          return\r\n        }\r\n        result = list\r\n      } else {\r\n        storeMethod.spuName(items, items.spuList)\r\n      }\r\n    }\r\n  }\r\n  return dispatch(combinedQuery(result)) //新数据丢进去\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*  fetch(`http://localhost:2000/pers?act=deleteClerks`,\r\n  {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(obj)\r\n  }\r\n)\r\n  .then(res => res.json())\r\n  .then(data => {\r\n    // 后台返回数据后页面是否渲染???\r\n    this.setState({\r\n      data: data.data,\r\n      storeData: data.data\r\n    })\r\n  }) */\r\n\r\n/* \r\nexport const getList=()=>{\r\n    //action可以是一个函数，有dispatch参数\r\n return (dispatch)=>{\r\n     axios.get('/api/headerList.json').then((res)=>{\r\n         const data=res.data;\r\n         dispatch(listInitAction(data.data))\r\n     }).catch(()=>{\r\n         console.log('error');\r\n     });\r\n }    \r\n};\r\n */"]},"metadata":{},"sourceType":"module"}