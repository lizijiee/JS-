{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Base from './input-base';\nimport { getMouseCoordinate } from '../../../fc-core/src/lib';\n\nvar correctZoomRatio = function correctZoomRatio(a) {\n  return 0 > a ? -a : a;\n},\n    max = Math.max,\n    min = Math.min,\n    getZoomRange = function getZoomRange(a, b, c, d, e) {\n  var f = Math.round,\n      g = a.getVisibleConfig(),\n      h = a.getValue(b[d ? 'y' : 'x'] + a.getTranslation()),\n      i = h - g.minValue,\n      j = g.maxValue - h,\n      k = a.config.axisRange;\n  return {\n    min: f(max(k.min, h - i / c) * e) / e,\n    max: f(min(k.max, h + j / c) * e) / e\n  };\n};\n\nvar InputPinchZoom =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(InputPinchZoom, _Base);\n\n  function InputPinchZoom() {\n    var _this;\n\n    _classCallCheck(this, InputPinchZoom);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputPinchZoom).call(this));\n\n    var a = _assertThisInitialized(_this);\n\n    a.controlArr = [{\n      nativeInteraction: ['fc-pinchstart'],\n      callback: a.pinchstart.bind(a),\n      component: a\n    }, {\n      nativeInteraction: ['fc-pinchmove'],\n      callback: a.pinchmove.bind(a),\n      component: a\n    }];\n    return _this;\n  }\n\n  _createClass(InputPinchZoom, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'pinchZoom';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(InputPinchZoom.prototype), \"configure\", this).call(this), this.enable();\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(a, b) {\n      var c = this.getFromEnv('chart'),\n          d = getMouseCoordinate(c.getLinkedItem('container'), {\n        pageX: (a.pageX + b.pageX) / 2,\n        pageY: (a.pageY + b.pageY) / 2\n      }, c);\n      return {\n        x: d.chartX,\n        y: d.chartY\n      };\n    }\n  }, {\n    key: \"pinchmove\",\n    value: function pinchmove(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j = this,\n          k = a.originalEvent.data,\n          l = k.distanceX,\n          m = k.distanceY,\n          n = j.config,\n          o = n.touchConfig,\n          p = {},\n          q = !1,\n          r = {},\n          s = j.getFromEnv('chart'),\n          t = j.getFromEnv('axesObArr'),\n          u = Math.pow(10, n.zoomDecimalLimit) || 1,\n          v = s.getChildContainer().plotGroup;\n      b = correctZoomRatio(l / o.distanceX), c = correctZoomRatio(m / o.distanceY), t.forEach(function () {\n        v.transform(''), v.scale(b, c, o.center.x, o.center.y);\n      }), clearTimeout(n.chartDraw), n.chartDraw = setTimeout(function () {\n        v.transform(''), t.forEach(function (a) {\n          var k = a.axis,\n              l = getZoomRange(k, o.center, a.isY ? c : b, a.isY, u),\n              m = l.min,\n              n = l.max,\n              s = a.stack,\n              t = k.getVisibleConfig(),\n              v = k.getLimit(),\n              w = s.length - 1,\n              x = s[w],\n              y = Math.floor(m) === v.min && Math.ceil(n) === v.max,\n              z = k.getZoom() >= u;\n          if (!x) y || z || (s.push(t), p.zoomin = !0);else if (y) a.stack = [], p.zoomout = !0;else if (x.minValue > m && x.maxValue < n) {\n            for (; x && x.minValue > m && x.maxValue < n;) {\n              s.pop(), x = s[--w];\n            }\n\n            p.zoomout = !0;\n          } else z || (s.push(t), p.zoomin = !0);\n          a.isY ? (g = m, h = n) : (e = m, f = n, r = j.constructor._getZoomInfo(e, f, k)), i = a.stack.length + 1, d = k.setVisibleConfig(m, n), q = q || d;\n        }), q && (p.zoomout && j._raiseZoomEvents('zoomout', 'zoomedout', Object.assign(r, {\n          level: i,\n          startX: e,\n          endX: f,\n          startY: g,\n          endY: h\n        })), p.zoomin && j._raiseZoomEvents('zoomin', 'zoomedin', Object.assign(r, {\n          level: i,\n          startX: e,\n          endX: f,\n          startY: g,\n          endY: h\n        }))), n.chartDraw = null;\n      }, 250);\n    }\n  }, {\n    key: \"pinchstart\",\n    value: function pinchstart(a) {\n      var b,\n          c = this,\n          d = c.getFromEnv('axesObArr'),\n          e = a.originalEvent.data,\n          f = e;\n      this.getFromEnv('animationManager').setAnimationState('touch'), f.center = c.getCenter(e.finger0, e.finger1), c.config.touchConfig = e, d.forEach(function (a) {\n        b = a.axis, a.visibleConfig = b.getVisibleConfig(), a.centerVal = b.getValue(a.isY ? f.center.y : f.center.x);\n      });\n    }\n  }, {\n    key: \"setControl\",\n    value: function setControl() {\n      var a = this,\n          b = a.getLinkedParent(),\n          c = a.controlArr;\n      b.releaseControl(c), a.isEnabled() && b.getControl(c);\n    }\n  }]);\n\n  return InputPinchZoom;\n}(Base);\n\nexport default InputPinchZoom;","map":null,"metadata":{},"sourceType":"module"}