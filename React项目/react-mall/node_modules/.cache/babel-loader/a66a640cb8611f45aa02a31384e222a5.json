{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Base from './input-base';\nimport { getMouseCoordinate } from '../../../fc-core/src/lib';\n\nvar InputSwipeGesture =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(InputSwipeGesture, _Base);\n\n  function InputSwipeGesture() {\n    var _this;\n\n    _classCallCheck(this, InputSwipeGesture);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputSwipeGesture).call(this));\n\n    var a = _assertThisInitialized(_this);\n\n    a.controlArr = [{\n      nativeInteraction: ['fc-dragend'],\n      callback: a.end.bind(a),\n      component: a\n    }, {\n      nativeInteraction: ['fc-dragmove'],\n      callback: a.move.bind(a),\n      component: a\n    }, {\n      nativeInteraction: ['fc-dragstart'],\n      callback: a.start.bind(a),\n      component: a\n    }];\n    return _this;\n  }\n\n  _createClass(InputSwipeGesture, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'swipeGesture';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(InputSwipeGesture.prototype), \"configure\", this).call(this), this.enable();\n    }\n  }, {\n    key: \"getPresentScrollValue\",\n    value: function getPresentScrollValue() {\n      var a = this,\n          b = a.config.xAxis,\n          c = b.getVisibleConfig(),\n          d = b.getLimit(),\n          e = c.maxValue - c.minValue,\n          f = d.max - d.min;\n      return (c.minValue - d.min) / (f - e);\n    }\n  }, {\n    key: \"start\",\n    value: function start(a) {\n      var b,\n          c,\n          d = this,\n          e = d.getFromEnv('chart'),\n          f = d.config;\n      b = getMouseCoordinate(e.getFromEnv('chart-container'), a.originalEvent, e), f.previousX = b.chartX, f.presentScrollValue = c = d.getPresentScrollValue(), e.fireChartInstanceEvent('scrollStart', {\n        scrollPosition: c\n      });\n    }\n  }, {\n    key: \"move\",\n    value: function move(a) {\n      var b,\n          c = this,\n          d = c.config,\n          e = c.getFromEnv('chart'),\n          f = d.xAxis,\n          g = f.getChildren('scrollBar') && f.getChildren('scrollBar')[0],\n          h = g && g.getChildren('scrollAnchor')[0],\n          i = f.config.axisRange,\n          j = getMouseCoordinate(e.getFromEnv('chart-container'), a.originalEvent, e),\n          k = j.chartX,\n          l = (k - d.previousX) / d.plotDifference,\n          m = f.getVisibleConfig(),\n          n = d.previousScrollValue = d.presentScrollValue,\n          o = m.minValue - l,\n          p = d.axisMin,\n          q = d.axisMax,\n          r = m.maxValue - l;\n      o < p && p === m.minValue || r > q && q === m.maxValue || (o < p ? (r += l, l = m.minValue - p, r -= l, o = p) : q < r && (o += l, l = q - m.maxValue, o += l, r = q), b = (o - i.min) / (i.max - i.min - (r - o)), h.config.scrollPosition = b, e.getFromEnv('animationManager').setAnimationState('scroll'), f.setVisibleConfig(o, r), e.fireChartInstanceEvent('onScroll', {\n        scrollPosition: n\n      }), d.previousX = k, d.presentScrollValue = c.getPresentScrollValue());\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      var a = this,\n          b = a.config,\n          c = a.getFromEnv('chart');\n      c.fireChartInstanceEvent('scrollEnd', {\n        previousScrollPosition: b.previousScrollValue,\n        scrollPosition: b.presentScrollValue\n      });\n    }\n  }, {\n    key: \"setControl\",\n    value: function setControl() {\n      var a = this,\n          b = a.getLinkedParent(),\n          c = a.controlArr;\n      b.releaseControl(c), a.isEnabled() && b.getControl(c);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a = this,\n          b = a.config,\n          c = a.getFromEnv('canvas').getAxes().filter(function (a) {\n        return !a.isY;\n      }),\n          d = b.xAxis = c && c[0] && c[0].axis,\n          e = d.config.axisRange;\n      b.plotDifference = d.getPixel(1) - d.getPixel(0), b.axisMin = e.min, b.axisMax = e.max;\n    }\n  }]);\n\n  return InputSwipeGesture;\n}(Base);\n\nexport default InputSwipeGesture;","map":null,"metadata":{},"sourceType":"module"}