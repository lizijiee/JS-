{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport BaseChart from '../../../../fc-core/src/base-chart';\nimport canvasFactory from '../../factories/canvas';\nimport { addDep, getDep } from '../../../../fc-core/src/dependency-manager';\nimport Caption from '../../_internal/components/caption';\nimport SubCaption from '../../_internal/components/sub-caption';\nimport Background from '../../_internal/components/background';\nimport ColorManager from '../../_internal/color-utils/colormanager';\nimport NumberFormatter from '../../../../fc-core/src/number-formatter';\nimport { raiseEventGroup } from '../../../../fc-core/src/event-api';\nimport commonAnimation from './common.animation';\nimport { chartPaletteStr, getLinkAction, pluckNumber, pluck, BLANKSTRING, POSITION_BOTTOM, UNDEF, pluckFontSize, PXSTRING, setLineHeight, getFirstValue, pInt, getDashStyle, DASH_DEF, extend2, preDefStr, ROUND, POINTER, HAND, getMouseCoordinate, POSITION_MIDDLE, componentFactory, hasSVG, convertColor, parseConfiguration } from '../../../../fc-core/src/lib';\nimport domEvtHandler from '../../../../fc-core/src/dom-event';\nimport { ToolBar, Hamburger } from '../../../../fc-core/src/toolbox';\nimport { SymbolStore } from '../../../../fc-core/src/toolbox/tools/helper';\n\nvar Raphael = getDep('redraphael', 'plugin'),\n    isVML = 'VML' === Raphael.type,\n    mathMax = Math.max,\n    mathMin = Math.min,\n    mathRound = Math.round,\n    eventMap = {\n  datalabelclick: !0,\n  connectorclick: !0,\n  categoryclick: !0,\n  processclick: !0,\n  milestoneclick: !0,\n  labelclick: !0,\n  dataplotclick: !0\n},\n    SEVENTYSTRING = preDefStr.SEVENTYSTRING,\n    AUTO = preDefStr.AUTOSTRING,\n    BOLD = 'bold',\n    NORMAL = 'normal',\n    POSITION_RIGHT = 'right',\n    supportsPointer = 'onpointerover' in window.document,\n    POSITION_START = 'start',\n    POSITION_END = 'end',\n    assign = function assign() {\n  for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n    e[_key] = arguments[_key];\n  }\n\n  var t = e[0],\n      o = e.slice(1);\n  return o.forEach(function (e) {\n    for (var _o in e) {\n      e.hasOwnProperty(_o) && void 0 !== e[_o] && (t[_o] = e[_o]);\n    }\n  }), t;\n},\n    createGroup = function createGroup(e, t, o) {\n  var a = o.getFromEnv('animationManager');\n  return a.setAnimation({\n    el: 'group',\n    attr: e,\n    container: t,\n    state: 'appearing',\n    component: o,\n    label: 'group'\n  });\n},\n    _registerMouseDown = function _registerMouseDown(t) {\n  var e = t.data.config;\n  e._containerMouseState = 'mousedown', e._mdx1 = t.clientX === UNDEF ? t.changedTouches && t.changedTouches[0].clientX : t.clientX, e.mdy1 = t.clientY === UNDEF ? t.changedTouches && t.changedTouches[0].clientY : t.clientY, 'touchstart' === t.type && (e._touchStartedAt = new Date().getTime());\n},\n    _registerMouseMove = function _registerMouseMove(t) {\n  var e = Math.abs;\n  var o = t.data.config,\n      a = t.clientX === UNDEF ? t.changedTouches && t.changedTouches[0].clientX : t.clientX,\n      n = t.clientY === UNDEF ? t.changedTouches && t.changedTouches[0].clientY : t.clientY;\n  (2.5 <= e(o._mdx1 - a) || 2.5 <= e(o.mdy1 - n)) && (t.data.config._containerMouseState = void 0);\n},\n    _onContainerClickIOS = function _onContainerClickIOS(t) {\n  500 > new Date().getTime() - t.data.config._touchStartedAt && setTimeout(function () {\n    onContainerClick(t);\n  });\n},\n    onContainerClick = function onContainerClick(t) {\n  var e,\n      o = t.data,\n      a = o.getFromEnv('chartInstance'),\n      n = t.originalEvent,\n      i = o.config,\n      r = getMouseCoordinate(o.getFromEnv('chart-container'), n, o);\n  a.ref && 'mousemove' !== i._containerMouseState && (e = extend2({\n    height: a.args.height,\n    width: a.args.width,\n    pixelHeight: o.getFromEnv('chartWidth'),\n    pixelWidth: o.getFromEnv('chartHeight'),\n    id: a.args.id,\n    renderer: a.args.renderer,\n    container: a.options.containerElement\n  }, r), o.fireChartInstanceEvent('chartclick', e), i.link && (!i.hotElemClicked || i.clickURLOverridesPlotLinks) && o.getFromEnv('linkClickFN').call({\n    link: i.link\n  }), i.hotElemClicked = !1);\n},\n    chartHoverManager = function chartHoverManager(t) {\n  var e = t.type,\n      o = t.data,\n      a = o.getFromEnv('eventListeners');\n  ('mouseover' === e || 'touchstart' === e) && !1 === o.config.mouseStateIn && (o.config.mouseStateIn = !0, CommonAPI.onContainerRollOver(t), a.push(domEvtHandler.listen(isVML ? document : window, 'mouseover', CommonAPI.winMouseHover, o)));\n},\n    toolbarPositionParser = function toolbarPositionParser(e) {\n  return e = 'tr' === e || 'rt' === e || 'top right' === e || 'right top' === e ? 'tr' : 'br' === e || 'rb' === e || 'bottom right' === e || 'right bottom' === e ? 'br' : 'tl' === e || 'lt' === e || 'top left' === e || 'left top' === e ? 'tl' : 'bl' === e || 'lb' === e || 'bottom left' === e || 'left bottom' === e ? 'bl' : 'tr', e;\n};\n\nfunction _createToolBox2() {\n  var e,\n      t,\n      o,\n      a = this,\n      n = this,\n      i = a.config,\n      r = a.getFromEnv('chart-attrib'),\n      l = 't' === i.toolbarVAlign ? 'chartMenuBar' : 'actionBar',\n      s = 't' === i.toolbarVAlign ? 'actionBar' : 'chartMenuBar',\n      g = a.getFromEnv('tool-config'),\n      c = i.printOption.enabled;\n  e = n.config.realTimeConfig || {}, componentFactory(a, ToolBar, s, 0, [r]), componentFactory(a, ToolBar, l, 1, [r]), t = a.getChildren(l)[0], a.addToEnv('toolbar', t), SymbolStore.register('ContextIcon', function (e, t, o) {\n    var a = e,\n        n = t,\n        i = 2 * o,\n        r = mathRound(i / 4),\n        l = .7 * mathRound(i / 2),\n        s = a - l,\n        g = a + l,\n        c = n + r,\n        d = n - r;\n    return ['M', s, n, 'L', g, n, 'M', s, c, 'L', g, c, 'M', s, d, 'L', g, d];\n  }), o = t.attachChild(Hamburger, 'tool', \"hamburgerMenu-\".concat(t.getId(), \"-\").concat(a.getId(), \"-0\")), a.addToEnv('hamburger', o), o.configure(Object.assign({}, g, {\n    name: 'ContextIcon'\n  })), o._mouseOutEvent || (o._mouseOutEvent = function () {\n    this.getChild('listContainer').hide();\n  }), o._mouseOverEvent || (o._mouseOverEvent = function () {\n    this.getChild('listContainer').show();\n  }), o.addEventListener('fc-mouseover', o._mouseOverEvent), o.addEventListener('fc-mouseout', o._mouseOutEvent), c && o.appendInMenu([{\n    name: 'Print',\n    action: 'click',\n    handler: function handler() {\n      a.getFromEnv('chartInstance').print();\n    }\n  }]), n._setRTmenu && n._setRTmenu(e.showRTmenuItem, e.useMessageLog);\n}\n\nfunction _drawDataset() {\n  var e = this,\n      t = e.getChildren('canvas')[0];\n\n  t._mapChildren(function (e) {\n    e.syncDraw();\n  });\n}\n\nfunction configurer(e) {\n  var t = this;\n  t.config.skipConfigureIteration = {}, t.parseChartAttr(e), t.createComponent(e), t._createToolBox(), t.setTooltipStyle(), t.configureChildren();\n}\n\naddDep({\n  name: 'commonAnimation',\n  type: 'animationRule',\n  extension: commonAnimation\n});\n\nvar CommonAPI =\n/*#__PURE__*/\nfunction (_BaseChart) {\n  _inherits(CommonAPI, _BaseChart);\n\n  _createClass(CommonAPI, [{\n    key: \"plotEventHandler\",\n    value: function plotEventHandler(e) {\n      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var o = arguments.length > 2 ? arguments[2] : undefined;\n      var a = arguments.length > 3 ? arguments[3] : undefined;\n\n      var n,\n          i,\n          r = this,\n          l = t.type,\n          s = getMouseCoordinate(r.getFromEnv('chart-container'), t, r),\n          g = e && e.data('eventArgs') || a,\n          c = extend2(s, g),\n          d = r.fireGroupEvent,\n          h = e && e.data('groupId'),\n          p = function p() {\n        t.FusionChartsPreventEvent = !0;\n      };\n\n      'index' in c && !('dataIndex' in c) && (c.dataIndex = c.index), 'value' in c && !('dataValue' in c) && (c.dataValue = c.value), o = pluck(o, 'dataplotclick').toLowerCase(), 'dataplotrollover' === o ? (t.FusionChartsPreventEvent = !1, d ? raiseEventGroup(h, o, c, r.getFromEnv('chartInstance'), UNDEF, UNDEF, p) : r.fireChartInstanceEvent(o, c, UNDEF, UNDEF, p)) : d && !eventMap[o] ? raiseEventGroup(h, o, c, r.getFromEnv('chartInstance')) : r.fireChartInstanceEvent(o, c), ('fc-click' === l || 'click' === l || 'mouseup' === l || 'touchend' === l) && /click/i.test(o) && (n = r.getFromEnv(), i = n && n.linkClickFN, c.link && i && i.call({\n        link: c.link\n      }, !0));\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return 'CommonAPI';\n    }\n  }]);\n\n  function CommonAPI() {\n    var _this;\n\n    _classCallCheck(this, CommonAPI);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommonAPI).call(this)), _this.addToEnv('stringConstants', {\n      COMPONENT: 'component',\n      CANVAS: 'canvas',\n      CAPTION: 'caption'\n    }), _this.addToEnv('getMouseCoordinate', getMouseCoordinate), _this._drawDataset = _drawDataset, _this.config.mouseStateIn = !1, _this.registerFactory('canvas', canvasFactory), _this._firstConfigure = !0;\n    return _this;\n  }\n\n  _createClass(CommonAPI, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'Cartesian';\n    }\n  }, {\n    key: \"preConfigure\",\n    value: function preConfigure(e) {\n      var t = this.getFromEnv('number-formatter');\n      this.addToEnv('chart-attrib', e.chart), t ? t.configure() : this.addToEnv('number-formatter', new NumberFormatter(this)), _get(_getPrototypeOf(CommonAPI.prototype), \"preConfigure\", this).call(this, e);\n    }\n  }, {\n    key: \"postConfigure\",\n    value: function postConfigure(e) {\n      _get(_getPrototypeOf(CommonAPI.prototype), \"postConfigure\", this).call(this, e), this._firstConfigure = !1;\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults() {\n      _get(_getPrototypeOf(CommonAPI.prototype), \"setDefaults\", this).call(this);\n\n      var e = this.getFromEnv('number-formatter');\n      e && e.setDefaults && e.setDefaults();\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'chartAPI';\n    }\n  }, {\n    key: \"parseChartAttr\",\n    value: function parseChartAttr(e) {\n      var t = Math.abs;\n      var o,\n          a,\n          n,\n          i,\n          r,\n          l,\n          s,\n          g,\n          c,\n          d,\n          h,\n          p,\n          m,\n          v,\n          u = this,\n          b = e || u.getFromEnv('dataSource'),\n          f = u.config.is3D,\n          C = f ? chartPaletteStr.chart3D : chartPaletteStr.chart2D,\n          w = u.isBar,\n          E = u.getFromEnv('color-manager');\n      E || (E = new ColorManager(u), u.addToEnv('color-manager', E)), b.chart = b.chart || b.graph || b.map || {}, delete b.map, delete b.graph, o = b.chart, o || (o = b.chart = {}), a = u.config || (u.config = {}), parseConfiguration(o, a, {}, {\n        showvalues: !0,\n        crosslinecolor: !0,\n        drawcrosslineontop: !0,\n        crosslinealpha: !0,\n        drawcrossline: !0\n      }), a.showValues = pluckNumber(o.showvalues, a.showvalues), a.viewPortConfig = {\n        scaleY: 1,\n        scaleX: 1,\n        x: 0,\n        y: 0\n      }, u.addToEnv('tool-config', assign({}, {\n        scale: o.toolbarbuttonscale,\n        width: o.toolbarbuttonwidth,\n        height: o.toolbarbuttonheight,\n        radius: o.toolbarbuttonradius,\n        spacing: o.toolbarbuttonspacing,\n        marginTop: o.toolbarbuttonmargintop,\n        marginLeft: o.toolbarbuttonmarginleft,\n        marginRight: o.toolbarbuttonmarginright,\n        marginBottom: o.toolbarbuttonmarginbottom,\n        fill: o.toolbarbuttoncolor,\n        labelFill: o.toolbarlabelcolor,\n        symbolFill: o.toolbarsymbolcolor,\n        hoverFill: o.toolbarbuttonhovercolor,\n        stroke: o.toolbarbuttonbordercolor,\n        symbolStroke: o.toolbarsymbolbordercolor,\n        strokeWidth: o.toolbarbuttonborderthickness,\n        symbolStrokeWidth: o.toolbarsymbolborderthickness,\n        bSymbolPadding: o.toolbarsymbolpadding,\n        symbolHPadding: o.toolbarsymbolhpadding,\n        symbolVPadding: o.toolbarsymbolvpadding,\n        hAlign: o.toolbarhalign,\n        vAlign: o.toolbarvalign\n      })), f && (w ? (a.xDepth = 5, a.yDepth = 5) : (a.xDepth = 10, a.yDepth = 10), a.showCanvasBase = v = !!pluckNumber(o.showcanvasbase, 1), a.canvasBasePadding = pluckNumber(o.canvasbasepadding, 2), a.canvasBaseDepth = v ? pluckNumber(o.canvasbasedepth, 10) : 0, a.canvasBgDepth = pluckNumber(o.canvasbgdepth, 3)), E && E.configure(), a.placeAxisLabelsOnTop = pluckNumber(o.placexaxislabelsontop, 0), a.enableAnimation = pluckNumber(o.animation, o.defaultanimation, 1), a.showToolTip = pluckNumber(o.showtooltip, 1), a.printOption = {\n        enabled: pluckNumber(o.printshowbutton, o.showprintmenuitem, 0)\n      }, a.drawCrossLineOnTop = pluckNumber(o.drawcrosslineontop, 1), s = a.style = {}, u.addToEnv('style', s), a.textDirection = '1' === o.hasrtltext ? 'rtl' : BLANKSTRING, s.inCanfontFamily = n = pluck(o.basefont, 'Verdana,sans'), s.inCanfontSize = i = pluckFontSize(o.basefontsize, 10), s.inCancolor = r = pluck(o.basefontcolor, E.getColor(C.baseFontColor)), s.outCanfontFamily = pluck(o.outcnvbasefont, n), s.fontSize = l = pluckFontSize(o.outcnvbasefontsize, i), s.outCanfontSize = l + PXSTRING, s.outCancolor = pluck(o.outcnvbasefontcolor, r).replace(/^#? ([a-f0-9]+)/ig, '#$1'), s.baseFontSize = i, s.inCanfontSize = i + PXSTRING, s.inCancolor = r.replace(/^#? ([a-f0-9]+)/ig, '#$1'), s.inCanvasStyle = d = {\n        fontFamily: n,\n        fontSize: i,\n        color: r\n      }, s.inCanLineHeight = h = setLineHeight(d), m = getFirstValue(o.valuebordercolor, BLANKSTRING), m = m ? convertColor(m, pluckNumber(o.valueborderalpha, o.valuealpha, 100)) : BLANKSTRING, a.reverseXAxis = u.config.allowreversexaxis && pluckNumber(o.reversexaxis, 0), a.showBorder = pluckNumber(o.showborder, f ? 0 : 1), a.borderWidth = mathMax(a.showBorder ? pluckNumber(o.borderthickness, 1) : 0, 0), a.useplotgradientcolor = pluckNumber(o.plotgradientcolor, a.useplotgradientcolor, 0), a.valuefontbold = pluckNumber(o.valuefontbold, a.valuefontbold), a.dataLabelStyle = p = {\n        fontFamily: pluck(o.valuefont, n),\n        fontSize: pluck(o.valuefontsize, pInt(i, 10)) + PXSTRING,\n        lineHeight: h,\n        color: convertColor(pluck(o.valuefontcolor, r), pluckNumber(o.valuefontalpha, o.valuealpha, 100)),\n        fontWeight: a.valuefontbold ? BOLD : NORMAL,\n        fontStyle: pluckNumber(o.valuefontitalic) ? 'italic' : NORMAL,\n        border: m || o.valuebgcolor ? pluckNumber(o.valueborderthickness, 1) + 'px solid' : BLANKSTRING,\n        borderColor: m,\n        borderThickness: pluckNumber(o.valueborderthickness, 1),\n        borderPadding: pluckNumber(o.valueborderpadding, 2),\n        borderRadius: pluckNumber(o.valueborderradius, 0),\n        backgroundColor: o.valuebgcolor ? convertColor(o.valuebgcolor, pluckNumber(o.valuebgalpha, o.valuealpha, 100)) : BLANKSTRING,\n        borderDash: pluckNumber(o.valueborderdashed, 0) ? getDashStyle(pluckNumber(o.valueborderdashlen, 4), pluckNumber(o.valueborderdashgap, 2)) : DASH_DEF\n      }, setLineHeight(p), a.legendposition = pluck(o.legendposition, POSITION_BOTTOM), a.alignLegendWithCanvas = pluckNumber(o.alignlegendwithcanvas, 1), a.origMarginTop = pluckNumber(o.charttopmargin, u.chartTopMargin, 15), a.origMarginLeft = pluckNumber(o.chartleftmargin, u.chartLeftMargin, 15), a.origMarginBottom = pluckNumber(o.chartbottommargin, u.chartBottomMargin, 15), a.origMarginRight = pluckNumber(o.chartrightmargin, u.chartRightMargin, 15), a.origCanvasLeftMargin = pluckNumber(o.canvasleftmargin, 0), a.origCanvasRightMargin = pluckNumber(o.canvasrightmargin, 0), a.origCanvasTopMargin = pluckNumber(o.canvastopmargin, 0), a.origCanvasBottomMargin = pluckNumber(o.canvasbottommargin, 0), a.minChartWidthPercent = pluckNumber(o.minchartwidth, u.minChartWidth, 50) / 100, a.minChartHeightPercent = pluckNumber(o.minchartheight, u.minChartHeight, 50) / 100, a.minCanvasWidthPercent = pluckNumber(o.mincanvaswidth, u.minCanvasWidth, 60) / 100, a.minCanvasHeightPercent = pluckNumber(o.mincanvasheight, u.minCanvasHeight, 30) / 100, g = pluck(o.zeroplanecolor, o.divlinecolor, E.getColor(C.divLineColor)), c = pluck(o.zeroplanealpha, o.divlinealpha, E.getColor('divLineAlpha')), a.zeroPlaneColor = convertColor(g, c), a.zeroPlaneBorderColor = convertColor(pluck(o.zeroplanebordercolor, g), pluckNumber(o.zeroplaneshowborder, 1) ? c : 0), a.zeroPlaneShowBorder = pluckNumber(o.zeroplaneshowborder, 1), a.realtimeEnabled = pluckNumber(o.realtimeenabled, u.isRealTime), a.showLegend = pluckNumber(o.showlegend, u.showLegend, 1), a.link = o.clickurl, a.transposeAxis = pluckNumber(u.transposeAxis, o.transposeaxis, 0), a.useEllipsesWhenOverflow = pluckNumber(o.useellipseswhenoverflow, o.useellipsewhenoverflow, 1), a.drawTrendRegion = pluckNumber(o.drawcrossline, 0), a.plotcolorintooltip = pluckNumber(o.plotcolorintooltip, u.config.singleseries ? 0 : 1), a.plotbinsize = mathMin(pluckNumber(o.plotbinsize, u.plotbinsize, .5), 1), a.labelbinsize = mathMin(pluckNumber(o.labelbinsize, 1), 1), a.labelbinsize = a.plotbinsize > a.labelbinsize ? a.plotbinsize : a.labelbinsize, a.enableMouseOutEvent = pluckNumber(o.enablemouseoutevent, u.enableMouseOutEvent, 1), a.plotSpacePercent = Math.max(pluckNumber(o.plotspacepercent, u.plotSpacePercent), 0), a.maxColWidth = t(pluckNumber(o.maxcolwidth, 50)), a.maxBarHeight = t(pluckNumber(o.maxbarheight, 50)), a.overlapColumns = pluckNumber(o.overlapcolumns, o.overlapbars, a.is3D ? 0 : 1), a.plotPaddingPercent = o.plotpaddingpercent, a.tooltipgrayoutcolor = pluck(o.tooltipgrayoutcolor, preDefStr.colors.AAAAAA), a.clickURLOverridesPlotLinks = pluckNumber(o.clickurloverridesplotlinks, 0), a.toolbarX = pluckNumber(o.toolbarx), a.toolbarY = pluckNumber(o.toolbary), a.toolbarPosition = toolbarPositionParser(pluck(o.toolbarposition, 'tr').toLowerCase()), a.toolbarHAlign = 'left' === (BLANKSTRING + o.toolbarhalign).toLowerCase() ? 'l' : a.toolbarPosition.charAt(1), a.toolbarVAlign = 'bottom' === (BLANKSTRING + o.toolbarvalign).toLowerCase() ? 'b' : a.toolbarPosition.charAt(0), a.toolbarVMargin = pluckNumber(o.toolbarvmargin, 6), a.toolbarHMargin = pluckNumber(o.toolbarhmargin, 10), u.addToEnv('chartConfig', a), u.addToEnv('linkClickFN', getLinkAction(u.getFromEnv('dataSource'), u)), u.addToEnv('dataLabelStyle', p);\n    }\n  }, {\n    key: \"createComponent\",\n    value: function createComponent() {\n      var e,\n          t = this,\n          o = t.config;\n      e = o.skipConfigureIteration, t.createBaseComponent(), t.getFromEnv('animationManager').setAnimationState(t._firstConfigure ? 'initial' : 'update'), componentFactory(t, Caption, 'caption'), e.caption = !0, componentFactory(t, SubCaption, 'subCaption'), e.subCaption = !0, componentFactory(t, Background, 'background'), e.background = !0, t._createConfigurableComponents && t._createConfigurableComponents(), t.config.realtimeEnabled && t._realTimeConfigure && t._realTimeConfigure();\n    }\n  }, {\n    key: \"configureChildren\",\n    value: function configureChildren() {\n      var e = this;\n\n      e._mapChildren(function (t) {\n        !t.getState('removed') && e.config.skipConfigureIteration[t.getName()] && t.configure && t.configure();\n      });\n    }\n  }, {\n    key: \"_createToolBox\",\n    value: function _createToolBox() {\n      _createToolBox2.call(this);\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes(e) {\n      configurer.call(this, e);\n    }\n  }, {\n    key: \"setTooltipStyle\",\n    value: function setTooltipStyle() {\n      var e = this.config,\n          t = this.getFromEnv('toolTipController');\n      t.setStyle({\n        bgColor: convertColor(e.tooltipbgcolor || 'FFF', e.tooltipbgalpha || 100),\n        rawBgColor: (e.tooltipbgcolor || 'FFF').replace(/\\s+/g, '').replace(/^#?([a-f0-9]+)/ig, '#$1'),\n        fontColor: (e.tooltipcolor || e.basefontcolor || '545454').replace(/\\s+/g, '').replace(/^#?([a-f0-9]+)/ig, '#$1'),\n        borderColor: convertColor(e.tooltipbordercolor || '666', e.tooltipborderalpha || 100),\n        rawBorderColor: (e.tooltipbordercolor || '666').replace(/\\s+/g, '').replace(/^#?([a-f0-9]+)/ig, '#$1'),\n        bgAlpha: pluckNumber(e.tooltipbgalpha, 100),\n        borderThickness: pluckNumber(e.tooltipborderthickness, 1),\n        showToolTipShadow: pluckNumber(e.showtooltipshadow, e.showshadow, 1),\n        borderRadius: pluckNumber(e.tooltipborderradius, 0),\n        \"font-size\": e.basefontsize || 10,\n        \"font-family\": e.basefont || this.getFromEnv('style').inCanfontFamily,\n        padding: pluckNumber(e.tooltippadding || 3),\n        borderAlpha: pluckNumber(e.tooltipborderalpha, 100)\n      });\n    }\n  }, {\n    key: \"__setDefaultConfig\",\n    value: function __setDefaultConfig() {\n      _get(_getPrototypeOf(CommonAPI.prototype), \"__setDefaultConfig\", this).call(this);\n\n      var e = this.config;\n      e.valuefontbold = 0, e.stickytracking = 1, e.usemessagelog = 0, e.zeroplanethickness = UNDEF, e.animationeffect = 'linear', e.showshadow = 1, e.showhovereffect = UNDEF, e.plothovereffect = UNDEF, e.anchorhovereffect = UNDEF, e.plotborderdashed = UNDEF, e.stack100percent = UNDEF, e.showpercentvalues = UNDEF, e.showpercentintooltip = UNDEF, e.plotbordercolor = UNDEF, e.showtooltip = 1, e.seriesnameintooltip = 1, e.rotatevalues = 0, e.minimizetendency = 0, e.plotfillangle = 270, e.valuepadding = 2, e.useplotgradientcolor = 1, e.plotborderthickness = 1, e.plotfillalpha = SEVENTYSTRING, e.showvalues = 1, e.valueposition = AUTO, e.drawcrossline = UNDEF, e.tooltipsepchar = ', ', e.usedataplotcolorforlabels = 0, e.placevaluesinside = 0, e.showplotborder = 1, e.use3dlighting = 1, e.useroundedges = 0, e.plotspacepercent = 20, e.plotpaddingpercent = UNDEF, e.plotfillratio = UNDEF, e.maxcolwidth = 50, e.plotborderdashlen = 5, e.plotborderdashgap = 4, e.useScaleRecursively = !0, e.formatnumberscale = 1, e.decimals = 2, e.decimalprecision = 10, e.tooltipbgcolor = 'FFF', e.tooltipcolor = UNDEF, e.tooltipbordercolor = '666', e.tooltipbgalpha = 100, e.tooltipborderthickness = 1, e.showtooltipshadow = UNDEF, e.basefontsize = 10, e.basefont = 'Verdana, sans', e.tooltipborderradius = 0, e.tooltippadding = 3, e.tooltipborderalpha = 100, e.origw = UNDEF, e.origh = UNDEF;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(e) {\n      e.chart = e.chart || e.graph || e.map || {}, _get(_getPrototypeOf(CommonAPI.prototype), \"configure\", this).call(this, e);\n    }\n  }, {\n    key: \"_checkInvalidData\",\n    value: function _checkInvalidData() {\n      var e = this,\n          t = e.getFromEnv('dataSource'),\n          o = e.getFromEnv('chartInstance');\n      if (!e.isWidget && !e.isMap && !(t.data && 0 !== t.data.length) && !t.dataset && !t.value && !t.lineset && !t.annotations && !t.category && !(t.tasks || t.process) && !t.axis) return e.setChartMessage(), e.drawChartMessage(), o.__state.dataReady = !1, o.jsVars.hasNativeMessage = !0, o.jsVars.drawCount += 1, !0;\n    }\n  }, {\n    key: \"_checkInvalidSpecificData\",\n    value: function _checkInvalidSpecificData() {\n      var e = this.getFromEnv('dataSource'),\n          t = e.dataset,\n          o = e.categories;\n      if (!t || !o || 0 === o.length || !o[0].category) return !0;\n    }\n  }, {\n    key: \"setChartEvents\",\n    value: function setChartEvents() {\n      var e = this,\n          t = e.getFromEnv('eventListeners'),\n          o = e.getFromEnv('dataSource'),\n          a = o && o.chart,\n          n = e.getFromEnv('paper') && e.getFromEnv('paper').canvas,\n          i = e.getFromEnv('chart-container'),\n          r = a && pluckNumber(a.enablechartmousemoveevent, 0);\n      (a || n) && (domEvtHandler.unlisten(i, supportsPointer ? 'click' : 'touchend', supportsPointer ? onContainerClick : _onContainerClickIOS), t.push(domEvtHandler.listen(i, 'mousedown touchstart', _registerMouseDown, e)), t.push(domEvtHandler.listen(i, 'mousemove touchmove', _registerMouseMove, e)), t.push(domEvtHandler.listen(i, supportsPointer ? 'click' : 'touchend', supportsPointer ? onContainerClick : _onContainerClickIOS, e)), domEvtHandler.unlisten(n, 'mouseover', chartHoverManager, e), domEvtHandler.unlisten(n, 'touchstart', chartHoverManager, e), domEvtHandler.unlisten(n, 'mouseout', chartHoverManager, e), domEvtHandler.unlisten(n, 'touchend', chartHoverManager, e), t.push(domEvtHandler.listen(n, 'mouseover touchstart mouseout touchend', chartHoverManager, e)), domEvtHandler.unlisten(i, 'mousemove', CommonAPI.onContainerMouseMove, e), domEvtHandler.unlisten(i, 'touchmove', CommonAPI.onContainerMouseMove, e), r && t.push(domEvtHandler.listen(i, 'mousemove touchmove', CommonAPI.onContainerMouseMove, e)));\n    }\n  }, {\n    key: \"get\",\n    value: function get(e, t) {\n      var o = this[e];\n      return t ? o && o[t] : o;\n    }\n  }, {\n    key: \"prepareAttributes\",\n    value: function prepareAttributes() {\n      this.config.hasChartMessage || _get(_getPrototypeOf(CommonAPI.prototype), \"prepareAttributes\", this).call(this);\n    }\n  }, {\n    key: \"disposeChartStyleSheet\",\n    value: function disposeChartStyleSheet() {\n      var e = this,\n          t = e.getFromEnv('paper');\n      t && t.cssClear();\n    }\n  }, {\n    key: \"createChartStyleSheet\",\n    value: function createChartStyleSheet() {\n      var e = this,\n          t = e.getFromEnv('paper');\n      t.cssRender();\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      var e = this.getFromEnv('eventListeners'),\n          t = e && e.length;\n\n      for (; t--;) {\n        e[t].unlisten();\n      }\n\n      _get(_getPrototypeOf(CommonAPI.prototype), \"_dispose\", this).call(this);\n    }\n  }, {\n    key: \"_allocateSpace\",\n    value: function _allocateSpace(e) {\n      var t,\n          o,\n          a = this,\n          n = a.getChildren('canvas'),\n          i = n && n[0].config,\n          r = a.config,\n          l = r.canvasHeight,\n          s = r.canvasWidth,\n          g = r.availableHeight,\n          c = r.availableWidth;\n      o = r.canvasLeft += e.left || 0, t = r.canvasTop += e.top || 0, s = r.canvasWidth = mathMax(s - ((e.left || 0) + (e.right || 0)), 0), l = r.canvasHeight = mathMax(l - ((e.top || 0) + (e.bottom || 0)), 0), r.availableHeight = mathMax(g - ((e.top || 0) + (e.bottom || 0)), 0), r.availableWidth = mathMax(c - ((e.left || 0) + (e.right || 0)), 0), r.canvasRight = o + s, r.canvasBottom = t + l, i && (i.canvasPaddingLeft = mathMax(i.canvasPaddingLeft, e.paddingLeft || 0), i.canvasPaddingRight = mathMax(i.canvasPaddingRight, e.paddingRight || 0), i.canvasPaddingTop = mathMax(i.canvasPaddingTop, e.paddingTop || 0), i.canvasPaddingBottom = mathMax(i.canvasPaddingBottom, e.paddingBottom || 0)), n && n[0].setDimension({\n        top: t,\n        left: o,\n        width: s,\n        height: l\n      });\n    }\n  }, {\n    key: \"_fetchCaptionPos\",\n    value: function _fetchCaptionPos(e) {\n      var t,\n          o = this,\n          a = o.config,\n          n = a.width,\n          i = o.getChildren('chartMenuBar') && o.getChildren('chartMenuBar')[0],\n          r = i ? i.getLogicalSpace() : {},\n          l = r.width || 0,\n          s = o.getChildren('caption') && o.getChildren('caption')[0],\n          g = s.config,\n          c = g.width,\n          d = 'l' === a.toolbarHAlign,\n          h = a.width - e,\n          p = d ? e : h,\n          m = a.origMarginRight,\n          v = a.origMarginLeft,\n          u = d ? v : m;\n      return t = g.align === POSITION_MIDDLE ? p - c / 2 - u - l : 'start' === g.align ? d ? -1 : n - a.canvasLeft - u - c - l + g.horizontalPadding : d ? n - (m + v + l + c) : -1, t;\n    }\n  }, {\n    key: \"_manageCaptionSpacing\",\n    value: function _manageCaptionSpacing(e, t) {\n      var o,\n          a = this,\n          n = a.getChildren('caption')[0];\n      return o = n.manageSpace(e, t), o;\n    }\n  }, {\n    key: \"_manageChartMenuBar\",\n    value: function _manageChartMenuBar(e) {\n      var t,\n          o,\n          a = this,\n          n = a.config,\n          i = a.getChildren('chartMenuBar') && a.getChildren('chartMenuBar')[0],\n          r = void 0 !== n.toolbarY,\n          l = i ? i.getLogicalSpace() : {\n        height: 0,\n        width: 0\n      },\n          s = a.getChildren('caption') && a.getChildren('caption')[0],\n          g = s.config,\n          c = g.isOnTop,\n          d = n.width / 2,\n          h = n.canvasRight,\n          p = h ? (n.canvasLeft + h) / 2 : d,\n          m = 0,\n          v = g.alignWithCanvas ? p : d;\n      return r && (l.height = 0), i && i.setDimension({\n        x: void 0 === n.toolbarX ? pluckNumber('l' === n.toolbarHAlign ? 0 : +n.width) : n.toolbarX,\n        y: void 0 === n.toolbarY ? pluckNumber('t' === n.toolbarVAlign ? 0 : +n.height) : n.toolbarY,\n        width: l.width,\n        height: l.height\n      }), delete g._offsetHeight, o = g.alignWithCanvas ? n.canvasWidth : n.width - n.origMarginLeft - n.origMarginRight, c ? (t = a._manageCaptionSpacing(e, o), m = a._fetchCaptionPos(v), g._offsetHeight = 0 > m ? l.height : 0, t.top = 0 > m ? pluckNumber(t.top, 0) + l.height : mathMax(t.top, l.height), a._allocateSpace(t)) : (a._allocateSpace({\n        top: l.height\n      }), t = a._manageCaptionSpacing(e, o), a._allocateSpace(t)), {\n        top: l ? mathMax(l.height, t.top) : t.top,\n        bottom: t.bottom\n      };\n    }\n  }, {\n    key: \"_manageSpace\",\n    value: function _manageSpace() {\n      var e,\n          t,\n          o,\n          a,\n          n,\n          i,\n          r,\n          l,\n          s,\n          g,\n          c,\n          d,\n          h = this,\n          p = h.getChildren('canvas') && h.getChildren('canvas')[0],\n          m = p && p.config,\n          v = h.config,\n          u = h.getFromEnv('chartWidth'),\n          b = h.getFromEnv('chartHeight');\n      v.width = u, v.height = b, v.minChartHeight = s = v.minChartHeightPercent * b, v.minChartWidth = g = v.minChartWidthPercent * u, v.minCanvasWidth = e = v.minCanvasWidthPercent * g, v.minCanvasHeight = t = v.minCanvasHeightPercent * s, v.marginTop = o = v.origMarginTop, v.marginLeft = a = v.origMarginLeft, v.marginBottom = n = v.origMarginBottom, v.marginRight = i = v.origMarginRight, v.canvasMarginTop = v.origCanvasTopMargin, v.canvasMarginLeft = v.origCanvasLeftMargin, v.canvasMarginBottom = v.origCanvasBottomMargin, v.canvasMarginRight = v.origCanvasRightMargin, v.canvasHeight = r = v.height - v.marginTop - v.marginBottom, v.canvasWidth = l = v.width - v.marginLeft - v.marginRight, v.availableHeight = r - t, v.availableWidth = l - e, r < s && (c = b - s, v.canvasHeight = s, d = o + n, v.marginTop = c * o / d, v.marginBottom = c * n / d, v.availableHeight = s - t), l < g && (c = u - g, d = i + a, v.canvasWidth = g, v.marginLeft = c * a / d, v.marginRight = c * i / d, v.availableWidth = g - e), v.canvasLeft = v.marginLeft, v.canvasTop = v.marginTop, m && (m.canvasPaddingLeft = mathMin(m.origCanvasLeftPad, mathRound(.1 * v.height)), m.canvasPaddingRight = mathMin(m.origCanvasRightPad, mathRound(.1 * v.height)), m.canvasPaddingTop = mathMin(m.origCanvasTopPad, mathRound(.1 * v.height)), m.canvasPaddingBottom = mathMin(m.origCanvasBottomPad, mathRound(.1 * v.height))), h._spaceManager();\n    }\n  }, {\n    key: \"_preDraw\",\n    value: function _preDraw() {\n      var e = this;\n      e._mapChildren(function (e) {\n        !e.getState('removed') && e.preDraw && e.preDraw();\n      }), e._setAxisLimits && e._setAxisLimits(), e._createToolBoxGantt && e._createToolBoxGantt();\n    }\n  }, {\n    key: \"_clearTimers\",\n    value: function _clearTimers() {\n      var e,\n          t = this,\n          o = t.config && t.config.realTimeConfig,\n          a = t.config.timers,\n          n = a && a.setTimeout,\n          i = a && a.setInterval;\n\n      for (e in o && (o.refreshIntervalFlag = !1), n) {\n        clearTimeout(n[e]);\n      }\n\n      for (e in i) {\n        clearInterval(i[e]);\n      }\n    }\n  }, {\n    key: \"setChartCursor\",\n    value: function setChartCursor() {\n      var e = this,\n          t = e.config.link,\n          o = e.getFromEnv('paper').canvas.style;\n      Raphael.svg ? o.cursor = t ? POINTER : 'default' : e.getFromEnv('paper').canvas.style.cursor = t ? HAND : 'default';\n    }\n  }, {\n    key: \"_createLayers\",\n    value: function _createLayers() {\n      var e,\n          t = this,\n          o = t.getFromEnv('animationManager');\n      e = t.getContainer('parentgroup') || t.addContainer('parentgroup', o.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'parentgroup'\n        },\n        component: t\n      })), t.getChildContainer('backgroundGroup') || t.addChildContainer('backgroundGroup', createGroup({\n        name: 'background'\n      }, e, t)), t.getChildContainer('axisBottomGroup') || t.addChildContainer('axisBottomGroup', createGroup({\n        name: 'axisbottom'\n      }, e, t)), t.getChildContainer('belowPlotGroup') || t.addChildContainer('belowPlotGroup', createGroup({\n        name: 'belowplot'\n      }, e, t)), t.getChildContainer('plotGroup') || t.addChildContainer('plotGroup', createGroup({\n        name: 'plots'\n      }, e, t)), t.getChildContainer('axisTopGroup') || t.addChildContainer('axisTopGroup', createGroup({\n        name: 'axistop'\n      }, e, t)), t.getChildContainer('sumLabelsLayer') || t.addChildContainer('sumLabelsLayer', createGroup({\n        name: 'sumlabels',\n        class: 'fusioncharts-datalabels'\n      }, e, t)), t.getChildContainer('datalabelsGroup') || t.addChildContainer('datalabelsGroup', createGroup({\n        name: 'datalabel'\n      }, e, t)), t.getChildContainer('abovePlotGroup') || t.addChildContainer('abovePlotGroup', createGroup({\n        name: 'aboveplot'\n      }, e, t)), t.getChildContainer('captionGroup') || t.addChildContainer('captionGroup', createGroup({\n        name: 'caption'\n      }, e, t)), t.getChildContainer('defaultGroup') || t.addChildContainer('defaultGroup', createGroup({\n        name: 'chartdefault'\n      }, e, t)), t.getChildContainer('defaultShadowGroup') || t.addChildContainer('defaultShadowGroup', createGroup({\n        name: 'chartdefault-shadow'\n      }, e, t)), t.getChildContainer('trackerGroup') || t.addChildContainer('trackerGroup', createGroup({\n        name: 'tracker'\n      }, e, t)), t.getChildContainer('toolbar-master') || t.addChildContainer('toolbar-master', createGroup({\n        name: 'toolbar-master'\n      }, e, t)), t.getChildContainer('logoGroup') || t.addChildContainer('logoGroup', o.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'logo'\n        },\n        component: t\n      }));\n    }\n  }, {\n    key: \"_setDataLabelStyle\",\n    value: function _setDataLabelStyle() {\n      var e = this,\n          t = e.config.dataLabelStyle,\n          o = {\n        fontFamily: t.fontFamily,\n        fontSize: t.fontSize,\n        fontWeight: t.fontWeight,\n        fontStyle: t.fontStyle\n      },\n          a = e.getChildContainer('datalabelsGroup');\n      a.css(o);\n    }\n  }, {\n    key: \"_manageCaptionPosition\",\n    value: function _manageCaptionPosition() {\n      var e,\n          t,\n          o,\n          a,\n          n = this,\n          i = n.config,\n          r = n.getChildren(),\n          l = r.caption && r.caption[0],\n          s = r.subCaption && r.subCaption[0],\n          g = l.config,\n          c = g.widgetValueHeight || 0,\n          d = s.config,\n          h = i.canvasWidth,\n          p = g.align,\n          m = g.text,\n          v = g.alignWithCanvas,\n          u = g.horizontalPadding,\n          b = i.width,\n          f = i.canvasLeft,\n          C = i.canvasRight,\n          w = i.marginRight,\n          E = i.marginLeft,\n          F = i.marginTop,\n          T = (mathRound(f) || 0) + pluckNumber(h, b) / 2,\n          M = g.height,\n          L = d.height,\n          _ = r.legend && r.legend[0] && r.legend[0].config || {},\n          S = _.height || 0,\n          y = _.legendPadding || 0,\n          k = i.legendposition,\n          x = n.getFromEnv('gLegend') || {},\n          P = 0,\n          A = !!(x.conf || {}).showLegend,\n          H = n.config.borderWidth,\n          B = r.actionBar,\n          R = 0;\n\n      _.isActive || (S = 0), A && n.config.gLegendEnabled && (P = x.getLogicalSpace().height);\n      e = p === POSITION_END ? v ? C - u : b - u : p === POSITION_START ? v ? f + u : u : v ? T : E + .5 * (b - E - w) || b / 2;\n      g.isOnTop ? t = (H || 0) + (F || 0) : (k.toLowerCase() === POSITION_RIGHT && (y = 0, S = 0, P = 0), B && (a = B[0].getLogicalSpace && B[0].getLogicalSpace() || {}, R = a.height, (R === UNDEF || R === 1 / 0 || 0 > R) && (R = 0)), t = n.config.height - n.config.marginBottom - M - (L || 0) - (H || 0) - (y || 0) - (S || 0) - P - c - R), t += g._offsetHeight || 0, l.setDimention({\n        x: e,\n        y: t\n      }), o = m ? t + M + 2 : t || F || 0, s.setDimention({\n        x: e,\n        y: o\n      });\n    }\n  }, {\n    key: \"_updateVisuals\",\n    value: function _updateVisuals() {\n      var e,\n          t = this,\n          o = t.getFromEnv('core-options'),\n          a = t.getFromEnv('paper'),\n          n = t.getFromEnv('animationManager'),\n          i = t.config,\n          r = t.getFromEnv('chartWidth'),\n          l = t.getFromEnv('chartHeight');\n      o && !o._SVGDefinitionURLUpdated && (/^\\s*absolute\\s*$/i.test(o.SVGDefinitionURL) && (Raphael._url = (Raphael._g && Raphael._g.win || window).location.href.replace(/#.*?$/, BLANKSTRING)), o._SVGDefinitionURLUpdated = !0), a ? (!hasSVG && (i._prevWidth || i._prevHeight) && a.setSize(i._prevWidth, i._prevHeight), e = {\n        width: r,\n        height: l\n      }, n.setAnimation({\n        el: a,\n        attr: e,\n        component: t\n      })) : (a = new Raphael(t.getFromEnv('chart-container'), r, l), a.setHTMLClassName('fusioncharts-div'), t.addToEnv('paper', a), a.setConfig('stroke-linecap', ROUND), t.setChartEvents()), i._prevWidth = r, i._prevHeight = l, t.setChartCursor(), t._createLayers(), t._setDataLabelStyle(), t._drawCreditLabel();\n    }\n  }, {\n    key: \"allocateDimensionOfChartMenuBar\",\n    value: function allocateDimensionOfChartMenuBar() {\n      var e = this,\n          t = e.config,\n          o = e.getFromEnv('toolbar'),\n          a = o.config,\n          n = a.hDirection,\n          i = a.vDirection,\n          r = o.getLogicalSpace(),\n          _o$getDimension = o.getDimension(),\n          l = _o$getDimension.y,\n          s = _o$getDimension.x;\n\n      't' === t.toolbarVAlign ? (l += t.toolbarVMargin * i + mathMin(0, r.height * i), s += t.toolbarHMargin * n - mathMax(0, r.width * n), s = 'l' === t.toolbarHAlign ? s + r.width : s - r.width) : (l = t.height - t.marginBottom - r.height, s = 'b' === t.toolbarVAlign && 'r' === t.toolbarHAlign ? t.width - t.marginRight - r.width : t.marginLeft), t.toolbarX !== void 0 && (s = t.toolbarX), t.toolbarY !== void 0 && (l = t.toolbarY), o.setDimension({\n        x: s,\n        y: l,\n        width: r.width,\n        height: r.height\n      }), o.manageSpace();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var e = this,\n          t = e.getFromEnv('chartInstance');\n      e.config.hasChartMessage ? (e._hide(), e.drawChartMessage(), e.fireChartInstanceEvent('nodatatodisplay', {}, [t.id]), t.jsVars.drawCount += 1, t.__state.dataReady = !1, t.jsVars.hasNativeMessage = !0) : (e._hideChartMessage(), e._clearTimers && e._clearTimers(), e.config.plotOverFlow = !1, e._show(), e._updateVisuals(), e.setState('initiated', !0), t.jsVars.drawCount += 1, t.jsVars.hasNativeMessage = !1);\n    }\n  }, {\n    key: \"manageSpace\",\n    value: function manageSpace() {\n      var e = this;\n      e.config.hasChartMessage || (e._preDraw(), e.addToolbar && e.addToolbar(), e._manageSpace(), e._postSpaceManagement && e._postSpaceManagement());\n    }\n  }, {\n    key: \"_show\",\n    value: function _show() {\n      this.getContainer('parentgroup') && this.getContainer('parentgroup').show();\n    }\n  }, {\n    key: \"_manageActionBarSpace\",\n    value: function _manageActionBarSpace() {\n      var e = this,\n          t = e.config,\n          o = e.getChildren('actionBar'),\n          a = o && o[0] && o[0].getLogicalSpace() || {},\n          n = a.height || 0;\n      return t.actionBarHeight = n, {\n        bottom: n\n      };\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      this.getContainer('parentgroup') && this.getContainer('parentgroup').hide();\n    }\n  }], [{\n    key: \"onContainerMouseMove\",\n    value: function onContainerMouseMove(t) {\n      var e,\n          o = t.data,\n          a = o.getFromEnv('chartInstance'),\n          n = t.originalEvent,\n          i = getMouseCoordinate(o.getFromEnv('chart-container'), n, o);\n      a.ref && (e = extend2({\n        height: a.args.height,\n        width: a.args.width,\n        pixelHeight: o.getFromEnv('chartWidth'),\n        pixelWidth: o.getFromEnv('chartHeight'),\n        id: a.args.id,\n        renderer: a.args.renderer,\n        container: a.options.containerElement\n      }, i), o.fireChartInstanceEvent('chartMouseMove', e));\n    }\n  }, {\n    key: \"onContainerRollOver\",\n    value: function onContainerRollOver(t) {\n      var e,\n          o = t.data,\n          a = o.getFromEnv('chartInstance'),\n          n = t.originalEvent,\n          i = getMouseCoordinate(o.getFromEnv('chart-container'), n, o);\n      a.ref && (e = extend2({\n        height: a.args.height,\n        width: a.args.width,\n        pixelHeight: o.getFromEnv('chartWidth'),\n        pixelWidth: o.getFromEnv('chartHeight'),\n        id: a.args.id,\n        renderer: a.args.renderer,\n        container: a.options.containerElement\n      }, i), o.fireChartInstanceEvent('chartRollOver', e));\n    }\n  }, {\n    key: \"onContainerRollOut\",\n    value: function onContainerRollOut(t) {\n      var e,\n          o = t.chart,\n          a = o.getFromEnv('chartInstance'),\n          n = t.event,\n          i = getMouseCoordinate(o.getFromEnv('chart-container'), n, o);\n      a.ref && (e = extend2({\n        height: a.args.height,\n        width: a.args.width,\n        pixelHeight: o.getFromEnv('chartWidth'),\n        pixelWidth: o.getFromEnv('chartHeight'),\n        id: a.args.id,\n        renderer: a.args.renderer,\n        container: a.options.containerElement\n      }, i), o.fireChartInstanceEvent('chartRollOut', e));\n    }\n  }, {\n    key: \"winMouseHover\",\n    value: function winMouseHover(t) {\n      var e = t.originalEvent,\n          o = e.target || e.originalTarget || e.srcElement || e.relatedTarget || e.fromElement,\n          a = t.data,\n          n = a.getFromEnv('paper'),\n          i = {\n        chart: a,\n        event: t.originalEvent\n      };\n      isVML ? !n.getById(o.parentNode.raphaelid) && (CommonAPI.onContainerRollOut(i), a.config.mouseStateIn = !1, domEvtHandler.unlisten(document, 'mouseover', CommonAPI.winMouseHover)) : !o.viewportElement && (a.config.mouseStateIn = !1, CommonAPI.onContainerRollOut(i), domEvtHandler.unlisten(window, 'mouseover', CommonAPI.winMouseHover));\n    }\n  }]);\n\n  return CommonAPI;\n}(BaseChart);\n\nexport default CommonAPI;\nexport { _drawDataset, _createToolBox2 as _createToolBox, configurer };","map":null,"metadata":{},"sourceType":"module"}