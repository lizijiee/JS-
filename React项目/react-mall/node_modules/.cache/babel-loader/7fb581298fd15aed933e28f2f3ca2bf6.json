{"ast":null,"code":"var _this = this;\n\nimport * as types from '../constants/actionTypes'; //注释在此文件中\n\nvar initState = {\n  memberData: {},\n  // 店内会员信息;\n  foodData: {} // 所有菜品数据;   \n\n  /* \r\n    state 初始值分别为简单类型和复合类型;\r\n      1.为复合类型:\r\n        需要对state进行深克隆下,以保证为纯函数(使用条件)\r\n      2.为简单类型:\r\n        真是项目可能小\r\n        见Github练习: https://github.com/lizijiee/JS-/tree/master/react-redux%E8%AE%A1%E6%95%B0%E5%99%A8  \r\n  */\n\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  state = JSON.parse(JSON.stringify(state)); //initState为复合类型需要深克隆一下;\n\n  switch (action.type) {\n    case \"SET_DATA_MEMBER\":\n      //请求数据后对redux进行赋值,可以写语句\n      // let {memberData}=action.data;\n      console.log(_this.state.memberData);\n      state.memberData = action.data;\n      break;\n\n    case \"GET_DATA_FOOD\":\n      state.foodData = action.data;\n      break;\n  }\n\n  return state;\n};\n\nexport { reducer };\n/* 测试 */\n\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\redux\\reducers\\index.js"],"names":["types","initState","memberData","foodData","reducer","state","action","JSON","parse","stringify","type","console","log","data"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB,C,CAAmD;;AAEnD,IAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAC,EADK;AACA;AAChBC,EAAAA,QAAQ,EAAC,EAFO,CAEA;;AAElB;;;;;;;;;AAJkB,CAAlB;;AAYA,IAAMC,OAAO,GAAE,SAATA,OAAS,GAA0B;AAAA,MAAzBC,KAAyB,uEAAnBJ,SAAmB;AAAA,MAATK,MAAS;AAClCD,EAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,KAAf,CAAX,CAAR,CADkC,CACQ;;AACzC,UAAOC,MAAM,CAACI,IAAd;AACK,SAAK,iBAAL;AAAuB;AACpB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACP,KAAL,CAAWH,UAAvB;AACAG,MAAAA,KAAK,CAACH,UAAN,GAAiBI,MAAM,CAACO,IAAxB;AAEH;;AACA,SAAK,eAAL;AACGR,MAAAA,KAAK,CAACF,QAAN,GAAeG,MAAM,CAACO,IAAtB;AACH;AATL;;AAWA,SAAOR,KAAP;AACH,CAdL;;AAeE,SAASD,OAAT;AACF;;AAEA","sourcesContent":["import * as types from '../constants/actionTypes'; //注释在此文件中\r\n\r\nconst initState = {\r\n  memberData:{},  // 店内会员信息;\r\n  foodData:{},    // 所有菜品数据;   \r\n}\r\n/* \r\n  state 初始值分别为简单类型和复合类型;\r\n    1.为复合类型:\r\n      需要对state进行深克隆下,以保证为纯函数(使用条件)\r\n    2.为简单类型:\r\n      真是项目可能小\r\n      见Github练习: https://github.com/lizijiee/JS-/tree/master/react-redux%E8%AE%A1%E6%95%B0%E5%99%A8  \r\n*/\r\nconst reducer= (state=initState,action)=>{ \r\n       state = JSON.parse(JSON.stringify(state));//initState为复合类型需要深克隆一下;\r\n        switch(action.type){\r\n             case \"SET_DATA_MEMBER\"://请求数据后对redux进行赋值,可以写语句\r\n                // let {memberData}=action.data;\r\n                console.log(this.state.memberData)\r\n                state.memberData=action.data;\r\n\r\n             break;\r\n             case \"GET_DATA_FOOD\":\r\n                state.foodData=action.data;\r\n             break;\r\n        }\r\n        return state;\r\n    }\r\n  export  {reducer}\r\n/* 测试 */\r\n\r\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */"]},"metadata":{},"sourceType":"module"}