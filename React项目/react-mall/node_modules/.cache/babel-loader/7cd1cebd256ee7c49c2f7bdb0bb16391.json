{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar RE = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i,\n    isNil = function isNil(a) {\n  return 'undefined' == typeof a || null === a;\n};\n\nvar FormatSpecifier =\n/*#__PURE__*/\nfunction () {\n  function FormatSpecifier(a) {\n    _classCallCheck(this, FormatSpecifier);\n\n    var b = RE.exec(a);\n    if (!b) throw new Error(\"Invalid number format specifier: \".concat(a));\n    this.fill = b[1] || ' ', this.align = b[2] || '>', this.sign = b[3] || '-', this.symbol = b[4] || '', this.zero = !!b[5], this.width = b[6] && +b[6], this.comma = !!b[7], this.precision = b[8] && +b[8].slice(1), this.trim = !!b[9], this.type = b[10] || '';\n  }\n\n  _createClass(FormatSpecifier, [{\n    key: \"toString\",\n    value: function toString() {\n      var a = Math.max;\n      return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (isNil(this.width) ? '' : a(1, 0 | this.width)) + (this.comma ? ',' : '') + (isNil(this.precision) ? '' : '.' + a(0, 0 | this.precision)) + (this.trim ? '~' : '') + this.type;\n    }\n  }]);\n\n  return FormatSpecifier;\n}();\n\nexport default FormatSpecifier;","map":null,"metadata":{},"sourceType":"module"}