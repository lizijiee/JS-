{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport CommonSpaceManager from './commonspacemanager';\nimport { chartPaletteStr, pluckNumber, pluck, pluckFontSize, extend2 } from '../../../../fc-core/src/lib';\nimport cartesianAxisFactory from '../../factories/cartesian-axis';\nimport canvasFactory from '../../factories/canvas-axis-ref-cartesian';\nimport virtualCanvasFactory from '../../factories/vcanvas';\nimport mousetrackerFactory from '../../factories/mouse-tracker';\nvar UNDEF,\n    mathMax = Math.max,\n    mathMin = Math.min;\n\nvar Cartesian =\n/*#__PURE__*/\nfunction (_CommonSpaceManager) {\n  _inherits(Cartesian, _CommonSpaceManager);\n\n  function Cartesian() {\n    var _this;\n\n    _classCallCheck(this, Cartesian);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Cartesian).call(this)), _this.registerFactory('axis', cartesianAxisFactory, ['canvas']), _this.registerFactory('canvas', canvasFactory), _this.registerFactory('vCanvas', virtualCanvasFactory, ['axis']), _this.registerFactory('mouseTracker', mousetrackerFactory, ['canvas']);\n    return _this;\n  }\n\n  _createClass(Cartesian, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'Cartesian';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'chartAPI';\n    }\n  }, {\n    key: \"_allocateXAxisLabelSpace\",\n    value: function _allocateXAxisLabelSpace(a) {\n      var b,\n          c = this,\n          d = c.config,\n          e = a.getAxisEndLabelDisplaySpace(),\n          f = e.left,\n          g = e.right,\n          h = e.top,\n          i = e.bottom,\n          j = d.availableWidth,\n          k = d.availableHeight,\n          l = d.canvasLeft,\n          m = d.canvasRight,\n          n = d.canvasTop,\n          o = d.canvasBottom,\n          p = d.width,\n          q = d.height,\n          r = function r(a, b) {\n        return a < b && 0 < b ? b - a : 0;\n      };\n\n      h + i > k && (b = h + i, h = k * h / b, i = k * i / b), f + g > j && (b = f + g, f = j * f / b, g = j * g / b), f = r(l, f), g = r(p - m, g), h = r(n, h), i = r(q - o, i), c._allocateSpace({\n        left: f,\n        right: g,\n        top: h,\n        bottom: i\n      });\n    }\n  }, {\n    key: \"_setCategories\",\n    value: function _setCategories() {\n      var a = this,\n          b = a.getFromEnv('dataSource'),\n          c = a.getChildren('xAxis'),\n          d = b.categories && b.categories.length && b.categories[0].category;\n      c && c[0].setTickValues(d);\n    }\n  }, {\n    key: \"_feedAxesRawData\",\n    value: function _feedAxesRawData() {\n      var a,\n          b,\n          c = this,\n          d = c.config,\n          e = c.getFromEnv('dataSource');\n      return a = c.getSpecificxAxisConf(), b = c.getSpecificyAxisConf(), a.vtrendlines = extend2([], e.vtrendlines), b.trendlines = extend2([], e.trendlines), d.isstacked && (b.isPercent = pluckNumber(d.stack100percent, 0)), {\n        yAxisConf: [b],\n        xAxisConf: [a]\n      };\n    }\n  }, {\n    key: \"getSpecificxAxisConf\",\n    value: function getSpecificxAxisConf() {\n      var a = this,\n          b = a.getFromEnv('chart-attrib'),\n          c = a.config,\n          d = a.config.is3D,\n          e = a.getBasexAxisConf();\n      return e.isReverse = c.reverseXAxis, e.axisLineColor = pluck(b.xaxislinecolor, b.axislinecolor, '#000000'), e.showAlternateGridColor = pluckNumber(b.showalternatevgridcolor, 0), e.numDivLines = pluckNumber(b.numvdivlines, c.numVDivLines), e.axisName = b.xaxisname, e.setAdaptiveMin = pluckNumber(b.setadaptivexmin, c.setadaptivexmin, c.setadaptivexmin), e.showLimits = pluckNumber(b.showvlimits, c.showvlimits), e.showDivLineValues = pluckNumber(b.showvdivlinevalues, b.showvdivlinevalues, c.showvdivlinevalues), e.zeroPlaneThickness = pluckNumber(b.vzeroplanethickness, b.vdivlinethickness, c.zeroplanethickness, 2), e.zeroPlaneAlpha = pluckNumber(b.vzeroplanealpha, b.vdivlinealpha, c.zeroplanealpha), e.showZeroPlaneValue = pluckNumber(b.showvzeroplanevalue, c.showzeroplanevalue), e.showAxisLine = d ? 0 : pluckNumber(b.showxaxisline, b.showaxislines, b.drawAxisLines, c.showxaxisline, 0), e.maxLabelHeight = b.maxlabelheight, e.showZeroPlane = pluckNumber(b.showvzeroplane, c.showzeroplane), e;\n    }\n  }, {\n    key: \"getSpecificyAxisConf\",\n    value: function getSpecificyAxisConf() {\n      var a = this,\n          b = a.getFromEnv('chart-attrib'),\n          c = a.config,\n          d = a.config.is3D,\n          e = d ? chartPaletteStr.chart3D : chartPaletteStr.chart2D,\n          f = c.isInverse,\n          g = a.getFromEnv('color-manager'),\n          h = pluckNumber(b.showzeroplane, c.showzeroplane, 1),\n          i = pluckNumber(b.showzeroplanevalue, c.showzeroplanevalue);\n      return h || i !== UNDEF || (i = 0), {\n        isVertical: !0,\n        isReverse: !f,\n        isOpposit: !1,\n        outCanfontFamily: pluck(b.outcnvbasefont, b.basefont, 'Verdana,sans'),\n        outCanfontSize: pluckFontSize(b.outcnvbasefontsize, b.basefontsize, 10),\n        outCancolor: pluck(b.outcnvbasefontcolor, b.basefontcolor, g.getColor(e.baseFontColor)).replace(/^#? ([a-f0-9]+)/ig, '#$1'),\n        axisBreaks: b.yaxisbreaks,\n        axisNamePadding: b.yaxisnamepadding,\n        axisValuePadding: b.yaxisvaluespadding,\n        axisNameFont: b.yaxisnamefont,\n        axisNameFontSize: b.yaxisnamefontsize,\n        axisNameFontColor: b.yaxisnamefontcolor,\n        axisNameFontBold: b.yaxisnamefontbold,\n        axisNameFontItalic: b.yaxisnamefontitalic,\n        axisNameBgColor: b.yaxisnamebgcolor,\n        axisNameBorderColor: b.yaxisnamebordercolor,\n        axisNameAlpha: b.yaxisnamealpha,\n        axisNameFontAlpha: b.yaxisnamefontalpha,\n        axisNameBgAlpha: b.yaxisnamebgalpha,\n        axisNameBorderAlpha: b.yaxisnameborderalpha,\n        axisNameBorderPadding: b.yaxisnameborderpadding,\n        axisNameBorderRadius: b.yaxisnameborderradius,\n        axisNameBorderThickness: b.yaxisnameborderthickness,\n        axisNameBorderDashed: b.yaxisnameborderdashed,\n        axisNameBorderDashLen: b.yaxisnameborderdashlen,\n        axisNameBorderDashGap: b.yaxisnameborderdashgap,\n        axisNameWidth: b.yaxisnamewidth,\n        useEllipsesWhenOverflow: b.useellipseswhenoverflow,\n        rotateAxisName: pluckNumber(b.rotateyaxisname, 1),\n        axisName: b.yaxisname,\n        divLineColor: pluck(b.divlinecolor, g.getColor(e.divLineColor)),\n        divLineAlpha: pluck(b.divlinealpha, d ? g.getColor('divLineAlpha3D') : g.getColor('divLineAlpha')),\n        divLineThickness: pluckNumber(b.divlinethickness, 1),\n        divLineIsDashed: !!pluckNumber(b.divlinedashed, b.divlineisdashed, 0),\n        divLineDashLen: pluckNumber(b.divlinedashlen, 4),\n        divLineDashGap: pluckNumber(b.divlinedashgap, 2),\n        showAlternateGridColor: pluckNumber(b.showalternatehgridcolor, 1),\n        alternateGridColor: pluck(b.alternatehgridcolor, g.getColor('altHGridColor')),\n        alternateGridAlpha: pluck(b.alternatehgridalpha, g.getColor('altHGridAlpha')),\n        numDivLines: pluckNumber(b.numdivlines, c.numDivLines),\n        axisMinValue: c.yRangeMin || b.yaxisminvalue,\n        axisMaxValue: c.yRangeMax || b.yaxismaxvalue,\n        setAdaptiveMin: pluckNumber(b.setadaptivesymin, b.setadaptiveymin, c.setAdaptiveMin),\n        adjustDiv: b.adjustdiv,\n        labelStep: b.yaxisvaluesstep,\n        showAxisValues: pluckNumber(b.showyaxisvalues, b.showyaxisvalue, c.showyaxisvalues),\n        showLimits: pluckNumber(b.showyaxislimits, b.showlimits, a.showLimits),\n        showDivLineValues: pluckNumber(b.showdivlinevalues, b.showdivlinevalue, c.showdivlinevalues),\n        showZeroPlane: h,\n        zeroPlaneColor: b.zeroplanecolor,\n        zeroPlaneThickness: pluckNumber(b.zeroplanethickness, b.divlinethickness, c.zeroplanethickness, 2),\n        zeroPlaneAlpha: pluckNumber(b.zeroplanealpha, b.divlinealpha, c.zeroplanealpha),\n        showZeroPlaneValue: i,\n        showZeroPlaneOnTop: c.showzeroplaneontop,\n        trendlineColor: b.trendlinecolor,\n        trendlineToolText: b.trendlinetooltext,\n        trendlineThickness: b.trendlinethickness,\n        trendlineAlpha: b.trendlinealpha,\n        showTrendlinesOnTop: b.showtrendlinesontop,\n        showAxisLine: d ? 0 : pluckNumber(b.showyaxisline, b.showaxislines, b.drawAxisLines, c.showyaxisline, 0),\n        axisLineThickness: pluckNumber(b.yaxislinethickness, b.axislinethickness, 1),\n        axisLineAlpha: pluckNumber(b.yaxislinealpha, b.axislinealpha, 100),\n        axisLineColor: pluck(b.yaxislinecolor, b.axislinecolor, '#000000'),\n        forceTrendBelow: !!c.is3D\n      };\n    }\n  }, {\n    key: \"getBasexAxisConf\",\n    value: function getBasexAxisConf() {\n      var a = this,\n          b = a.getFromEnv('chart-attrib'),\n          c = a.config.is3D,\n          d = c ? chartPaletteStr.chart3D : chartPaletteStr.chart2D,\n          e = a.getFromEnv('color-manager');\n      return {\n        isVertical: !1,\n        isOpposit: !1,\n        outCanfontFamily: pluck(b.outcnvbasefont, b.basefont, 'Verdana,sans'),\n        outCanfontSize: pluckFontSize(b.outcnvbasefontsize, b.basefontsize, 10),\n        outCancolor: pluck(b.outcnvbasefontcolor, b.basefontcolor, e.getColor(d.baseFontColor)).replace(/^#? ([a-f0-9]+)/ig, '#$1'),\n        axisNamePadding: b.xaxisnamepadding,\n        axisValuePadding: b.labelpadding,\n        axisNameFont: b.xaxisnamefont,\n        axisNameFontSize: b.xaxisnamefontsize,\n        axisNameFontColor: b.xaxisnamefontcolor,\n        axisNameFontBold: b.xaxisnamefontbold,\n        axisNameFontItalic: b.xaxisnamefontitalic,\n        axisNameBgColor: b.xaxisnamebgcolor,\n        axisNameBorderColor: b.xaxisnamebordercolor,\n        axisNameAlpha: b.xaxisnamealpha,\n        axisNameFontAlpha: b.xaxisnamefontalpha,\n        axisNameBgAlpha: b.xaxisnamebgalpha,\n        axisNameBorderAlpha: b.xaxisnameborderalpha,\n        axisNameBorderPadding: b.xaxisnameborderpadding,\n        axisNameBorderRadius: b.xaxisnameborderradius,\n        axisNameBorderThickness: b.xaxisnameborderthickness,\n        axisNameBorderDashed: b.xaxisnameborderdashed,\n        axisNameBorderDashLen: b.xaxisnameborderdashlen,\n        axisNameBorderDashGap: b.xaxisnameborderdashgap,\n        useEllipsesWhenOverflow: b.useellipseswhenoverflow,\n        divLineColor: pluck(b.vdivlinecolor, b.divlinecolor, e.getColor(d.divLineColor)),\n        divLineAlpha: pluck(b.vdivlinealpha, b.divlinealpha, c ? e.getColor('divLineAlpha3D') : e.getColor('divLineAlpha')),\n        divLineThickness: pluckNumber(b.vdivlinethickness, b.divlinethickness, 1),\n        divLineIsDashed: !!pluckNumber(b.vdivlinedashed, b.vdivlineisdashed, b.divlinedashed, b.divlineisdashed, 0),\n        divLineDashLen: pluckNumber(b.vdivlinedashlen, b.divlinedashlen, 4),\n        divLineDashGap: pluckNumber(b.vdivlinedashgap, b.divlinedashgap, 2),\n        alternateGridColor: pluck(b.alternatevgridcolor, e.getColor('altVGridColor')),\n        alternateGridAlpha: pluck(b.alternatevgridalpha, e.getColor('altVGridAlpha')),\n        labelFont: b.labelfont,\n        labelFontSize: b.labelfontsize,\n        labelFontColor: b.labelfontcolor,\n        labelFontAlpha: b.labelalpha,\n        labelFontBold: b.labelfontbold,\n        labelFontItalic: b.labelfontitalic,\n        axisMinValue: b.xaxisminvalue,\n        axisMaxValue: b.xaxismaxvalue,\n        adjustDiv: b.adjustvdiv,\n        labelDisplay: b.labeldisplay,\n        showLabels: b.showlabels,\n        rotateLabels: b.rotatelabels,\n        slantLabel: pluckNumber(b.slantlabels, b.slantlabel),\n        labelStep: pluckNumber(b.labelstep, b.xaxisvaluesstep),\n        showAxisValues: pluckNumber(b.showxaxisvalues, b.showxaxisvalue),\n        zeroPlaneColor: b.vzeroplanecolor,\n        trendlineColor: b.trendlinecolor,\n        trendlineToolText: b.trendlinetooltext,\n        trendlineThickness: b.trendlinethickness,\n        trendlineAlpha: b.trendlinealpha,\n        showTrendlinesOnTop: b.showtrendlinesontop,\n        axisLineThickness: pluckNumber(b.xaxislinethickness, b.axislinethickness, 1),\n        axisLineAlpha: pluckNumber(b.xaxislinealpha, b.axislinealpha, 100)\n      };\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig(a) {\n      return a ? this.config[a] : this.config;\n    }\n  }, {\n    key: \"_getSumValueSpace\",\n    value: function _getSumValueSpace(a) {\n      var b,\n          c = Math.max,\n          d = this,\n          e = {},\n          f = d.isBar,\n          g = d.getFromEnv('dataSource').chart,\n          h = 0 === d.showsum ? 0 : pluckNumber(g.showsum, d.showsum, 0),\n          j = pluckNumber(d.config.stack100percent),\n          k = d.config.isstacked,\n          l = 0,\n          m = [],\n          n = 0;\n\n      if (d.iterateComponents(function (a) {\n        ('cartesianStackGroup' === a.getName() || 'marimekkoStackgroup' === a.getName()) && m.push(a);\n      }), h && j && k && m.length) {\n        for (b = m.length - 1; 0 <= b; b--) {\n          e = m[b].getMaxSumValueSpace(), f ? l = c(l, e.maxWidth) : n = c(n, e.maxHeight);\n        }\n\n        n > a && (n = a), l > a && (l = a);\n      }\n\n      return {\n        top: n,\n        right: l\n      };\n    }\n  }, {\n    key: \"setAxisDimention\",\n    value: function setAxisDimention() {\n      var a = Math.max;\n      var b = this,\n          c = b.getChildren('xAxis') && b.getChildren('xAxis')[0],\n          d = b.getChildren('yAxis') && b.getChildren('yAxis')[0],\n          e = b.getFromEnv('chartConfig'),\n          f = e.xDepth,\n          g = b.getChildren('canvas') && b.getChildren('canvas')[0].config,\n          h = g && g.canvasBorderWidth,\n          i = c && c.getChildren('scrollBar') && c.getChildren('scrollBar')[0],\n          j = i && !i.getState('removed'),\n          k = (j || e.is3D) && e.shift,\n          l = g && g.canvasPadding,\n          m = g.canvasLeft,\n          n = g && g.canvasPaddingLeft,\n          o = g && g.canvasPaddingRight,\n          p = g.canvasTop,\n          q = g && g.canvasPaddingTop;\n      c && c.setAxisConfig({\n        canvasPaddingLeft: a(n, l),\n        canvasPaddingRight: a(o, l)\n      }), c && c.setAxisDimention({\n        x: m + (f || 0) + a(n, l),\n        y: e.canvasBottom + (k || 0) + h,\n        opposite: p - h,\n        axisLength: g.canvasWidth - (f || 0) - a(n, l) - a(o, l)\n      }), d && d.setAxisDimention({\n        x: m - h,\n        y: p + q,\n        opposite: e.canvasRight + h,\n        axisLength: e.canvasHeight - q - g.canvasPaddingBottom\n      });\n    }\n  }, {\n    key: \"_getTrendLineMinMax\",\n    value: function _getTrendLineMinMax(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h = this,\n          j = 'v' === a ? h.getFromEnv('dataSource').vtrendlines : h.getFromEnv('dataSource').trendlines,\n          k = {\n        max: -Infinity,\n        min: 1 / 0\n      };\n      if (b = b || 'p', j) for (d = 0, f = j.length; d < f; d += 1) {\n        for (e = 0, g = j[d].line ? j[d].line.length : 0; e < g; e += 1) {\n          (c = j[d].line[e], ('s' !== b || 's' === c.parentyaxis) && ('s' === b || 's' !== c.parentyaxis)) && (k.max = mathMax(c.startvalue || -Infinity, c.endvalue || -Infinity, k.max), k.min = mathMin(c.startvalue || 1 / 0, c.endvalue || 1 / 0, k.min));\n        }\n      }\n      return k;\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return 'Cartesian';\n    }\n  }]);\n\n  return Cartesian;\n}(CommonSpaceManager);\n\nexport default Cartesian;","map":null,"metadata":{},"sourceType":"module"}