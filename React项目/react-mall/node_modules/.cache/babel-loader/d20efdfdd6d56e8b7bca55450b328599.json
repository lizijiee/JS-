{"ast":null,"code":"import filterAPI from './data-skipping-filters';\nimport { filterType } from './data-skipping-charts';\nimport { pluckNumber } from '../../../fc-core/src/lib';\nvar ALLOWED_RATIO_FOR_SKIPPING = 1.5;\nvar hashMapping = [],\n    prevDataLen = 0,\n    skipConf = {},\n    dragHashMap = [];\n\nfunction elemHideDecider() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return a.filter(function (a) {\n    return !hashMapping[a];\n  });\n}\n\nfunction getBeforeSkippingDrawMap() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return Array.from(Array(a), function (a, b) {\n    return b;\n  });\n}\n\nfunction decideSkip() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var b,\n      c,\n      d,\n      e,\n      f,\n      g = a.component,\n      h = a.compType,\n      i = g.getFromEnv('chartConfig'),\n      j = g.getFromEnv('dataSource'),\n      k = j.chart || {},\n      l = pluckNumber(k.plotbinsize, i.plotbinsize),\n      m = pluckNumber(k.labelbinsize, i.labelbinsize),\n      n = g.getFromEnv('chartWidth'),\n      o = g.getFromEnv('chartHeight');\n  return skipConf.plotBinSize = l, skipConf.labelBinSize = m, skipConf.jsonData = g.config.JSONData, 'group' === h ? (b = skipConf.jsonData[0].data, prevDataLen = g.config.stackValues && g.config.stackValues.length || 0) : 'dataset' === h && (b = skipConf.jsonData.data, prevDataLen = g.components.data && g.components.data.length || 0), c = b && b.length, hashMapping = [], skipConf.width = f = g.getFromEnv('chart').isBar ? a.height || o : a.width || n, d = c / f, e = Math.floor(d * l), !!(d >= ALLOWED_RATIO_FOR_SKIPPING && 1 < e) && (skipConf.plotsPerBin = e, skipConf.noOfPlotBins = Math.ceil(c / skipConf.plotsPerBin), !0);\n}\n\nfunction plotDrawIndices(a, b) {\n  var c = 0,\n      d = 0,\n      e = [];\n\n  for (var f = 1; f < skipConf.noOfPlotBins; ++f) {\n    c = d, d += skipConf.plotsPerBin, a(c, d - 1, b, dragHashMap, e);\n  }\n\n  return a(d, b.length - 1, b, dragHashMap, e), dragHashMap = [], e;\n}\n\nfunction labelDrawIndices(a) {\n  var b,\n      c = skipConf.plotBinSize,\n      d = skipConf.labelBinSize,\n      e = [],\n      f = [],\n      g = a.length;\n\n  for (b = 0; b < g; b++) {\n    b % (d / c) || (e.push(a[b]), f[a[b]] = !0);\n  }\n\n  return {\n    drawableLabelIndices: e,\n    labelHashMap: f\n  };\n}\n\nfunction skippingTool(a) {\n  var b,\n      c,\n      d,\n      e,\n      f,\n      g,\n      h = a.datasetType,\n      k = filterType[h],\n      l = a.component,\n      m = l.getSkippingInfo && l.getSkippingInfo(),\n      n = m && m.draw.slice(0),\n      o = m && (m.labelDraw || []).slice(0),\n      p = {},\n      q = [],\n      r = l.getFromEnv('xAxis').getTicksLen();\n\n  if (n && n.length || (n = getBeforeSkippingDrawMap(prevDataLen)), o && o.length || (o = n), dragHashMap = m && m.dragHashMap, 'cartesianStackGroup' === l.getName()) {\n    for (e = skipConf.jsonData.length, b = 0; b < r; ++b) {\n      for (d = 0, c = 0; c < e; ++c) {\n        g = skipConf.jsonData[c].data, d += +(g[b] ? g[b].value : 0);\n      }\n\n      q.push({\n        value: d\n      });\n    }\n\n    p.draw = plotDrawIndices(filterAPI(k), q);\n  } else p.draw = plotDrawIndices(filterAPI(k), skipConf.jsonData.data);\n\n  return p.draw.forEach(function (a) {\n    hashMapping[a] = !0;\n  }), p.drawOnlyMap = hashMapping, p.hide = elemHideDecider(n), f = labelDrawIndices(p.draw), p.labelDraw = f.drawableLabelIndices, hashMapping = p.labelDrawOnlyMap = f.labelHashMap, p.hideLabel = elemHideDecider(o), p.plotsPerBin = skipConf.plotsPerBin, p.skippingApplied = !0, p.dragHashMap = [], p.prevDrawInfo = n.slice(0), p;\n}\n\nfunction updateDragMap() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var b = a.component,\n      c = a.eventArgs,\n      d = b.getSkippingInfo && b.getSkippingInfo() || {};\n  c && (d.dragHashMap[c.dataIndex] = c.endValue);\n}\n\nfunction dataSkipping() {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var b = a.component;\n  decideSkip(a) ? b.setSkippingInfo && b.setSkippingInfo(skippingTool(a)) : b.setSkippingInfo && b.setSkippingInfo();\n}\n\nexport default {\n  dataSkipping: dataSkipping,\n  updateDragMap: updateDragMap\n};","map":null,"metadata":{},"sourceType":"module"}