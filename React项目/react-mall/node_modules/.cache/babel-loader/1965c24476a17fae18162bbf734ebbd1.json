{"ast":null,"code":"import LinkInformation, { store } from './link-information';\nimport { raiseError, raiseWarning, triggerEvent } from '../../../fc-core/src/event-api';\nimport { extend2, domInsertModes, POINTER, HASHSTRING, PXSTRING, NORMAL, regex, BOLD } from '../../../fc-core/src/lib';\nimport domEvtHandler from '../../../fc-core/src/dom-event';\nvar DROP_HASH_RE = regex.dropHash;\n\nfunction checkObjectRenderLocationOverride(a, b) {\n  return (a.options.containerElement === b.options.containerElement || a.options.containerElementId === b.options.containerElementId) && a.options.insertMode === domInsertModes.REPLACE;\n}\n\nfunction linkInitialize(a) {\n  var b;\n  !(a.sender.link instanceof LinkInformation) || a.sender.link.root.disposed ? a.sender.link = new LinkInformation(a.sender) : a.sender.link.parent instanceof this && (b = a.sender.link.parent.link.items, !b[a.sender.id] && (b[a.sender.id] = a.sender));\n}\n\nfunction addlinkedCharts(a) {\n  a.prototype.configureLink = function (a, b) {\n    var c;\n\n    if (a instanceof Array) {\n      for (c = 0; c < a.length; c += 1) {\n        'object' != typeof store[this.link.root.id][c] && (store[this.link.root.id][c] = {}), extend2(store[this.link.root.id][c], a[c], !1, !0);\n      }\n\n      store[this.link.root.id].splice(a.length);\n    } else 'object' == typeof a ? ('number' != typeof b && (b = this.link.level), 'undefined' == typeof store[this.link.root.id][b] && (store[this.link.root.id][b] = {}), extend2(store[this.link.root.id][b], a, !1, !0)) : raiseError(this, '25081731', 'param', '~configureLink()', 'Unable to update link configuration from set parameters');\n  }, a.prototype.drawOverlayButton = function (a) {\n    var b,\n        c,\n        d,\n        e = this.jsVars,\n        f = e.overlayButton;\n\n    if (a && a.show) {\n      for (f || (f = e.overlayButton = document.createElement('span'), domEvtHandler.listen(f, 'click', function () {\n        triggerEvent('OverlayButtonClick', e.fcObj, a);\n      })), d = a.message ? a.message : 'Back'; f.firstChild;) {\n        f.removeChild(f.firstChild);\n      }\n\n      for (c in f.appendChild(document.createTextNode(d)), e.overlayButtonMessage = d, b = {\n        border: '1px solid ' + (a.borderColor ? a.borderColor.replace(DROP_HASH_RE, HASHSTRING) : '#7f8975'),\n        backgroundColor: a.bgColor ? a.bgColor.replace(DROP_HASH_RE, HASHSTRING) : '#edefec',\n        fontFamily: a.font ? a.font : 'Verdana,sans',\n        color: '#' + a.fontColor ? a.fontColor : '49563a',\n        fontSize: (a.fontSize ? a.fontSize : '10') + PXSTRING,\n        padding: (a.padding ? a.padding : '3') + PXSTRING,\n        fontWeight: 0 === parseInt(a.bold, 10) ? NORMAL : BOLD,\n        position: 'absolute',\n        top: '0',\n        right: '0',\n        cursor: POINTER\n      }, b) {\n        f.style[c] = b[c];\n      }\n\n      e.hcObj.container.appendChild(f), e.overlayButtonActive = !0;\n    } else f && (e.overlayButton = f.parentNode.removeChild(f), e.overlayButtonActive = !1, delete e.overlayButtonMessage);\n  }, a.addEventListener('beforeRender', linkInitialize), a.addEventListener('beforeInitialize', linkInitialize), a.addEventListener('linkedChartInvoked', function (b, c) {\n    var d,\n        e = b.sender,\n        f = e.clone({\n      dataSource: c.data,\n      dataFormat: c.linkType,\n      link: new LinkInformation(e.link.root, e, e instanceof a),\n      clickedEntity: c.clickedEntity,\n      clickedEntityBox: c.clickedEntityBox\n    }, !0),\n        g = c.alias;\n    g && (!f.typeSource && f.swfUrl && (f.typeSource = f.swfUrl.replace(/(.*?)?[^\\/]*\\.swf.*?/ig, '$1')), f.type = g), e.args && 0 !== parseInt(e.args.animate, 10) && delete f.animate, extend2(f, e.link.configuration(), !1, !0), triggerEvent('beforeLinkedItemOpen', e.link.root, {\n      level: e.link.level\n    }, void 0, function () {\n      a.items[f.id] instanceof a && a.items[f.id].dispose(), d = new a(f), checkObjectRenderLocationOverride(d, e) || e.options.overlayButton && e.options.overlayButton.message || ('object' != typeof e.options.overlayButton && (e.options.overlayButton = {}), e.options.overlayButton.message = 'Close'), d.render(), triggerEvent('linkedItemOpened', e.link.root, {\n        level: e.link.level,\n        item: d\n      });\n    });\n  }), a.addEventListener('overlayButtonClick', function (b, c) {\n    var d, e, f, g;\n    'LinkManager' !== c.id || (d = b.sender, e = d.link.level - 1, f = d.link.parent, g = d.link.root, triggerEvent('beforeLinkedItemClose', g, {\n      level: e,\n      item: d\n    }, void 0, function () {\n      setTimeout(function () {\n        a.items[d.id] && d.dispose(), triggerEvent('linkedItemClosed', g, {\n          level: e\n        });\n      }, 0), f.disposed || f.isActive() || !checkObjectRenderLocationOverride(d, f) ? (f._addChartDependency('returnFromLinkedChart', {\n        resolve: function resolve() {\n          return {\n            state: 3\n          };\n        }\n      }), f._setState()) : f.render();\n    }));\n  }), a.addEventListener('DrawComplete', function (b) {\n    var c,\n        d = b.sender;\n    return d && 'undefined' != typeof d.link ? d.link.root !== d && d.link.parent instanceof a ? d.ref && 'function' == typeof d.drawOverlayButton ? void (c = extend2({\n      show: !0,\n      id: 'LinkManager'\n    }, d.link.parent.options.overlayButton, !1, !0), extend2(c, d.link.parent.link.configuration().overlayButton || {}, !1, !0), d.drawOverlayButton(c)) : void raiseWarning(d, '04091602', 'run', '::LinkManager^Loaded', 'Unable to draw overlay button on object. -' + d.id) : void 0 : void 0;\n  }), a.addEventListener('beforeDispose', function (b) {\n    var c = b.sender;\n    c && c.link instanceof LinkInformation && (c && c.link && c.link.parent instanceof a && c.link.parent.link && c.link.parent.link.items && delete c.link.parent.link.items[b.sender.id], delete store[c.id]);\n  });\n}\n\nexport default {\n  type: 'extension',\n  name: 'LinkedChart',\n  extension: addlinkedCharts,\n  requiresFusionCharts: !0\n};","map":null,"metadata":{},"sourceType":"module"}