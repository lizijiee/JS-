{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { pluck, pluckNumber, getColumnColor, getPointColor, getFirstAlpha, toRaphaelColor, extend2 } from '../../../fc-core/src/lib';\nimport pointColor from '../../../fc-core/src/print-color';\nimport { priorityList } from '../../../fc-core/src/schedular';\n\nvar UNDEF,\n    hm,\n    hexcode = /^#?[0-9a-f]{6}/i,\n    BLANKSTRING = '',\n    COLOR_BLACK = '000000',\n    whiteHex = /FFFFFF/i,\n    whiteRgb = /255,255,255/,\n    rgbaToHex = function rgbaToHex(a) {\n  return a = a.replace('rgba(', '').split(','), '#' + (COLOR_BLACK + (a[0] << 16 | a[1] << 8 | a[2]).toString(16)).slice(-6);\n},\n    reduceAlpha = function reduceAlpha(a, b) {\n  var c,\n      d,\n      e = [];\n  if ('number' == typeof a) return b;\n\n  for (d = a.split && a.split(','), c = 0; c < d.length; c++) {\n    e.push(b);\n  }\n\n  return e.join();\n},\n    getAlpha = function getAlpha(a) {\n  var b;\n  return /rgb/.test(a) ? (b = a.match(/[\\d\\.]+\\)/g), parseFloat(b && b[0])) : a.FCcolor ? getFirstAlpha(a.FCcolor.alpha) : void 0;\n},\n    removeHighlightStateCosmetics = function removeHighlightStateCosmetics(a) {\n  a.forEach(function (a) {\n    a.removeStateCosmetics('highlight');\n  });\n},\n    setDataLabelAttrs = function setDataLabelAttrs(a, b, c, d, e) {\n  var f, g, h, i, j, k, l, m, n, o;\n  f = rgbaToHex(d.color), h = 100 * getAlpha(d.color), g = e ? pluck(c.valuefontcolor, f) : f, i = e ? pluck(c.valuefontalpha, c.alpha, h) : h, f = d.backgroundColor === BLANKSTRING ? BLANKSTRING : rgbaToHex(d.backgroundColor), h = d.backgroundColor === BLANKSTRING ? 0 : 100 * getAlpha(d.backgroundColor), isNaN(h) && (h = 0), k = e ? pluck(c.valuebgcolor, f) : f, j = e ? pluck(c.valuebgalpha, c.alpha, h) : h, n = toRaphaelColor({\n    color: k,\n    alpha: j\n  }), f = d.borderColor === BLANKSTRING ? BLANKSTRING : rgbaToHex(d.borderColor), h = d.borderColor === BLANKSTRING ? BLANKSTRING : 100 * getAlpha(d.borderColor), isNaN(h) && (h = 0), l = e ? pluck(c.valuebordercolor, f) : f, m = e ? pluck(c.valueborderalpha, c.alpha, h) : h, o = toRaphaelColor({\n    color: l,\n    alpha: m\n  }), b && a.setAnimation({\n    el: b,\n    label: 'highlightedDataLabel',\n    attr: {\n      fill: toRaphaelColor({\n        color: g,\n        alpha: i\n      }),\n      \"text-bound\": [n, o, d.borderThickness, d.borderPadding, d.borderRadius, d.borderDash]\n    }\n  });\n},\n    parseConfStr = function parseConfStr(a) {\n  var b,\n      c,\n      d,\n      e,\n      f,\n      g = a.split(','),\n      h = {};\n\n  for (b = 0, c = g.length; b < c; b++) {\n    d = g[b].split('='), e = d[0], f = d[1], h[e] = f;\n  }\n\n  return h;\n},\n    getColor = function getColor(a, b) {\n  var c,\n      d,\n      e = {};\n\n  for (c in a) {\n    'alpha' === c ? e[c] = b.alpha ? reduceAlpha(a[c], b.alpha) : a[c] : 'color' === c ? (-1 !== a[c].indexOf(',') && b.color && (d = b.color + ',' + a[c].substring(a[c].indexOf(',') + 1)), e[c] = pluck(d || b.color, a[c])) : e[c] = a[c];\n  }\n\n  return e;\n},\n    parseColor = function parseColor(a, b, c) {\n  var d,\n      e,\n      f = b.color;\n  return /rgb/.test(a) ? (d = pluck(b.alpha, 100 * getAlpha(a)), /rgb/.test(f) && (f = rgbaToHex(f)), e = c ? toRaphaelColor({\n    color: pluck(f, rgbaToHex(a)),\n    alpha: d\n  }) : a) : a.FCcolor ? e = c ? toRaphaelColor(getColor(a.FCcolor, b)) : toRaphaelColor(a.FCcolor) : hexcode.test(a.color || a) && (e = c ? toRaphaelColor({\n    color: pluck(b.color, a.color, a),\n    alpha: pluck(b.alpha, a.alpha)\n  }) : toRaphaelColor({\n    color: a.color || a,\n    alpha: a.alpha\n  })), e;\n},\n    setBoxAndWhiskerAttrs = function setBoxAndWhiskerAttrs(a, b, c, d, e, f) {\n  var g,\n      h,\n      i,\n      j,\n      k,\n      l,\n      m,\n      n,\n      o = {},\n      p = {};\n  e ? (g = getColumnColor(d.color || c.upperColorArr[0].FCcolor.color, d.alpha.toString(), c.upperColorArr[0].FCcolor.ratio, c.upperColorArr[0].FCcolor.angle, f, d.bordercolor || rgbaToHex(c.upperBoxBorder.color), d.borderalpha && d.borderalpha.toString() || (100 * getAlpha(c.lowerBoxBorder.color)).toString()), p = toRaphaelColor(g[0]), h = getColumnColor(d.color || c.lowerColorArr[0].FCcolor.color, d.alpha.toString(), c.lowerColorArr[0].FCcolor.ratio, c.lowerColorArr[0].FCcolor.angle, f, d.bordercolor || rgbaToHex(c.lowerBoxBorder.color), d.borderalpha && d.borderalpha.toString() || (100 * getAlpha(c.lowerBoxBorder.color)).toString()), o = toRaphaelColor(h[0]), i = parseColor(c.median.color, d, e), l = parseColor(c.lowerQuartile.color, d, e), m = parseColor(c.upperQuartile.color, d, e)) : (p = toRaphaelColor(c.upperColorArr[0]), o = toRaphaelColor(c.lowerColorArr[0]), i = c.median.color, j = c.upperBoxBorder.color, k = c.lowerBoxBorder.color, m = c.upperQuartile.color, l = c.lowerQuartile.color), n = b.upperBoxElem, a.setAnimation({\n    el: n,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      fill: p,\n      \"drop-shadow\": n.attrs['drop-shadow'] && 'none' !== n.attrs['drop-shadow'] ? [1, 1, 3, 'rgba(64,64,64,' + getAlpha(p) + ')', n.attrs[4], n.attrs['drop-shadow'][5]] : 'none'\n    }\n  }), n = b.lowerBoxElem, a.setAnimation({\n    el: n,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      fill: o,\n      \"drop-shadow\": n.attrs['drop-shadow'] && 'none' !== n.attrs['drop-shadow'] ? [1, 1, 3, 'rgba(64,64,64,' + getAlpha(o) + ')', n.attrs[4], n.attrs['drop-shadow'][5]] : 'none'\n    }\n  }), n = b.lowerBoxBorderEle, a.setAnimation({\n    el: n,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      stroke: k\n    }\n  }), b.upperBoxBorderEle && a.setAnimation({\n    el: b.upperBoxBorderEle,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      stroke: j\n    }\n  }), b.lowerQuartileEle && a.setAnimation({\n    el: b.lowerQuartileEle,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      stroke: l\n    }\n  }), b.upperQuartileEl && a.setAnimation({\n    el: b.upperQuartileEl,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      stroke: m\n    }\n  }), b.midLineElem && a.setAnimation({\n    el: b.midLineElem,\n    label: 'highlightedBoxAnsWhiskerPlot',\n    attr: {\n      stroke: i\n    }\n  });\n},\n    setDataObjectAttrs = function setDataObjectAttrs(a, b, c) {\n  var d,\n      e,\n      f,\n      g,\n      h,\n      i,\n      k,\n      l,\n      m,\n      n,\n      o = a.getFromEnv('chart'),\n      p = a.getFromEnv('animationManager'),\n      q = o.config,\n      r = o.config.dataLabelStyle,\n      s = a.components.data;\n\n  for (d = 0, e = s.length; d < e; d++) {\n    if (k = s[d], !!k) for (i in f = k.graphics, q = k.config, g = q.anchorProps, n = g.enabled, h = {\n      fillColor: {\n        FCcolor: {\n          alpha: c && n ? pluck(b.anchorbgalpha, b.alpha, g.bgAlpha) : g.bgAlpha,\n          color: c && n ? pluck(b.anchorbgcolor, b.color, g.bgColor) : g.bgColor\n        }\n      },\n      borderColor: {\n        FCcolor: {\n          alpha: c && n ? pluck(b.borderalpha, b.alpha, g.borderAlpha) : g.borderAlpha,\n          color: c && n ? pluck(b.anchorbordercolor, b.color, g.borderColor) : g.borderColor\n        }\n      },\n      imageAlpha: c ? b.alpha : g.imageAlpha,\n      imageScale: g.imageScale\n    }, f) {\n      l = !i.match(/error/ig) && f[i], m = l && l.type, 'path' === m ? p.setAnimation({\n        el: l,\n        label: 'highlightedAnchorPlot',\n        attr: {\n          fill: toRaphaelColor(h.fillColor),\n          stroke: toRaphaelColor(h.borderColor)\n        }\n      }) : 'image' === m ? p.setAnimation({\n        el: l,\n        label: 'highlightedAnchorImagePlot',\n        attr: {\n          opacity: h.imageAlpha / 100\n        }\n      }) : 'text' === m ? setDataLabelAttrs(p, l, b, r, c) : void 0;\n    }\n  }\n},\n    setLegendAttrs = function setLegendAttrs(a, b, c, d, e) {\n  var f,\n      g = a.getStateCosmetics('default').symbol || {},\n      h = g.fill,\n      i = g.stroke,\n      j = e ? pluck(d.color, rgbaToHex(c.text.fill)) : rgbaToHex(c.text.fill),\n      k = b.legendItemLine,\n      l = c.symbol.stroke,\n      m = a.getFromEnv('animationManager');\n  k && l && (hexcode.test(l) ? m.setAnimation({\n    el: k,\n    label: 'highlightedLegendItem',\n    attr: {\n      stroke: e ? toRaphaelColor({\n        color: pluck(d.color, l),\n        alpha: d.alpha\n      }) : l\n    }\n  }) : (f = parseColor(l, d, e), m.setAnimation({\n    el: k,\n    label: 'highlightedLegendItem',\n    attr: {\n      stroke: f\n    }\n  }))), h && (h.match(hexcode) ? h = e && !whiteHex.test(h) ? toRaphaelColor({\n    color: d.color || h,\n    alpha: d.alpha\n  }) : h : h = whiteRgb.test(h) ? h : parseColor(h, d, e)), i && (hexcode.test(i) ? i = e && !whiteHex.test(i) ? toRaphaelColor({\n    color: d.color || i,\n    alpha: d.alpha\n  }) : i : i = e && !whiteRgb.test(i) ? d.color ? toRaphaelColor({\n    color: d.color,\n    alpha: d.alpha\n  }) : i : i), a.setStateCosmetics('highlight', {\n    symbol: {\n      fill: h || 'none',\n      stroke: i || 'none',\n      opacity: (e ? d.alpha : 100) / 100\n    },\n    text: {\n      fill: toRaphaelColor({\n        color: j,\n        alpha: e ? d.alpha : 100\n      })\n    }\n  }), a.hasState('hidden') || a.setLegendState('highlight', !0);\n},\n    getLegendGraphics = function getLegendGraphics(a, b) {\n  var c = a.getFromEnv('legend'),\n      d = c.getItem(b);\n  return d && d.getGraphicalElement();\n},\n    fadeout = {\n  area: function area(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t = this,\n        u = t.getFromEnv('chart'),\n        v = t.getFromEnv('animationManager'),\n        w = u.config,\n        x = u.getFromEnv('legend'),\n        y = x.getChildren('legendItem') || [],\n        z = arguments[4],\n        A = y.length,\n        B = parseConfStr(a),\n        C = getLegendGraphics(u, z),\n        D = w.dataLabelStyle,\n        E = t.getContainer('labelGroup'),\n        F = t.config,\n        G = F.shadow || {},\n        H = 0 < G.opacity;\n\n    if (!c && t.getState('visible')) {\n      for (B.alpha = B.alpha || 30, e = 0; e < A && (d = y[e] || {}, d.getId() !== z); e++) {\n        ;\n      }\n\n      E && v.setAnimation({\n        el: E,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? B.alpha / 100 : getAlpha(D.color)\n        }\n      }), g = F.plotbordercolor, m = F.plotborderalpha, r = F.plotfillalpha, f = F.plotgradientcolor, p = t.getGraphicalElement('lineElement') || t.getGraphicalElement('splineElement'), k = b ? pluck(B.bordercolor, B.color, g) : g, B.color && (n = B.color + (f ? ',' + f : BLANKSTRING)), o = F.fillColor.color, h = b ? pluck(n, o) : o, q = F.plotfillangle, j = b ? B.alpha : r, l = b ? pluck(B.borderalpha, B.alpha) : m, s = !!H && (b ? B.alpha / 100 : j / 100), v.setAnimation({\n        el: p,\n        label: 'highlightedAreaPlot',\n        attr: {\n          fill: toRaphaelColor({\n            color: h,\n            alpha: j,\n            angle: q\n          }),\n          stroke: toRaphaelColor({\n            color: k,\n            alpha: l\n          })\n        }\n      }), p.shadow(s), C && setLegendAttrs(d, C, d.parseLegendCosmetics(), B, b), setDataObjectAttrs(t, B, b);\n    }\n  },\n  bubble: function bubble(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q = this,\n        r = q.getFromEnv('chart'),\n        s = q.getFromEnv('animationManager'),\n        t = r.config,\n        u = r.getFromEnv('legend'),\n        v = u.getChildren('legendItem') || [],\n        w = v.length,\n        x = arguments[4],\n        y = t.dataLabelStyle,\n        z = getLegendGraphics(r, x),\n        A = q.getContainer('labelGroup'),\n        B = parseConfStr(a);\n\n    if (!1 === c && q.getState('visible')) {\n      for (B.alpha || (B.alpha = 30), f = q.components.data || [], e = 0; e < w && (d = v[e] || {}, d.getId() !== x); e++) {\n        ;\n      }\n\n      for (setLegendAttrs(d, z, d.parseLegendCosmetics(), B, b), A && s.setAnimation({\n        el: A,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? B.alpha / 100 : getAlpha(y.color)\n        }\n      }), (e = 0, w = f.length); e < w; e++) {\n        (g = f[e], !!g) && (o = g.graphics, h = g.config, j = h.colorObj, l = h.is3D, k = o.element, p = o.label, l ? (n = b ? getPointColor(pluck(B.color, j.FCcolor.color), pluck(B.alpha, getFirstAlpha(j.alpha))) : j, n = toRaphaelColor(n)) : (n = b ? pluck(B.color, j.color) : j.color, m = b ? B.alpha : j.alpha, n = toRaphaelColor({\n          color: n,\n          alpha: m\n        })), k && s.setAnimation({\n          el: k,\n          label: 'highlightedBubblePlot',\n          attr: {\n            fill: n\n          }\n        }), p && setDataLabelAttrs(s, p, B, y, b));\n      }\n    }\n  },\n  pie: function pie(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u,\n        v,\n        w,\n        x = this,\n        y = d.getFromEnv('chart'),\n        z = d.getFromEnv('animationManager'),\n        A = y.getFromEnv('legend'),\n        B = this,\n        C = {},\n        D = arguments[4],\n        E = A.getChildren('legendItem') || [],\n        F = parseConfStr(a);\n\n    if (!1 === c) {\n      for (F.alpha || (F.alpha = 30), f = x.graphics.element, g = x.config, (s = 0, r = E.length); s < r && (v = E[s], u = v.getId(), u !== D); s++) {\n        ;\n      }\n\n      t = getLegendGraphics(y, D), setLegendAttrs(v, t, v.parseLegendCosmetics(), F, b), j = g.color.color, B = f.data('plotItem'), y = B.chart, e = B.style, h = 90, o = y.config.is3D, m = B.center, m && (k = m[0], l = m[1], n = B.radius, C = {\n        cx: k,\n        cy: l,\n        r: n\n      }), j = b ? pointColor(pluck(F.color, j), F.alpha, h) : g.color, w = b ? F.alpha : j.alpha, j = extend2(j, C), o ? f && z.setAnimation({\n        el: f,\n        label: 'highlightedPiePlot',\n        attr: {\n          color: j.color.split(',')[0],\n          alpha: w\n        }\n      }) : f && z.setAnimation({\n        el: f,\n        label: 'highlightedPiePlot',\n        attr: {\n          fill: toRaphaelColor(j)\n        }\n      }), p = x.graphics.label, q = x.graphics.connector, p && setDataLabelAttrs(z, p, F, e, b), q && z.setAnimation({\n        el: q,\n        label: 'highlightedPieConnectorPlot',\n        attr: {\n          opacity: b ? F.alpha / 100 : getAlpha(e.color)\n        }\n      });\n    }\n  },\n  line: function line(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l = this,\n        m = l.getFromEnv('chart'),\n        n = l.getFromEnv('animationManager'),\n        o = m.config,\n        p = m.getFromEnv('legend'),\n        q = p.getChildren('legendItem') || [],\n        r = q.length,\n        s = arguments[4],\n        t = o.dataLabelStyle,\n        u = parseConfStr(a),\n        v = getLegendGraphics(m, s),\n        w = l.getContainer('labelGroup'),\n        x = l.getContainer('errorPlotGroup'),\n        y = l.config,\n        z = y.linecolor,\n        A = y.alpha || y.lineAlpha,\n        B = y.shadow || {},\n        C = 0 < B.opacity,\n        D = l.config.lineOb,\n        E = '';\n\n    if (!c && l.getState('visible')) {\n      for (u.alpha || (u.alpha = 30), h = 0; h < r && (d = q[h] || {}, d.getId() !== s); h++) {\n        ;\n      }\n\n      if (x && (e = y.errorBarColor && getAlpha(y.errorBarColor), f = b ? pluck(u.alpha / 100, e) : e, n.setAnimation({\n        el: x,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: f\n        }\n      })), w && n.setAnimation({\n        el: w,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? u.alpha / 100 : getAlpha(t.color)\n        }\n      }), g = l.getGraphicalElement('lineElement'), z = b ? pluck(u.color, z) : z, A = b ? pluck(u.alpha, A) : A, j = !!C && (b ? u.alpha / 100 : A / 100), g && n.setAnimation({\n        el: g,\n        label: 'highlightedLinePlot',\n        attr: {\n          stroke: toRaphaelColor({\n            color: z,\n            alpha: A\n          })\n        }\n      }), g && g.shadow(j), 'object' == typeof D && D) for (E in D) {\n        k = D[E] && D[E].el, k && n.setAnimation({\n          el: k,\n          label: 'highlightedLinePlot',\n          attr: {\n            stroke: b ? z : D[E].attr.stroke,\n            \"stroke-opacity\": A / 100\n          }\n        }), k && k.shadow(j);\n      }\n      v && setLegendAttrs(d, v, d.parseLegendCosmetics(), u, b), setDataObjectAttrs(l, u, b);\n    }\n  },\n  boxandwhisker2d: function boxandwhisker2d(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k = this,\n        l = k.config,\n        m = k.getFromEnv('chart'),\n        n = k.getFromEnv('animationManager'),\n        o = l.isRoundEdges,\n        p = arguments[4],\n        q = getLegendGraphics(m, p),\n        r = k.getContainer('lowerWhiskerGroup'),\n        s = k.getContainer('upperWhiskerGroup'),\n        t = k.getContainer('labelGroup'),\n        u = m.getFromEnv('legend'),\n        v = u.getChildren('legendItem') || [],\n        w = v.length,\n        x = parseConfStr(a);\n\n    if (!1 === c && k.getState('visible')) {\n      for (x.alpha || (x.alpha = 30), d = 0; d < w && (e = v[d] || {}, e.getId() !== p); d++) {\n        ;\n      }\n\n      for (setLegendAttrs(e, q, e.parseLegendCosmetics(), x, b), r && n.setAnimation({\n        el: r,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? x.alpha / 100 : 1\n        }\n      }), s && n.setAnimation({\n        el: s,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? x.alpha / 100 : 1\n        }\n      }), t && n.setAnimation({\n        el: t,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? x.alpha / 100 : 1\n        }\n      }), j = k.components.data, (d = 0, w = j.length); d < w; d++) {\n        g = j[d], h = g.config, f = g.graphics, setBoxAndWhiskerAttrs(n, f, h, x, b, o);\n      }\n    }\n  },\n  heatmap: function heatmap(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r = this,\n        s = d.getFromEnv('chart'),\n        t = d.getFromEnv('animationManager'),\n        u = s.config,\n        v = u.dataLabelStyle,\n        w = s.getFromEnv('legend'),\n        x = arguments[4],\n        y = parseConfStr(a),\n        z = w.getChildren('legendItem') || [];\n\n    if (!c && d.getState('visible') && !1 !== r.visible) {\n      for (y.alpha || (y.alpha = b ? 30 : 100), u = r.config, (n = 0, m = z.length); n < m && (q = z[n], p = q.getId(), p !== x); n++) {\n        ;\n      }\n\n      for (k in o = getLegendGraphics(s, x), setLegendAttrs(q, o, q.parseLegendCosmetics(), y, b), j = rgbaToHex(u.color), h = getAlpha(u.color), e = b ? pluck(y.color, j) : j, f = b ? y.alpha : 100 * h, l = r.graphics, g = l.element, g && t.setAnimation({\n        el: g,\n        label: 'highlightedHeatmapPlot',\n        attr: {\n          fill: toRaphaelColor({\n            color: e,\n            alpha: f\n          })\n        }\n      }), l) {\n        g = l[k], 'text' === g.type && setDataLabelAttrs(t, g, y, v, b);\n      }\n    }\n  },\n  funnelpyramid: function funnelpyramid(a, b, c, d) {\n    var e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t,\n        u,\n        v = this,\n        w = d.getFromEnv('chart'),\n        x = d.getFromEnv('animationManager'),\n        y = w.getFromEnv('legend'),\n        z = parseConfStr(a),\n        A = y.getChildren('legendItem') || [],\n        B = arguments[4];\n\n    if (!1 === c) {\n      for (z.alpha || (z.alpha = 30), h = v, (r = 0, q = A.length); r < q && (u = A[r], t = u.getId(), t !== B); r++) {\n        ;\n      }\n\n      s = getLegendGraphics(w, B), setLegendAttrs(u, s, u.parseLegendCosmetics(), z, b), f = h.style, p = h.color, j = rgbaToHex(p), o = getAlpha(p), k = b ? pluck(z.color, j) : j, l = b ? z.alpha : 100 * o, g = v.getGraphicalElement('graphic'), m = v.getGraphicalElement('dataLabel'), n = v.getGraphicalElement('connector'), e = v.style, g && x.setAnimation({\n        el: g,\n        label: 'highlightedFunnelPyramidPlot',\n        attr: {\n          fill: toRaphaelColor({\n            color: k,\n            alpha: l\n          })\n        }\n      }), m && setDataLabelAttrs(x, m, z, e, b), n && x.setAnimation({\n        el: n,\n        label: 'highlightedFunnelPyramidConnectorPlot',\n        attr: {\n          opacity: b ? z.alpha / 100 : getAlpha(f.color)\n        }\n      });\n    }\n  },\n  default: function _default(a, b, c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n,\n        o,\n        p,\n        q,\n        r,\n        s,\n        t = this,\n        u = t.config,\n        v = t.getFromEnv('chart'),\n        w = t.getFromEnv('animationManager'),\n        x = v.config,\n        y = x.dataLabelStyle,\n        z = x.useroundedges,\n        A = v.config.is3D,\n        B = parseConfStr(a),\n        C = arguments[4],\n        D = getLegendGraphics(v, C),\n        E = t.getContainer('labelGroup'),\n        F = t.getContainer('errorPlotGroup'),\n        G = '',\n        H = v.getFromEnv('legend'),\n        I = H.getChildren('legendItem') || [],\n        J = I.length,\n        K = u.showShadow;\n\n    if (!1 === c && !0 === t.getState('visible')) {\n      for (B.alpha || (B.alpha = '30'), o = t.components.data || [], e = 0; e < J && (r = I[e] || {}, r.getId() !== C); e++) {\n        ;\n      }\n\n      for (D && setLegendAttrs(r, D, r.parseLegendCosmetics(), B, b), E && w.setAnimation({\n        el: E,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: b ? B.alpha / 100 : getAlpha(y.color)\n        }\n      }), F && (h = u.errorBarColor && getAlpha(u.errorBarColor), j = b ? pluck(B.alpha / 100, h) : h, w.setAnimation({\n        el: F,\n        label: 'highlightedGroup',\n        attr: {\n          opacity: j\n        }\n      })), (e = 0, J = o.length); e < J; e++) {\n        (p = o[e], p && p.graphics) && (x = p.config, n = x.colorArr[0], f = x.colorArr[1], s = f.FCcolor.alpha, d = n.FCcolor.color, G = -1 !== (l = d.indexOf(',')) && B.color ? B.color + d.substring(l) : pluck(B.color, d), m = A ? s : pluck(B.borderalpha, B.alpha, s), 0 === pluckNumber(s) && (m = '0'), k = b ? getColumnColor(G, B.alpha, n.FCcolor.ratio, n.FCcolor.angle, z, pluck(B.bordercolor, f.FCcolor.color), m, !1, A) : [n, f], g = p.graphics.element, g && (d = toRaphaelColor(k[0]), f = toRaphaelColor(k[1]), w.setAnimation({\n          el: g,\n          label: 'highlightedDefaultPlot',\n          attr: {\n            stroke: f,\n            fill: d\n          }\n        }), g.shadow({\n          opacity: K ? getFirstAlpha(k[0].alpha) / 100 : 0\n        })), q = p.graphics.label, setDataLabelAttrs(w, q, B, y, b));\n      }\n    }\n  }\n},\n    highlighteffect = function highlighteffect(a) {\n  a && hm.add(a);\n};\n\nfunction FCPlugger(a) {\n  hm = new (\n  /*#__PURE__*/\n  function () {\n    function _class() {\n      _classCallCheck(this, _class);\n\n      this.effectStore = {}, this.eventHandlers = {};\n    }\n\n    _createClass(_class, [{\n      key: \"add\",\n      value: function add(a) {\n        this.effectStore[a.name] = a;\n      }\n    }, {\n      key: \"attachEventHandlers\",\n      value: function attachEventHandlers(b, c) {\n        var d = this,\n            e = d.eventHandlers,\n            f = e[b];\n        f || (this.eventHandlers[b] = {}, this.eventHandlers[b].listenerFn = a.addEventListener(b, c));\n      }\n    }, {\n      key: \"applyEffect\",\n      value: function applyEffect(a, b, c) {\n        var d,\n            e,\n            f,\n            g,\n            h,\n            j,\n            k,\n            l,\n            m,\n            n,\n            o,\n            p,\n            q,\n            r = this.effectStore,\n            s = a.getFromEnv('chart-attrib'),\n            t = a.config.defaultDatasetType,\n            u = s.plothighlighteffect && s.plothighlighteffect.toLowerCase(),\n            v = a.getDatasets(),\n            w = a.config.isSingleSeries ? v[0].components.data : v,\n            x = pluck(b.itemId, b.legendItemId, b.legendItemIndex),\n            y = '';\n        if (removeHighlightStateCosmetics(a.getFromEnv('legend').getChildren('legendItem')), ('funnel' === a.getName() || 'Pyramid' === a.getName()) && (w = v[0].getChildren('data')), a.getFromEnv('animationManager').setAnimationState('plotHighlighter'), u && (u = u.replace(/\\s+/g, '').split('|'), q = u[0], y = u[1] || ''), q && r[q]) if ('HeatMap' === a.getName()) for (d = a.getFromEnv('colorRange'), l = a.getFromEnv('legend'), e = l.getItem(x), p = function p(a) {\n          var b,\n              c,\n              d = l.getChildren('legendItem'),\n              e = d && d.length;\n\n          for (b = 0; b < e; ++b) {\n            if (d[b].config.datasetObj.code === a) {\n              c = d[b].getId();\n              break;\n            }\n          }\n\n          return c;\n        }, n = e.config.datasetObj, j = 0; j < w.length; j++) {\n          h = w[j], f = h.config.value, o = d.getColorObj(f), o.outOfRange || (n.code === o.code ? r[q][t].call(h, y, c, !0, v[0], x) : r[q][t].call(h, y, c, !1, v[0], p(o.code)));\n        } else for (j = 0, m = w.length; j < m; j++) {\n          h = w[j], t = h.getName && h.getName() || t, t = t.toLowerCase(), g = pluck(h.config.itemId, h.config.legendItemId), g !== UNDEF && (k = g === x, r[q][t] ? r[q][t].call(h, y, c, k, v[0], g) : r[q]['default'].call(h, y, c, k, v[0], g));\n        }\n      }\n    }]);\n\n    return _class;\n  }())(), hm.attachEventHandlers('legenditemrollover', function (a, b) {\n    var c = a.sender.apiInstance;\n    !1 !== c.hasInteractiveLegend && !1 !== c.highlightEnabled && hm.applyEffect(c, b, !0);\n  }), hm.attachEventHandlers('legenditemrollout', function (a, b) {\n    var c = a.sender.apiInstance;\n    !1 !== c.hasInteractiveLegend && !1 !== c.highlightEnabled && hm.applyEffect(c, b, !1);\n  }), hm.attachEventHandlers('legenditemclicked', function (a, b) {\n    var c = a.sender.apiInstance;\n    c.addJob('plothighlighteffect', function () {\n      !1 !== c.hasInteractiveLegend && !1 !== c.highlightEnabled && hm.applyEffect(c, b, !0);\n    }, priorityList.postRender);\n  }), highlighteffect({\n    name: 'fadeout',\n    area: fadeout.area,\n    radar: fadeout.area,\n    bubble: fadeout.bubble,\n    pie2d: fadeout.pie,\n    line: fadeout.line,\n    spline: fadeout.line,\n    splinearea: fadeout.area,\n    pie3d: fadeout.pie,\n    zoomline: fadeout.line,\n    funnelpoint: fadeout.funnelpyramid,\n    pyramidpoint: fadeout.funnelpyramid,\n    scatter: fadeout.line,\n    selectscatter: fadeout.line,\n    dragline: fadeout.line,\n    dragarea: fadeout.area,\n    realtimearea: fadeout.area,\n    realtimeline: fadeout.line,\n    realtimelinedy: fadeout.line,\n    realtimestackedarea: fadeout.area,\n    errorline: fadeout.line,\n    errorscatter: fadeout.line,\n    stepline: fadeout.line,\n    doughnut2d: fadeout.pie,\n    doughnut3d: fadeout.pie,\n    heatmap: fadeout.heatmap,\n    boxandwhisker2d: fadeout.boxandwhisker2d,\n    multiaxisline: fadeout.line,\n    default: fadeout['default']\n  });\n}\n\nexport default {\n  extension: FCPlugger,\n  name: 'PlotHighlighter',\n  type: 'extension',\n  requiresFusionCharts: !0\n};","map":null,"metadata":{},"sourceType":"module"}