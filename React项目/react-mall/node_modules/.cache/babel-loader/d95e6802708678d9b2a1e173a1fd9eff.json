{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\src\\\\components\\\\Content\\\\Food\\\\Add\\\\Step\\\\Step.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport './Add.less';\nvar createForm = Form.create;\nvar FormItem = Form.Item;\n\nfunction noop() {\n  return false;\n}\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n*/\n\n\nvar StepOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepOne, _Component);\n\n  function StepOne() {\n    _classCallCheck(this, StepOne);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StepOne).call(this));\n  }\n\n  _createClass(StepOne, [{\n    key: \"handleReset\",\n    value: function handleReset(e) {\n      //resetFields重置表单内容\n      e.preventDefault();\n      this.props.form.resetFields();\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      //表单内容提交组件,校验并获取一组输入域的值与 Error\t\n      e.preventDefault();\n      this.props.form.validateFields(function (errors, values) {\n        if (!!errors) {\n          console.log('Errors in form!!!');\n          return;\n        }\n\n        console.log('Submit!!!');\n      });\n    }\n  }, {\n    key: \"userExists\",\n    value: function userExists(rule, value, callback) {\n      //当做validator函数来用,用来作为判断条件\n      if (!value) {\n        callback();\n      } else {\n        setTimeout(function () {\n          if (value === '宫爆鸡丁') {\n            callback([new Error('抱歉，该菜名已被占用。')]);\n          } else {\n            callback();\n          }\n        }, 800);\n      }\n    }\n  }, {\n    key: \"checkPass\",\n    value: function checkPass(rule, value, callback) {\n      var validateFields = this.props.form.validateFields;\n\n      if (value) {\n        validateFields(['rePasswd'], {\n          force: true\n        });\n      }\n\n      callback();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldProps = _this$props$form.getFieldProps,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldValidating = _this$props$form.isFieldValidating;\n      var nameProps = getFieldProps('name', {\n        //第一个参数为ID,第二个为options\n\n        /* \r\n        getFieldProps options \r\n        */\n        rules: [{\n          required: true,\n          min: 1,\n          message: '菜品名至少为 1 个字符',\n          trigger: 'onblur'\n        }, {\n          validator: this.userExists.bind(this)\n        }],\n        valuePropName: true\n      });\n      var textareaProps = getFieldProps('textarea', {\n        rules: [{\n          required: true,\n          message: '真的不打算写点什么吗？'\n        }]\n      });\n      var formItemLayout = {\n        labelCol: {\n          span: 7\n        },\n        wrapperCol: {\n          span: 12\n        }\n      };\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u540D\\u79F0\\uFF1A\",\n        hasFeedback: true,\n        help: isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', '),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, nameProps, {\n        placeholder: \" \\u8F93\\u5165 \\u5BAB\\u7206\\u9E21\\u4E01 \\u770B\\u770B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u7C7B\\u578B\\uFF1A\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, textareaProps, {\n        type: \"textarea\",\n        placeholder: \"\\u83DC\\u54C1\\u540D\\u79F0\",\n        id: \"textarea\",\n        name: \"textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        onClick: this.handleReset.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \" Reset\"), React.createElement(Button, {\n        onClick: this.handleSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \" Submit\"));\n    }\n  }]);\n\n  return StepOne;\n}(Component);\n\nStepOne = createForm()(StepOne); //将Form表单,通过props获取到各种方法\n\nexport default StepOne; // class StepTwo extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepTwo\">\n//         11111111111111111\n//        </div>\n//     )\n//   }\n// }\n// class StepThree extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepThree\">\n//         22222222222222\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\components\\Content\\Food\\Add\\Step\\Step.js"],"names":["React","Component","Button","Form","Input","createForm","create","FormItem","Item","noop","StepOne","e","preventDefault","props","form","resetFields","validateFields","errors","values","console","log","rule","value","callback","setTimeout","Error","force","getFieldProps","getFieldError","isFieldValidating","nameProps","rules","required","min","message","trigger","validator","userExists","bind","valuePropName","textareaProps","formItemLayout","labelCol","span","wrapperCol","join","handleReset","handleSubmit"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAO,YAAP;AAEA,IAAMC,UAAU,GAAGF,IAAI,CAACG,MAAxB;AACA,IAAMC,QAAQ,GAAGJ,IAAI,CAACK,IAAtB;;AACA,SAASC,IAAT,GAAgB;AACd,SAAO,KAAP;AACD;AACD;;;;;;;;;;;;IAUOC,O;;;;;AACN,qBAAa;AAAA;;AAAA;AAEZ;;;;gCACYC,C,EAAG;AACb;AACCA,MAAAA,CAAC,CAACC,cAAF;AACD,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,WAAhB;AACD;;;iCACYJ,C,EAAG;AACd;AACAA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBE,cAAhB,CAA+B,UAACC,MAAD,EAASC,MAAT,EAAoB;AACjD,YAAI,CAAC,CAACD,MAAN,EAAc;AACZE,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;AACD;;AACDD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,OANF;AAOD;;;+BAEUC,I,EAAMC,K,EAAOC,Q,EAAU;AAChC;AACA,UAAI,CAACD,KAAL,EAAY;AACRC,QAAAA,QAAQ;AACX,OAFD,MAEO;AACLC,QAAAA,UAAU,CAAC,YAAM;AACf,cAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBC,YAAAA,QAAQ,CAAC,CAAC,IAAIE,KAAJ,CAAU,aAAV,CAAD,CAAD,CAAR;AACD,WAFD,MAEO;AACLF,YAAAA,QAAQ;AACT;AACF,SANS,EAMP,GANO,CAAV;AAOD;AACF;;;8BAESF,I,EAAMC,K,EAAOC,Q,EAAU;AAAA,UACvBP,cADuB,GACJ,KAAKH,KAAL,CAAWC,IADP,CACvBE,cADuB;;AAE/B,UAAIM,KAAJ,EAAW;AACTN,QAAAA,cAAc,CAAC,CAAC,UAAD,CAAD,EAAe;AAAEU,UAAAA,KAAK,EAAE;AAAT,SAAf,CAAd;AACD;;AACDH,MAAAA,QAAQ;AACT;;;6BAIS;AAAA,6BACoD,KAAKV,KAAL,CAAWC,IAD/D;AAAA,UACAa,aADA,oBACAA,aADA;AAAA,UACeC,aADf,oBACeA,aADf;AAAA,UAC8BC,iBAD9B,oBAC8BA,iBAD9B;AAER,UAAMC,SAAS,GAAGH,aAAa,CAAC,MAAD,EAAS;AAAE;;AACxC;;;AAGAI,QAAAA,KAAK,EAAE,CACL;AAAEC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,GAAG,EAAE,CAAvB;AAA0BC,UAAAA,OAAO,EAAE,cAAnC;AAAkDC,UAAAA,OAAO,EAAE;AAA3D,SADK,EAEL;AAAEC,UAAAA,SAAS,EAAE,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB;AAAb,SAFK,CAJ+B;AAOnCC,QAAAA,aAAa,EAAC;AAPqB,OAAT,CAA/B;AASA,UAAMC,aAAa,GAAGb,aAAa,CAAC,UAAD,EAAa;AAC9CI,QAAAA,KAAK,EAAE,CACL;AAAEC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBE,UAAAA,OAAO,EAAE;AAA3B,SADK;AADuC,OAAb,CAAnC;AAKA,UAAMO,cAAc,GAAG;AACrBC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADW;AAErBC,QAAAA,UAAU,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFS,OAAvB;AAIA,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,oBACMF,cADN;AAEE,QAAA,KAAK,EAAC,gCAFR;AAGE,QAAA,WAAW,MAHb;AAIE,QAAA,IAAI,EAAEZ,iBAAiB,CAAC,MAAD,CAAjB,GAA4B,QAA5B,GAAuC,CAACD,aAAa,CAAC,MAAD,CAAb,IAAyB,EAA1B,EAA8BiB,IAA9B,CAAmC,IAAnC,CAJ/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAME,oBAAC,KAAD,oBAAWf,SAAX;AAAsB,QAAA,WAAW,EAAC,qDAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANF,CADF,EAUE,oBAAC,QAAD,oBACMW,cADN;AAEE,QAAA,KAAK,EAAC,gCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIE,oBAAC,KAAD,oBAAWD,aAAX;AAA0B,QAAA,IAAI,EAAC,UAA/B;AAA0C,QAAA,WAAW,EAAC,0BAAtD;AAA6D,QAAA,EAAE,EAAC,UAAhE;AAA2E,QAAA,IAAI,EAAC,UAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,CAVF,EAgBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKM,WAAL,CAAiBR,IAAjB,CAAsB,IAAtB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,EAiBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKS,YAAL,CAAkBT,IAAlB,CAAuB,IAAvB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjBF,CADF;AAwBD;;;;EA1FoBrC,S;;AA4FvBS,OAAO,GAAGL,UAAU,GAAGK,OAAH,CAApB,C,CAAgC;;AAGhC,eAAeA,OAAf,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport './Add.less';\r\n\r\nconst createForm = Form.create;\r\nconst FormItem = Form.Item;\r\nfunction noop() {\r\n  return false;\r\n}\r\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n*/\r\n class StepOne extends Component {\r\n constructor(){\r\n   super()\r\n }\r\n  handleReset(e) {\r\n    //resetFields重置表单内容\r\n     e.preventDefault();\r\n    this.props.form.resetFields();\r\n  };\r\n  handleSubmit(e) {\r\n    //表单内容提交组件,校验并获取一组输入域的值与 Error\t\r\n    e.preventDefault();\r\n    this.props.form.validateFields((errors, values) => {\r\n      if (!!errors) {\r\n        console.log('Errors in form!!!');\r\n        return;\r\n      }\r\n      console.log('Submit!!!');\r\n     });\r\n  };\r\n\r\n  userExists(rule, value, callback) {\r\n    //当做validator函数来用,用来作为判断条件\r\n    if (!value) {\r\n        callback();\r\n    } else {\r\n      setTimeout(() => {\r\n        if (value === '宫爆鸡丁') {\r\n          callback([new Error('抱歉，该菜名已被占用。')]);\r\n        } else {\r\n          callback( );\r\n        }\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n  checkPass(rule, value, callback) {\r\n    const { validateFields } = this.props.form;\r\n    if (value) {\r\n      validateFields(['rePasswd'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n   \r\n\r\n  render( ) {\r\n    const { getFieldProps, getFieldError, isFieldValidating } = this.props.form;\r\n    const nameProps = getFieldProps('name', { //第一个参数为ID,第二个为options\r\n      /* \r\n      getFieldProps options \r\n      */\r\n      rules: [\r\n        { required: true, min: 1, message: '菜品名至少为 1 个字符',trigger: 'onblur' },\r\n        { validator: this.userExists.bind(this) },\r\n      ], valuePropName:true\r\n    });\r\n    const textareaProps = getFieldProps('textarea', {\r\n      rules: [\r\n        { required: true, message: '真的不打算写点什么吗？' },\r\n      ],\r\n    });\r\n    const formItemLayout = {\r\n      labelCol: { span: 7 },\r\n      wrapperCol: { span: 12 },\r\n    };\r\n    return (\r\n      <Form >\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品名称：\"\r\n          hasFeedback\r\n          help={isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', ')}\r\n        >\r\n          <Input {...nameProps} placeholder=\" 输入 宫爆鸡丁 看看\" />\r\n        </FormItem>\r\n\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品类型：\"\r\n        >\r\n          <Input {...textareaProps} type=\"textarea\" placeholder=\"菜品名称\" id=\"textarea\" name=\"textarea\" />\r\n        </FormItem>\r\n        <Button onClick={this.handleReset.bind(this)} > Reset</Button >\r\n        <Button onClick={this.handleSubmit.bind(this)}> Submit</Button >\r\n      </Form>\r\n          \r\n    );\r\n   \r\n\r\n  }\r\n}\r\nStepOne = createForm()(StepOne);//将Form表单,通过props获取到各种方法\r\n\r\n\r\nexport default StepOne\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class StepTwo extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepTwo\">\r\n//         11111111111111111\r\n//        </div>\r\n//     )\r\n//   }\r\n// }\r\n// class StepThree extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepThree\">\r\n//         22222222222222\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}