{"ast":null,"code":"function quadraticYOnX(d) {\n  d.sort(function (c, a) {\n    return parseFloat(c.x) - parseFloat(a.x);\n  });\n  var g,\n      h,\n      i,\n      j,\n      k,\n      p,\n      s,\n      A,\n      B,\n      C,\n      D = [],\n      x = [],\n      y = 0,\n      E = 0,\n      F = d.length,\n      G = 0,\n      H = 0,\n      I = 0,\n      J = 0,\n      K = 0,\n      L = [];\n\n  for (var a = 0; a < d.length; a++) {\n    (B = +d[a].x, C = +d[a].y, !(isNaN(B) || isNaN(C))) && (D.push(B), x.push(C));\n  }\n\n  F = D.length;\n\n  for (var _a = 0; _a < F; _a++) {\n    y += x[_a], E += D[_a] * x[_a], K += D[_a] * D[_a] * x[_a], G += D[_a], H += D[_a] * D[_a], J += D[_a] * D[_a] * D[_a], I += D[_a] * D[_a] * D[_a] * D[_a];\n  }\n\n  if (g = H - G * G / F, h = E - G * y / F, i = J - H * G / F, j = K - H * y / F, k = I - H * H / F, 0 == g * k - i * i || 0 === F) return [d, []];\n  p = (j * g - h * i) / (g * k - i * i), s = (h * k - j * i) / (g * k - i * i), A = y / F - s * (G / F) - p * (H / F);\n\n  for (var _a2 = 0; _a2 < F; _a2++) {\n    L.push({\n      x: D[_a2],\n      y: p * D[_a2] * D[_a2] + s * D[_a2] + A\n    });\n  }\n\n  return [d, L];\n}\n\nfunction quadraticXOnY(d) {\n  d.sort(function (c, a) {\n    return parseFloat(c.x) - parseFloat(a.x);\n  });\n  var g,\n      h,\n      i,\n      j,\n      k,\n      p,\n      s,\n      A,\n      B,\n      C,\n      D = [],\n      x = [],\n      y = 0,\n      E = 0,\n      F = d.length,\n      G = 0,\n      H = 0,\n      I = 0,\n      J = 0,\n      K = 0,\n      L = [];\n\n  for (var a = 0; a < d.length; a++) {\n    (B = +d[a].x, C = +d[a].y, !(isNaN(B) || isNaN(C))) && (D.push(B), x.push(C));\n  }\n\n  F = D.length;\n\n  for (var _a3 = 0; _a3 < F; _a3++) {\n    y += D[_a3], E += x[_a3] * D[_a3], K += x[_a3] * x[_a3] * D[_a3], G += x[_a3], H += x[_a3] * x[_a3], J += x[_a3] * x[_a3] * x[_a3], I += x[_a3] * x[_a3] * x[_a3] * x[_a3];\n  }\n\n  if (g = H - G * G / F, h = E - G * y / F, i = J - H * G / F, j = K - H * y / F, k = I - H * H / F, 0 == g * k - i * i || 0 === F) return [d, []];\n  p = (j * g - h * i) / (g * k - i * i), s = (h * k - j * i) / (g * k - i * i), A = y / F - s * (G / F) - p * (H / F);\n\n  for (var _a4 = 0; _a4 < F; _a4++) {\n    L.push({\n      x: p * x[_a4] * x[_a4] + s * x[_a4] + A,\n      y: x[_a4]\n    });\n  }\n\n  return [d, L];\n}\n\nexport default function getPolynomialRegressionPoints(a, b) {\n  return +b ? quadraticYOnX(a) : quadraticXOnY(a);\n}","map":null,"metadata":{},"sourceType":"module"}