{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { pluckNumber, extend2, getValidValue, pluck, getFirstValue, regescape } from '../lib';\nvar UNDEF,\n    formatNumber,\n    formatNumberScale,\n    convertNumberSeps,\n    formatDecimals,\n    formatCommas,\n    mathAbs = Math.abs,\n    mathPow = Math.pow,\n    mathRound = Math.round,\n    ONESTRING = '1',\n    BLANK = '',\n    ZEROSTRING = '0',\n    DECIMALSTRING = '.',\n    COMMASTRING = ',',\n    MINUSSTR = '-',\n    TWOSTRING = '2',\n    AUTOSTRING = 'auto',\n    numberFormatDefaults = {\n  formatnumber: '1',\n  formatnumberscale: '1',\n  forcenumberscale: '0',\n  defaultnumberscale: '',\n  numberscaleunit: ['K', 'M'],\n  numberscalevalue: [1e3, 1e3],\n  numberprefix: '',\n  numbersuffix: '',\n  decimals: '',\n  forcedecimals: '0',\n  yaxisvaluedecimals: '2',\n  decimalseparator: '.',\n  thousandseparator: ',',\n  thousandseparatorposition: [3],\n  indecimalseparator: '',\n  inthousandseparator: '',\n  sformatnumber: '1',\n  sformatnumberscale: '0',\n  sforcenumberscale: '0',\n  sdefaultnumberscale: '',\n  snumberscaleunit: ['K', 'M'],\n  snumberscalevalue: [1e3, 1e3],\n  snumberprefix: '',\n  snumbersuffix: '',\n  sdecimals: '2',\n  sforcedecimals: '0',\n  syaxisvaluedecimals: '2',\n  xFormatNumber: '0',\n  xFormatNumberScale: '0',\n  xforcenumberscale: '0',\n  xDefaultNumberScale: '',\n  xNumberScaleUnit: ['K', 'M'],\n  xNumberScaleValue: [1e3, 1e3],\n  xNumberPrefix: '',\n  xNumberSuffix: ''\n},\n    numberFormatOverrides = {\n  mscombidy2d: {\n    formatnumberscale: '1'\n  }\n};\n\nvar NumberFormatter =\n/*#__PURE__*/\nfunction () {\n  function NumberFormatter(a, b) {\n    _classCallCheck(this, NumberFormatter);\n\n    var c,\n        d = this,\n        e = a.getName && a.getName(),\n        f = d.csConf = extend2({}, numberFormatDefaults),\n        g = numberFormatOverrides[e];\n    d.cleaneValueCacheStore = {}, d.percentStrCacheStore = {}, g && (c = extend2(f, g), f = c), this.linkedItems = {\n      chart: a\n    }, d.configure(b);\n  }\n\n  _createClass(NumberFormatter, [{\n    key: \"setDefaults\",\n    value: function setDefaults() {\n      var a = this,\n          b = this.linkedItems.chart,\n          c = b.getName && b.getName(),\n          d = a.csConf = extend2({}, numberFormatDefaults),\n          e = numberFormatOverrides[c];\n      e && extend2(d, e);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q,\n          r,\n          s,\n          t,\n          u,\n          v,\n          w,\n          x,\n          y,\n          z,\n          A,\n          B,\n          C,\n          D,\n          E = this,\n          F = E.linkedItems.chart,\n          G = a || F.getFromEnv('chart-attrib'),\n          H = F.getName && F.getName(),\n          I = F.config,\n          J = E.csConf;\n      if (I || (I = F), E.csConf = J, E.useScaleRecursively = I.useScaleRecursively, getValidValue(G.numberscaleunit) && (c = G.numberscaleunit.split(COMMASTRING)), (d = getValidValue(G.snumberscaleunit, G.numberscaleunit)) && (d = d.split(COMMASTRING)), (e = getValidValue(G.xnumberscaleunit, G.numberscaleunit)) && (e = e.split(COMMASTRING)), (f = getValidValue(G.ticknumberscaleunit, G.numberscaleunit)) && (f = f.split(COMMASTRING)), (g = getValidValue(G.ynumberscaleunit, G.numberscaleunit)) && (g = g.split(COMMASTRING)), getValidValue(G.numberscalevalue) && (h = G.numberscalevalue.split(COMMASTRING)), (m = getValidValue(G.snumberscalevalue, G.numberscalevalue)) && (m = m.split(COMMASTRING)), (i = getValidValue(G.xnumberscalevalue, G.numberscalevalue)) && (i = i.split(COMMASTRING)), (j = getValidValue(G.ticknumberscalevalue, G.numberscalevalue)) && (j = j.split(COMMASTRING)), (k = getValidValue(G.ynumberscalevalue, G.numberscalevalue)) && (k = k.split(COMMASTRING)), getValidValue(G.thousandseparatorposition)) for (l = G.thousandseparatorposition.split(COMMASTRING), s = l.length, u = numberFormatDefaults.thousandseparatorposition[0]; s--;) {\n        t = parseInt(l[s], 10), 0 >= t && (t = u), u = l[s] = t;\n      }\n      v = pluckNumber(G.scalerecursively, 0), w = pluckNumber(G.sscalerecursively, v), x = pluckNumber(G.xscalerecursively, v), y = pluckNumber(G.maxscalerecursion, -1), z = pluckNumber(G.smaxscalerecursion, y), A = pluckNumber(G.xmaxscalerecursion, y), B = getValidValue(G.scaleseparator, ' '), C = getValidValue(G.sscaleseparator, B), D = getValidValue(G.xscaleseparator, B), y || (y = -1), E.baseConf = r = {\n        cacheStore: [],\n        formatnumber: pluck(G.formatnumber, J.formatnumber),\n        formatnumberscale: pluck(G.formatnumberscale, I.formatnumberscale, J.formatnumberscale),\n        forcenumberscale: pluck(G.forcenumberscale, J.forcenumberscale),\n        defaultnumberscale: getFirstValue(G.defaultnumberscale, J.defaultnumberscale),\n        numberscaleunit: pluck(c, J.numberscaleunit).concat(),\n        numberscalevalue: pluck(h, J.numberscalevalue).concat(),\n        numberprefix: getFirstValue(G.numberprefix, J.numberprefix),\n        numbersuffix: getFirstValue(G.numbersuffix, J.numbersuffix),\n        decimalprecision: parseInt(G.decimals === AUTOSTRING ? J.decimalprecision : pluck(G.decimals, G.decimalprecision, I.decimals, J.decimals, I.decimalprecision, J.decimalprecision), 10),\n        forcedecimals: pluck(G.forcedecimals, J.forcedecimals),\n        decimalseparator: pluck(G.decimalseparator, J.decimalseparator),\n        thousandseparator: pluck(G.thousandseparator, J.thousandseparator),\n        thousandseparatorposition: pluck(l, J.thousandseparatorposition),\n        indecimalseparator: getFirstValue(G.indecimalseparator, J.indecimalseparator),\n        inthousandseparator: getFirstValue(G.inthousandseparator, J.inthousandseparator),\n        scalerecursively: v,\n        maxscalerecursion: y,\n        scaleseparator: B\n      }, getValidValue(r.inthousandseparator) && (E.baseConf._REGinthousandseparator = new RegExp(regescape(r.inthousandseparator), 'g')), getValidValue(r.indecimalseparator) && (E.baseConf._REGindecimalseparator = new RegExp(regescape(r.indecimalseparator))), E.Y = [], b || (n = {\n        cacheStore: [],\n        formatnumber: r.formatnumber,\n        formatnumberscale: r.formatnumberscale,\n        forcenumberscale: r.forcenumberscale,\n        defaultnumberscale: r.defaultnumberscale,\n        numberscaleunit: r.numberscaleunit.concat(),\n        numberscalevalue: r.numberscalevalue.concat(),\n        numberprefix: r.numberprefix,\n        numbersuffix: r.numbersuffix,\n        decimalprecision: r.decimalprecision,\n        forcedecimals: r.forcedecimals,\n        decimalseparator: r.decimalseparator,\n        thousandseparator: r.thousandseparator,\n        thousandseparatorposition: r.thousandseparatorposition,\n        indecimalseparator: r.indecimalseparator,\n        inthousandseparator: r.inthousandseparator,\n        scalerecursively: v,\n        maxscalerecursion: y,\n        scaleseparator: B\n      }, (!I.useScaleRecursively || (n.numberscalevalue && n.numberscalevalue.length) != (n.numberscaleunit && n.numberscaleunit.length)) && (n.scalerecursively = v = 0), p = {\n        cacheStore: [],\n        formatnumber: n.formatnumber,\n        formatnumberscale: n.formatnumberscale,\n        forcenumberscale: n.forcenumberscale,\n        defaultnumberscale: n.defaultnumberscale,\n        numberscaleunit: n.numberscaleunit.concat(),\n        numberscalevalue: n.numberscalevalue.concat(),\n        numberprefix: n.numberprefix,\n        numbersuffix: n.numbersuffix,\n        decimalprecision: parseInt(pluck(G.yaxisvaluedecimals, n.decimalprecision, 2), 10),\n        forcedecimals: pluck(G.forceyaxisvaluedecimals, n.forcedecimals),\n        decimalseparator: n.decimalseparator,\n        thousandseparator: n.thousandseparator,\n        thousandseparatorposition: n.thousandseparatorposition.concat(),\n        indecimalseparator: n.indecimalseparator,\n        inthousandseparator: n.inthousandseparator,\n        scalerecursively: v,\n        maxscalerecursion: y,\n        scaleseparator: B\n      }, q = {\n        cacheStore: [],\n        formatnumber: pluck(G.sformatnumber, numberFormatDefaults.sformatnumber),\n        formatnumberscale: pluck(G.sformatnumberscale, numberFormatDefaults.sformatnumberscale),\n        forcenumberscale: pluck(G.sforcenumberscale, numberFormatDefaults.sforcenumberscale),\n        defaultnumberscale: getFirstValue(G.sdefaultnumberscale, n.defaultnumberscale),\n        numberscaleunit: pluck(d, numberFormatDefaults.snumberscaleunit).concat(),\n        numberscalevalue: pluck(m, numberFormatDefaults.snumberscalevalue).concat(),\n        numberprefix: getFirstValue(G.snumberprefix, numberFormatDefaults.snumberprefix),\n        numbersuffix: getFirstValue(G.snumbersuffix, numberFormatDefaults.snumbersuffix),\n        decimalprecision: parseInt(pluck(G.syaxisvaluedecimals, G.sdecimals, G.decimals, numberFormatDefaults.sdecimals), 10),\n        forcedecimals: pluck(G.forcesyaxisvaluedecimals, G.sforcedecimals, G.forcedecimals, numberFormatDefaults.sforcedecimals),\n        decimalseparator: pluck(G.decimalseparator, numberFormatDefaults.decimalseparator),\n        thousandseparator: pluck(G.thousandseparator, numberFormatDefaults.thousandseparator),\n        thousandseparatorposition: n.thousandseparatorposition.concat(),\n        indecimalseparator: pluck(G.indecimalseparator, numberFormatDefaults.indecimalseparator),\n        inthousandseparator: pluck(G.inthousandseparator, numberFormatDefaults.inthousandseparator),\n        scalerecursively: w,\n        maxscalerecursion: z,\n        scaleseparator: C\n      }, o = extend2({}, q), o.decimalprecision = parseInt(pluck(G.sdecimals, G.decimals, G.syaxisvaluedecimals, numberFormatDefaults.sdecimals), 10), o.forcedecimals = pluck(G.sforcedecimals, G.forcedecimals, G.forcesyaxisvaluedecimals, numberFormatDefaults.sforcedecimals), o.cacheStore = [], (!I.useScaleRecursively || (q.numberscalevalue && q.numberscalevalue.length) != (q.numberscaleunit && q.numberscaleunit.length)) && (q.scalerecursively = w = 0), /^(bubble|scatter|selectscatter|zoomscatter)$/ig.test(H) && (p.formatnumber = pluck(G.yformatnumber, p.formatnumber), p.formatnumberscale = pluck(G.yformatnumberscale, p.formatnumberscale), p.forcenumberscale = pluck(G.yforcenumberscale, p.forcenumberscale), p.defaultnumberscale = getFirstValue(G.ydefaultnumberscale, p.defaultnumberscale), p.numberscaleunit = pluck(g, p.numberscaleunit), p.numberscalevalue = pluck(k, p.numberscalevalue), p.numberprefix = pluck(G.ynumberprefix, p.numberprefix), p.numbersuffix = pluck(G.ynumbersuffix, p.numbersuffix), n.formatnumber = pluck(G.yformatnumber, n.formatnumber), n.formatnumberscale = pluck(G.yformatnumberscale, n.formatnumberscale), n.forcenumberscale = pluck(G.yforcenumberscale, n.forcenumberscale), n.defaultnumberscale = getFirstValue(G.ydefaultnumberscale, n.defaultnumberscale), n.numberscaleunit = pluck(G.ynumberscaleunit, n.numberscaleunit.concat()), n.numberscalevalue = pluck(G.ynumberscalevalue, n.numberscalevalue.concat()), n.numberprefix = pluck(G.ynumberprefix, n.numberprefix), n.numbersuffix = pluck(G.ynumbersuffix, n.numbersuffix)), /^(pie2d|pie3d|doughnut2d|doughnut3d|marimekko|pareto2d|pareto3d)$/.test(H) && (n.decimalprecision = pluck(G.decimals, TWOSTRING)), v && (n.numberscalevalue.push(1), n.numberscaleunit.unshift(n.defaultnumberscale), p.numberscalevalue.push(1), p.numberscaleunit.unshift(p.defaultnumberscale)), w && (q.numberscalevalue.push(1), q.numberscaleunit.unshift(q.defaultnumberscale), o.numberscalevalue.push(1), o.numberscaleunit.unshift(o.defaultnumberscale)), E.Y[0] = {\n        yAxisLabelConf: p,\n        dataLabelConf: n\n      }, E.Y[1] = {\n        yAxisLabelConf: q,\n        dataLabelConf: o\n      }, E.paramLabels = n, E.param1 = p, E.param2 = q, E.paramLabels2 = o), E.paramX = {\n        cacheStore: [],\n        formatnumber: pluck(G.xformatnumber, r.formatnumber),\n        formatnumberscale: pluck(G.xformatnumberscale, r.formatnumberscale),\n        forcenumberscale: pluck(G.xforcenumberscale, r.forcenumberscale),\n        defaultnumberscale: getFirstValue(G.xdefaultnumberscale, r.defaultnumberscale),\n        numberscaleunit: pluck(e, r.numberscaleunit.concat()),\n        numberscalevalue: pluck(i, r.numberscalevalue.concat()),\n        numberprefix: pluck(G.xnumberprefix, r.numberprefix),\n        numbersuffix: pluck(G.xnumbersuffix, r.numbersuffix),\n        decimalprecision: parseInt(pluck(G.xaxisvaluedecimals, G.xaxisvaluesdecimals, r.decimalprecision, 2), 10),\n        forcedecimals: pluck(G.forcexaxisvaluedecimals, 0),\n        decimalseparator: r.decimalseparator,\n        thousandseparator: r.thousandseparator,\n        thousandseparatorposition: r.thousandseparatorposition.concat(),\n        indecimalseparator: r.indecimalseparator,\n        inthousandseparator: r.inthousandseparator,\n        scalerecursively: x,\n        maxscalerecursion: A,\n        scaleseparator: D\n      }, E.paramLegend = extend2(extend2({}, r), {\n        cacheStore: [],\n        decimalprecision: parseInt(pluckNumber(G.legendvaluedecimals, r.decimalprecision, 2), 10),\n        forcedecimals: pluckNumber(G.legendvalueforcedecimals, r.forcedecimals, 0),\n        formatnumberscale: pluck(G.legendvalueformatnumberscale, r.formatnumberscale),\n        forcenumberscale: pluck(G.legendvalueforcenumberscale, r.forcenumberscale),\n        formatnumber: pluck(G.legendvalueformatnumber, r.formatnumber)\n      }), v && (E.paramLegend.numberscalevalue.push(1), E.paramLegend.numberscaleunit.unshift(E.paramLegend.defaultnumberscale)), I.useScaleRecursively && (E.paramX.numberscalevalue && E.paramX.numberscalevalue.length) == (E.paramX.numberscaleunit && E.paramX.numberscaleunit.length) || (E.paramX.scalerecursively = x = 0), x && (E.paramX.numberscalevalue.push(1), E.paramX.numberscaleunit.unshift(E.paramX.defaultnumberscale)), E.paramScale = {\n        cacheStore: [],\n        formatnumber: pluck(G.tickformatnumber, r.formatnumber),\n        formatnumberscale: pluck(G.tickformatnumberscale, r.formatnumberscale),\n        forcenumberscale: pluck(G.tickforcenumberscale, r.forcenumberscale),\n        defaultnumberscale: getFirstValue(G.tickdefaultnumberscale, r.defaultnumberscale),\n        numberscaleunit: pluck(f, r.numberscaleunit.concat()),\n        numberscalevalue: pluck(j, r.numberscalevalue.concat()),\n        numberprefix: pluck(G.ticknumberprefix, r.numberprefix),\n        numbersuffix: pluck(G.ticknumbersuffix, r.numbersuffix),\n        decimalprecision: parseInt(pluck(G.tickvaluedecimals, r.decimalprecision, TWOSTRING), 10),\n        forcedecimals: pluck(G.forcetickvaluedecimals, r.forcedecimals, 0),\n        decimalseparator: r.decimalseparator,\n        thousandseparator: r.thousandseparator,\n        thousandseparatorposition: r.thousandseparatorposition.concat(),\n        indecimalseparator: r.indecimalseparator,\n        inthousandseparator: r.inthousandseparator,\n        scalerecursively: v,\n        maxscalerecursion: y,\n        scaleseparator: B\n      }, v && (E.paramScale.numberscalevalue.push(1), E.paramScale.numberscaleunit.unshift(E.paramScale.defaultnumberscale)), E.timeConf = {\n        inputDateFormat: pluck(G.inputdateformat, G.dateformat, 'mm/dd/yyyy'),\n        outputDateFormat: pluck(G.outputdateformat, G.inputdateformat, G.dateformat, 'mm/dd/yyyy'),\n        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        daySuffix: ['', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'st']\n      }, E.cleaneValueCacheStore = {}, E.percentStrCacheStore = {};\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var a = this;\n      a.Y && delete a.Y, a.cleaneValueCacheStore && delete a.cleaneValueCacheStore, a.percentStrCacheStore && delete a.percentStrCacheStore, a.paramLabels && delete a.paramLabels, a.param1 && delete a.param1, a.param2 && delete a.param2, a.paramLabels2 && delete a.paramLabels2, a.csConf && delete a.csConf, a.chart && delete a.chart, a.baseConf && delete a.baseConf, a.timeConf && delete a.timeConf, a.paramX && delete a.paramX, a.paramScale && delete a.paramScale;\n    }\n  }, {\n    key: \"parseMLAxisConf\",\n    value: function parseMLAxisConf(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j,\n          k = this.baseConf,\n          l = this.csConf,\n          m = pluckNumber(a.scalerecursively, k.scalerecursively),\n          n = pluckNumber(a.maxscalerecursion, k.maxscalerecursion),\n          o = getValidValue(a.scaleseparator, k.scaleseparator);\n      if (b = pluckNumber(b, this.Y.length), getValidValue(a.numberscaleunit) && (d = a.numberscaleunit.split(COMMASTRING)), getValidValue(a.numberscalevalue) && (e = a.numberscalevalue.split(COMMASTRING)), n || (n = -1), getValidValue(a.thousandseparatorposition)) for (g = a.thousandseparatorposition.split(COMMASTRING), h = g.length, j = numberFormatDefaults.thousandseparatorposition[0]; h--;) {\n        i = pluckNumber(mathAbs(g[h])), i ? j = i : i = j, g[h] = i;\n      }\n      c = {\n        cacheStore: [],\n        formatnumber: pluck(a.formatnumber, k.formatnumber),\n        formatnumberscale: pluck(a.formatnumberscale, k.formatnumberscale),\n        forcenumberscale: pluck(a.forcenumberscale, k.forcenumberscale),\n        defaultnumberscale: getFirstValue(a.defaultnumberscale, k.defaultnumberscale),\n        numberscaleunit: pluck(d, k.numberscaleunit).concat(),\n        numberscalevalue: pluck(e, k.numberscalevalue).concat(),\n        numberprefix: getFirstValue(a.numberprefix, k.numberprefix),\n        numbersuffix: getFirstValue(a.numbersuffix, k.numbersuffix),\n        forcedecimals: pluck(a.forcedecimals, k.forcedecimals),\n        decimalprecision: parseInt(a.decimals === AUTOSTRING ? l.decimalprecision : pluck(a.decimals, k.decimalprecision), 10),\n        decimalseparator: pluck(a.decimalseparator, k.decimalseparator),\n        thousandseparator: pluck(a.thousandseparator, k.thousandseparator),\n        thousandseparatorposition: pluck(g, k.thousandseparatorposition),\n        indecimalseparator: getFirstValue(a.indecimalseparator, k.indecimalseparator),\n        inthousandseparator: getFirstValue(a.inthousandseparator, k.inthousandseparator),\n        scalerecursively: m,\n        maxscalerecursion: n,\n        scaleseparator: o\n      }, this.useScaleRecursively && (c.numberscalevalue && c.numberscalevalue.length) == (c.numberscaleunit && c.numberscaleunit.length) || (c.scalerecursively = m = 0), f = {\n        cacheStore: [],\n        formatnumber: c.formatnumber,\n        formatnumberscale: c.formatnumberscale,\n        forcenumberscale: c.forcenumberscale,\n        defaultnumberscale: c.defaultnumberscale,\n        numberscaleunit: c.numberscaleunit.concat(),\n        numberscalevalue: c.numberscalevalue.concat(),\n        numberprefix: c.numberprefix,\n        numbersuffix: c.numbersuffix,\n        decimalprecision: parseInt(pluck(a.yaxisvaluedecimals, c.decimalprecision, 2), 10),\n        forcedecimals: pluck(a.forceyaxisvaluedecimals, c.forcedecimals),\n        decimalseparator: c.decimalseparator,\n        thousandseparator: c.thousandseparator,\n        thousandseparatorposition: c.thousandseparatorposition.concat(),\n        indecimalseparator: c.indecimalseparator,\n        inthousandseparator: c.inthousandseparator,\n        scalerecursively: m,\n        maxscalerecursion: n,\n        scaleseparator: o\n      }, m && (c.numberscalevalue.push(1), c.numberscaleunit.unshift(c.defaultnumberscale), f.numberscalevalue.push(1), f.numberscaleunit.unshift(f.defaultnumberscale)), this.Y[b] = {\n        dataLabelConf: c,\n        yAxisLabelConf: f\n      };\n    }\n  }, {\n    key: \"percentValue\",\n    value: function percentValue(a) {\n      var b,\n          c = this.percentStrCacheStore[a];\n      return c === UNDEF && (b = isNaN(this.paramLabels.decimalprecision) ? '2' : this.paramLabels.decimalprecision, c = this.percentStrCacheStore[a] = formatCommas(formatDecimals(a, b, this.paramLabels.forcedecimals), this.paramLabels.decimalseparator, this.paramLabels.thousandseparator, this.paramLabels.thousandseparatorposition) + '%'), c;\n    }\n  }, {\n    key: \"getCleanValue\",\n    value: function getCleanValue(a, b) {\n      var c,\n          d = this.cleaneValueCacheStore[a];\n      return (d === UNDEF || b) && (c = convertNumberSeps(a, this.baseConf), this.cleaneValueCacheStore[a] = d = isNaN(c) ? null : b ? mathAbs(c) : c), d;\n    }\n  }, {\n    key: \"dataLabels\",\n    value: function dataLabels(a, b) {\n      var c,\n          d = this.Y[b] || (b ? this.Y[1] : this.Y[0]);\n      return d = d && d.dataLabelConf || this.baseConf, c = d.cacheStore[a], c === UNDEF && (c = d.cacheStore[a] = formatNumber(a, d)), c;\n    }\n  }, {\n    key: \"yAxis\",\n    value: function yAxis(a, b) {\n      var c,\n          d = this.Y[b] || (b ? this.Y[1] : this.Y[0]);\n      return d = d && d.yAxisLabelConf || this.baseConf, c = d.cacheStore[a], c === UNDEF && (c = d.cacheStore[a] = formatNumber(a, d, !0)), c;\n    }\n  }, {\n    key: \"xAxis\",\n    value: function xAxis(a) {\n      var b = this.paramX.cacheStore[a];\n      return b === UNDEF && (b = this.paramX.cacheStore[a] = formatNumber(a, this.paramX, !0)), b;\n    }\n  }, {\n    key: \"sYAxis\",\n    value: function sYAxis(a) {\n      var b,\n          c = this.Y[1];\n      return c = c && c.yAxisLabelConf || this.baseConf, b = c.cacheStore[a], b === UNDEF && (b = c.cacheStore[a] = formatNumber(a, c)), b;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(a) {\n      var b = this.paramScale.cacheStore[a];\n      return b === UNDEF && (b = this.paramScale.cacheStore[a] = formatNumber(a, this.paramScale)), b;\n    }\n  }, {\n    key: \"legendValue\",\n    value: function legendValue(a) {\n      var b = this.paramLegend.cacheStore[a];\n      return b === UNDEF && (b = this.paramLegend.cacheStore[a] = formatNumber(a, this.paramLegend)), b;\n    }\n  }, {\n    key: \"legendPercentValue\",\n    value: function legendPercentValue(a) {\n      var b,\n          c = this.percentStrCacheStore[a],\n          d = this.paramLegend;\n      return c === UNDEF && (b = isNaN(d.decimalprecision) ? '2' : d.decimalprecision, c = this.percentStrCacheStore[a] = formatCommas(formatDecimals(a, b, d.forcedecimals), d.decimalseparator, d.thousandseparator, d.thousandseparatorposition) + '%'), c;\n    }\n  }, {\n    key: \"getDateValue\",\n    value: function getDateValue(a) {\n      var b, c, d, e, f;\n      return a && !/\\//.test(this.timeConf.inputDateFormat) && (a = a.replace(new RegExp(this.timeConf.inputDateFormat.replace(/[a-z]/ig, BLANK).slice(0, 1), 'g'), '/')), a = /^dd/.test(this.timeConf.inputDateFormat) && a && a.replace(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})/, '$2/$1/$3') || a, b = new Date(a), f = b.getTime(), !f && a && /\\:/.test(a) && (a = a.split(':'), c = pluckNumber(a[0], 0), d = pluckNumber(a[1], 0), e = pluckNumber(a[2], 0), c = 23 < c ? 24 === c && 0 === d && 0 === e ? c : 23 : c, d = 59 < d ? 59 : d, e = 59 < e ? 59 : e, b = new Date(), b.setHours(c), b.setMinutes(d), b.setSeconds(e), f = b.getTime()), {\n        ms: f,\n        date: b\n      };\n    }\n  }, {\n    key: \"getFormattedDate\",\n    value: function getFormattedDate(a, b) {\n      var c = 'object' == typeof a && a || new Date(a),\n          d = this.timeConf,\n          e = pluck(b, d.outputDateFormat),\n          f = c.getFullYear(),\n          g = c.getMonth(),\n          h = c.getDate(),\n          i = c.getDay(),\n          j = c.getMinutes(),\n          k = c.getSeconds(),\n          l = c.getHours();\n      return j = 9 < j ? BLANK + j : ZEROSTRING + j, k = 9 < k ? BLANK + k : ZEROSTRING + k, l = 9 < l ? BLANK + l : ZEROSTRING + l, e.match(/dnl/) && (e = e.replace(/dnl/ig, d.days[i])), e.match(/dns/) && (e = e.replace(/dns/ig, d.days[i] && d.days[i].substr(0, 3))), e.match(/dd/) && (e = e.replace(/dd/ig, h)), e.match(/mnl/) && (e = e.replace(/mnl/ig, d.months[g])), e.match(/mns/) && (e = e.replace(/mns/ig, d.months[g] && d.months[g].substr(0, 3))), e.match(/mm/) && (e = e.replace(/mm/ig, g + 1)), e.match(/yyyy/) && (e = e.replace(/yyyy/ig, f)), e.match(/yy/) && (e = e.replace(/yy/ig, (f % 1e3 % 100 + '').replace(/^(\\d)$/, '0$1'))), e.match(/hh12/) && (e = e.replace(/hh12/ig, l % 12 || 12)), e.match(/hh/) && (e = e.replace(/hh/ig, l)), e.match(/mn/) && (e = e.replace(/mn/ig, j)), e.match(/ss/) && (e = e.replace(/ss/ig, k)), e.match(/ampm/) && (e = e.replace(/ampm/ig, 12 > l ? 'AM' : 'PM')), e.match(/ds/) && (e = e.replace(/ds/ig, d.daySuffix[h])), e;\n    }\n  }]);\n\n  return NumberFormatter;\n}();\n\nformatNumber = function formatNumber(a, b, c) {\n  var d,\n      e,\n      f,\n      g,\n      h,\n      j,\n      k,\n      l,\n      m,\n      n,\n      o,\n      p = Math.abs;\n\n  if (null !== a) {\n    if (a = +a, d = a + BLANK, e = 1 == b.formatnumberscale ? b.defaultnumberscale : BLANK, m = d.split(DECIMALSTRING)[1], n = m ? m.length : b.forcedecimals ? TWOSTRING : BLANK, 1 == b.formatnumberscale && (o = formatNumberScale(a, b.defaultnumberscale, b.numberscalevalue, b.numberscaleunit, b.scalerecursively, b.forcenumberscale), d = o.value, a = o.value, e = o.scale), b.scalerecursively && 0 !== b.formatnumberscale && '0' !== b.formatnumberscale) {\n      if (f = o.value, g = o.scale, h = -1 == b.maxscalerecursion ? f.length : Math.min(f.length, b.maxscalerecursion), 1 == b.formatnumber) for (d = '', l = 0; l < h; l++) {\n        j = 0 === l ? f[l] : p(f[l]), k = j + BLANK, l == h - 1 && (k = formatDecimals(j, pluck(b.decimalprecision, n), b.forcedecimals)), d = d + formatCommas(k, b.decimalseparator, b.thousandseparator, b.thousandseparatorposition) + g[l] + (l < h - 1 ? b.scaleseparator : '');\n      } else for (d = '', l = 0; l < h; l++) {\n        d = d + (0 === l ? f[l] : p(f[l]) + BLANK) + g[l] + (l < h - 1 ? b.scaleseparator : '');\n      }\n      d = (b.numberprefix || BLANK) + d + (b.numbersuffix || BLANK);\n    } else 1 == b.formatnumber && (d = formatDecimals(a, pluck(b.decimalprecision, n), b.forcedecimals), d = formatCommas(d, b.decimalseparator, b.thousandseparator, b.thousandseparatorposition, c)), d = (b.numberprefix || BLANK) + d + e + (b.numbersuffix || BLANK);\n\n    return d;\n  }\n}, formatNumberScale = function formatNumberScale(a, b, c, d, e, f) {\n  var g,\n      h,\n      j,\n      k,\n      l = Math.abs,\n      m = {},\n      n = b,\n      o = 0,\n      p = [],\n      q = [];\n\n  if (f = pluckNumber(f) || 0, e) {\n    for (g = pluckNumber(c[0]) || 1000, o = 0; o < c.length; o++) {\n      if (j = pluckNumber(c[o]) || 1000, l(+a) >= j && o < c.length - 1) k = a % j, a = (a - k) / j, 0 == o && 0 !== k && d[o] === BLANK && f ? (p.push(k / g), q.push(d[1] || BLANK)) : 0 !== k && (1 == o && b === BLANK && f ? (h = k + (p.length ? p.pop() : 0), q.pop(), p.push(h)) : p.push(k), q.push(d[o]));else {\n        0 == o && b === BLANK && f ? (a = +a / g, p.push(a), q.push(d[1] || BLANK)) : (1 == o && b === BLANK && f ? (h = a + (p.length ? p.pop() : 0), q.pop(), p.push(h)) : p.push(a), q.push(d[o]));\n        break;\n      }\n    }\n\n    p.reverse(), q.reverse(), m.value = p, m.scale = q;\n  } else {\n    if (c.length === d.length) for (o = 0; o < c.length; o++) {\n      if (j = pluckNumber(c[o]) || 1000, j && l(+a) >= j) n = d[o] || BLANK, a = +a / j;else {\n        0 == o && b === BLANK && f && (n = d[0] || BLANK, a = +a / j);\n        break;\n      }\n    }\n    m.value = a, m.scale = n;\n  }\n\n  return m;\n}, formatDecimals = function formatDecimals(a, b, c) {\n  var d, e, f, g, h;\n  if (0 >= b) return mathRound(a) + BLANK;\n  if (isNaN(b)) return a += BLANK, 12 < a.length && -1 != a.indexOf(DECIMALSTRING) && (b = 12 - a.split(DECIMALSTRING)[0].length, d = mathPow(10, b), e = mathRound(a * d) / d + BLANK, a = e), a;\n  if (d = mathPow(10, b), e = mathRound(a * d) / d + BLANK, 1 == c) for (-1 == e.indexOf(DECIMALSTRING) && (e += '.0'), f = e.split(DECIMALSTRING), g = b - f[1].length, h = 1; h <= g; h++) {\n    e += ZEROSTRING;\n  }\n  return e;\n}, formatCommas = function formatCommas(a, b, c, d, e) {\n  var f,\n      g,\n      h,\n      i,\n      j = +a,\n      k = BLANK,\n      l = !1,\n      m = BLANK,\n      n = BLANK,\n      o = 0,\n      p = 0;\n  if (isNaN(j)) return BLANK;\n  if (1000000000000000 < j) return f = e ? 1 : 14, j.toExponential(f);\n  if (o = 0, p = a.length, -1 != a.indexOf(DECIMALSTRING) && (k = a.substring(a.indexOf(DECIMALSTRING) + 1, a.length), p = a.indexOf(DECIMALSTRING)), 0 > j && (l = !0, o = 1), m = a.substring(o, p), g = m.length, h = d.length - 1, i = d[h], g < i) n = m;else for (; g >= i;) {\n    n = (g - i ? c : BLANK) + m.substr(g - i, i) + n, g -= i, i = 0 >= (h -= 1) ? d[0] : d[h], g < i && (n = m.substring(g, 0) + n);\n  }\n  return k != BLANK && (n = n + b + k), !0 == l && (n = MINUSSTR + n), n;\n}, convertNumberSeps = function convertNumberSeps(a, b) {\n  return a += BLANK, b._REGinthousandseparator && (a = a.replace(b._REGinthousandseparator, BLANK)), b._REGindecimalseparator && (a = a.replace(b._REGindecimalseparator, DECIMALSTRING)), a = parseFloat(a), isFinite(a) ? a : NaN;\n};\nexport default NumberFormatter;","map":null,"metadata":{},"sourceType":"module"}