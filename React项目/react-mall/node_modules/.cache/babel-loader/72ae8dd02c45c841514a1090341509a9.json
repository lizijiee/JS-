{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport Base from './input-base';\nimport { getPosition, pluckNumber, isIE, hasSVG } from '../../../fc-core/src/lib';\nimport { priorityList } from '../../../fc-core/src/schedular';\nimport { getDep } from '../../../fc-core/src/dependency-manager';\nvar UNDEF,\n    math = Math,\n    mathMin = math.min,\n    mathMax = math.max,\n    mathAbs = math.abs,\n    TRACKER_FILL = 'rgba(255,0,0,' + (isIE ? .002 : 1e-6) + ')';\n\nvar InputDragPin =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(InputDragPin, _Base);\n\n  function InputDragPin() {\n    var _this;\n\n    _classCallCheck(this, InputDragPin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputDragPin).call(this));\n\n    var a = _assertThisInitialized(_this);\n\n    a.controlArr = [{\n      nativeInteraction: ['fc-dragstart'],\n      callback: a.dragstart.bind(a),\n      component: a\n    }, {\n      nativeInteraction: ['fc-dragmove'],\n      callback: a.dragmove.bind(a),\n      component: a\n    }, {\n      nativeInteraction: ['fc-dragend'],\n      callback: a.dragend.bind(a),\n      component: a\n    }], a.toggle = a.toggle.bind(a);\n    return _this;\n  }\n\n  _createClass(InputDragPin, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'dragPin';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(InputDragPin.prototype), \"configure\", this).call(this);\n\n      var a = this,\n          b = a.getFromEnv('chartConfig'),\n          c = a.getFromEnv('dataSource').chart,\n          d = a.getLinkedParent(),\n          e = a.config;\n      e.attr = e.attr || {\n        stroke: '#3399ff',\n        fill: '#b9d5f1',\n        \"stroke-width\": 0\n      }, e.pinAttr = e.pinAttr || {\n        \"stroke-width\": 0,\n        stroke: 'none',\n        fill: '#b9d5f1',\n        \"shape-rendering\": 'crisp'\n      }, e.borderWidth = b.borderWidth || (b.borderWidth = pluckNumber(c.showborder, 1) ? pluckNumber(c.borderthickness, 1) : 0), a.config.skipGraphics || a.setLinkedItem('button', a.createButton({\n        icon: 'pinModeIcon',\n        tooltext: a.config.tooltext || 'Pin mode',\n        handlers: {\n          click: a.toggle\n        },\n        state: 'activated'\n      })), d.registerDependancy([{\n        derivedInteraction: ['zoomin', 'zoomout'],\n        callback: a.dependancyFn,\n        component: a\n      }]), a.disable(UNDEF, !1);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(a, b) {\n      var c = this,\n          d = c.config;\n      !0 !== d.enabled && (d.enabled = !0, d.state = 'pressed', c.fireEvent('pinenabled'), c.setControl(), !b && c.getFromEnv('chart').fireChartInstanceEvent('zoommodechanged', {\n        pinModeActive: !0\n      }, a && a.originalEvent));\n    }\n  }, {\n    key: \"dependancyFn\",\n    value: function dependancyFn(a) {\n      ('zoomin' === a.type || 'zoomout' === a.type) && this.disable(a);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a,\n          b = this,\n          c = b.config;\n      b.createPin(), b.config.pinElemVisible && b.addJob('resizePinElem', function () {\n        a = b.getFromEnv('xAxis')[0], b.pinRangePixels(a.getPixel(c.boxStartValue), a.getPixel(c.boxEndValue));\n      }, priorityList.postRender);\n    }\n  }, {\n    key: \"_setConfig\",\n    value: function _setConfig() {\n      var a = this,\n          b = a.getFromEnv('chart'),\n          c = a.getFromEnv('chartConfig'),\n          d = a.config,\n          e = Object.assign({}, d.attr || {}),\n          f = e['stroke-width'] = pluckNumber(e.strokeWidth, e['stroke-width'], 1),\n          g = b.getFromEnv('chart-container'),\n          h = getPosition(g, b);\n      d.zoomX = 'horizontal' === d.orientation || 'both' === d.orientation, d.zoomY = 'vertical' === d.orientation || 'both' === d.orientation, d.canvasY = c.canvasTop, d.canvasX = c.canvasLeft, d.canvasW = c.canvasWidth, d.canvasH = c.canvasHeight, d.canvasX2 = c.canvasLeft + c.canvasWidth, d.canvasY2 = c.canvasTop + c.canvasHeight, d.strokeWidth = f, d.chartPosLeft = h.left, d.chartPosTop = h.top;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable(a, b) {\n      var c = this,\n          d = c.config,\n          e = c.getContainer('pingroup'),\n          f = c.getGraphicalElement('pintracker');\n      !1 !== d.enabled && (d.enabled = !1, d.state = 'activated', e && e.hide(), f && f.hide(), c.fireEvent('pindisabled'), !b && c.getFromEnv('chart').fireChartInstanceEvent('zoommodechanged', {\n        pinModeActive: !1\n      }, a && a.originalEvent), c.setControl(), d.pinElemVisible = !1);\n    }\n  }, {\n    key: \"setControl\",\n    value: function setControl() {\n      var a = this,\n          b = a.getLinkedParent(),\n          c = a.controlArr,\n          d = a.getLinkedItem('button');\n      b.releaseControl(c), a.isEnabled() && b.getControl(c), d && d.setCurrentState(a.config.state);\n    }\n  }, {\n    key: \"createPin\",\n    value: function createPin() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f = this,\n          g = f.config,\n          h = f.getFromEnv('chart'),\n          i = f.getFromEnv('chartConfig'),\n          j = f.getFromEnv('animationManager'),\n          k = i.canvasTop,\n          l = i.canvasBottom,\n          m = i.canvasHeight,\n          n = i.canvasLeft,\n          o = g.borderWidth,\n          p = i['clip-pinrect'],\n          q = f.getContainer('pingroup'),\n          r = f.getContainer('pinElemGroup'),\n          s = f.getGraphicalElement('pinrect'),\n          t = f.getGraphicalElement('pintracker');\n      d = i._visw = i.canvasWidth, e = i._visx = i.canvasLeft, a = getDep('redraphael', 'plugin').crispBound(0, k - l, 0, m, o), p = i['clip-pinrect'] = [a.x, k, a.width, a.height], q || f.addContainer('pingroup', q = j.setAnimation({\n        el: 'group',\n        finalAttr: {\n          name: 'zoompin'\n        },\n        component: f,\n        label: 'group'\n      }).insertBefore(h.getChildContainer('plotGroup')).hide()), q.transform(i._pingrouptransform = ['T', e, l]), r || f.addContainer('pinElemGroup', r = j.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'zoompinelements'\n        },\n        component: f,\n        container: q,\n        label: 'group'\n      })), f.config.pinAttr.x = 0, f.config.pinAttr.y = k - l, f.config.pinAttr.width = d, f.config.pinAttr.height = m, b = j.setAnimation({\n        el: s || 'rect',\n        attr: f.config.pinAttr,\n        container: q,\n        component: f\n      }), s || f.addGraphicalElement('pinrect', b), c = j.setAnimation({\n        el: t || 'rect',\n        attr: {\n          transform: q.transform(),\n          x: 0,\n          y: k - l,\n          width: 0,\n          height: m,\n          stroke: 'none',\n          fill: TRACKER_FILL,\n          cursor: hasSVG && 'ew-resize' || 'e-resize'\n        },\n        container: h.getChildContainer('trackerGroup'),\n        component: f\n      }).hide(), t || f.addGraphicalElement('pintracker', c), c.undrag(), c.drag(function (a) {\n        var b = a.data[0],\n            d = e + b + this.__pindragdelta,\n            g = this.__pinboundleft,\n            h = this.__pinboundright,\n            i = this.data('cliprect').slice(0);\n        d < g ? d = g : d > h && (d = h), q.transform(['T', d, l]), c.transform(q.transform()), hasSVG || (i[0] = i[0] + d - e - this.__pindragdelta, j.setAnimation({\n          el: q,\n          attr: {\n            \"clip-rect\": i\n          },\n          component: f\n        })), this.__pindragoffset = b;\n      }, function () {\n        this.__pinboundleft = 0 - p[0] + e + n, this.__pinboundright = this.__pinboundleft + d - p[2], this.data('cliprect', q.attr('clip-rect')), q._.clipispath = !0;\n      }, function () {\n        q._.clipispath = !1, this.__pindragdelta += this.__pindragoffset, delete this.__pindragoffset, delete this.__pinboundleft, delete this.__pinboundright;\n      });\n    }\n  }, {\n    key: \"pinRangePixels\",\n    value: function pinRangePixels(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          j,\n          k = Math.abs,\n          l = Math.round,\n          m = this,\n          n = m.getFromEnv('chart'),\n          o = n.config,\n          p = o.canvasLeft,\n          q = m.getFromEnv('xAxis')[0],\n          r = q.getLimit(),\n          s = r.max,\n          t = r.min,\n          u = m.getContainer('pingroup'),\n          v = m.getGraphicalElement('pinrect'),\n          w = m.getContainer('pinElemGroup'),\n          x = o['clip-pinrect'],\n          y = m.getFromEnv('animationManager'),\n          z = o._pingrouptransform,\n          A = [],\n          B = b - a,\n          C = m.getGraphicalElement('pintracker');\n\n      if (n.iterateComponents(function (a) {\n        a.getType && 'dataset' === a.getType() && A.push(a);\n      }), u && v) {\n        for (a === b && (u.hide(), C.hide()), j = A.length; j--;) {\n          d = A[j], d.fireEvent('createpinelements', {\n            group: w\n          });\n        }\n\n        x[0] = a + p, x[2] = B, y.setAnimation({\n          el: u,\n          attr: {\n            \"clip-rect\": x,\n            transform: z\n          },\n          component: m\n        }).show(), C.__pindragdelta = 0, C.show(), y.setAnimation({\n          el: C,\n          attr: {\n            transform: z,\n            x: a,\n            width: B\n          },\n          component: m\n        }), m.config.pinElemVisible = !0, e = l(q.getValue(a + p, {\n          wrtVisible: !0\n        })), f = l(q.getValue(b + p, {\n          wrtVisible: !0\n        })), e = e < t ? t : e, f = f > s ? s : f, g = q.getLabel(e).label, h = q.getLabel(f).label, c && n.fireChartInstanceEvent('pinned', {\n          startIndex: e || k(e),\n          endIndex: f || k(f),\n          startLabel: g,\n          endLabel: h\n        }, c.originalEvent);\n      }\n    }\n  }, {\n    key: \"dragstart\",\n    value: function dragstart(a) {\n      this._setConfig();\n\n      var b,\n          c,\n          d = this,\n          e = d.getFromEnv('chart'),\n          f = d.getFromEnv('animationManager'),\n          g = d.getFromEnv('chart-container'),\n          h = d.config,\n          i = h.attr,\n          j = d.getGraphicalElement('resizeBox'),\n          k = a.originalEvent,\n          l = h.layerX = (k.pageX || k.data[0]) - h.chartPosLeft,\n          m = h.layerY = (k.pageY || k.data[1]) - h.chartPosTop,\n          n = h.canvasY,\n          o = h.canvasX,\n          p = h.canvasX2,\n          q = h.canvasY2;\n      b = getPosition(g), h.chartPosLeft = b.left, h.chartPosTop = b.top, h.oy = m, h.ox = l, h.allowMove = !1, i.x = 0, i.y = 0, i.width = 0, i.height = 0, c = f.setAnimation({\n        el: j || 'rect',\n        attr: i,\n        container: e.getChildContainer('trackerGroup'),\n        component: d,\n        callback: function callback() {\n          this.show();\n        }\n      }), j || d.addGraphicalElement('resizeBox', c), l > o && l < p && m > n && m < q && (h.allowMove = !0), h.dragstartFn && 'function' == typeof h.dragstartFn && h.dragstartFn(a);\n    }\n  }, {\n    key: \"dragmove\",\n    value: function dragmove(a) {\n      this._setConfig();\n\n      var b = this,\n          c = b.config,\n          d = b.getFromEnv('animationManager'),\n          e = b.getGraphicalElement('resizeBox'),\n          f = a.originalEvent,\n          g = f.pageX || f.data[2],\n          h = f.page || f.data[3],\n          i = c.layerX = g - c.chartPosLeft,\n          j = c.layerY = h - c.chartPosTop,\n          k = i - c.ox,\n          l = j - c.oy,\n          m = c.ox,\n          n = c.oy,\n          o = c.zoomX,\n          p = c.zoomY,\n          q = c.strokeWidth,\n          r = c.canvasW,\n          s = c.canvasH,\n          t = c.canvasY,\n          u = c.canvasX,\n          v = c.canvasX2,\n          w = c.canvasY2;\n      d.setAnimationState('dragMove');\n      c.allowMove && (!c.isDragged && (c.isDragged = 1), k = -(m - mathMin(m - (m - mathMax(m + k, u)), v)), l = -(n - mathMin(n - (n - mathMax(n + l, t)), w)), d.setAnimation({\n        el: e,\n        attr: {\n          x: (o ? mathMin(m, m + k) : u) + .5 * q,\n          y: (p ? mathMin(n, n + l) : t) + .5 * q,\n          width: o ? mathAbs(k) : r,\n          height: p ? mathAbs(l) : s\n        },\n        component: b\n      }), c.dragmoveFn && 'function' == typeof c.dragmoveFn && c.dragmoveFn(a));\n    }\n  }, {\n    key: \"dragend\",\n    value: function dragend(a) {\n      this._setConfig();\n\n      var b,\n          c,\n          d,\n          e = this,\n          f = e.getFromEnv('chart'),\n          g = f.config,\n          h = e.config,\n          i = e.getFromEnv('xAxis')[0],\n          j = e.getGraphicalElement('resizeBox'),\n          k = h.bBox;\n      f.getFromEnv('animationManager').setAnimationState('dragEnd'), k = j.getBBox(), d = {\n        chart: f,\n        selectionLeft: k.x,\n        selectionTop: k.y,\n        selectionHeight: k.height,\n        selectionWidth: k.width,\n        originalEvent: a.originalEvent\n      }, h.isDragged && (h.dragendFn && 'function' == typeof h.dragendFn && h.dragendFn(a, d), h.isDragged = 0), j.hide(), delete h.oy, delete h.ox, b = k.x - g.canvasLeft, c = b + k.width;\n      b == c || (h.boxStartValue = i.getValue(b), h.boxEndValue = i.getValue(c), e.pinRangePixels(b, c, a));\n    }\n  }]);\n\n  return InputDragPin;\n}(Base);\n\nexport default InputDragPin;","map":null,"metadata":{},"sourceType":"module"}