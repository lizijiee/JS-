{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport ToolTip from './tooltip-component';\nimport { getTouchEvent as touchSafeEvent } from '../../../fc-core/src/lib';\nvar TOOL_TIP_KEY = '__FC_tooltipText',\n    MOVE_HANDLER = '__FC_onTooltipMove',\n    OUT_HANDLER = '__FC_onTooltipOut',\n    OVER_HANDLER = '__FC_onTooltipOver';\n\nvar moveHandler = function moveHandler(a, b, c) {\n  c = touchSafeEvent(c);\n  var d = b.universe.getBoundingClientRect(),\n      e = c.clientX,\n      f = c.clientY;\n  e -= d.left, f -= d.top, e += 11, f += 11, ToolTipController._draw.call(b, e, f, this.data(TOOL_TIP_KEY), a);\n},\n    outHandler = function outHandler(a) {\n  ToolTipController._hide(a);\n};\n\nvar ToolTipController =\n/*#__PURE__*/\nfunction () {\n  function ToolTipController(a) {\n    _classCallCheck(this, ToolTipController);\n\n    var b = this,\n        c = b.config = {};\n    b.universe = a, b.toolTips = {\n      implicit: [],\n      explicit: []\n    }, b.hideImplicitToolTip = function (a) {\n      var d = c.lastActiveToolip;\n      d && a.target !== d.getData('targetElement').node && (ToolTipController._hide(d), b.config.lastActiveToolip = void 0);\n    };\n  }\n\n  _createClass(ToolTipController, [{\n    key: \"_createToolTip\",\n    value: function _createToolTip(a) {\n      var b;\n      return b = new ToolTip(this.universe), this.toolTips[a].push(b), b;\n    }\n  }, {\n    key: \"enableToolTip\",\n    value: function enableToolTip(a, b) {\n      var c,\n          d = this,\n          e = d.toolTips.implicit,\n          f = e.length,\n          g = d.config;\n      return b ? a.data(TOOL_TIP_KEY) ? (0 < f && (c = e[f - 1], c.setUniverse(this.universe), c.getData('active') && c.show(b)), a.data(TOOL_TIP_KEY, b), d) : (c = d._getAvailableToolTip('implicit'), d.disableToolTip(a), a.data(TOOL_TIP_KEY, b), a.data(MOVE_HANDLER, moveHandler.bind(a, c, d)), a.data(OUT_HANDLER, outHandler.bind(a, c)), a.data(OVER_HANDLER, function (b) {\n        return function (f) {\n          d.draw(f, a.data(TOOL_TIP_KEY), c), c.setData('targetElement', b), g.lastActiveToolip = c;\n        };\n      }(a)), a.on('fc-mousemove', a.data(MOVE_HANDLER)), a.on('fc-mouseout', a.data(OUT_HANDLER)), a.on('fc-mouseover', a.data(OVER_HANDLER)), d) : (d.disableToolTip(a), d);\n    }\n  }, {\n    key: \"disableToolTip\",\n    value: function disableToolTip(a) {\n      var b = a.data(OUT_HANDLER),\n          c = a.data(MOVE_HANDLER),\n          d = a.data(OVER_HANDLER);\n      return c && a.off('fc-mousemove', c), b && a.off('fc-mouseout', b), d && a.off('fc-mouseover', d), a.removeData(TOOL_TIP_KEY), this;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(a, b, c) {\n      var d,\n          e,\n          f = this.universe.getBoundingClientRect();\n      return a = touchSafeEvent(a), d = a.clientX, e = a.clientY, c = c || this._getAvailableToolTip('explicit'), c.setStyle(this.config.tooltipStyle), c.setUniverse(this.universe), d -= f.left, e -= f.top, d += 11, e += 11, ToolTipController._draw.call(this, d, e, b, c), c;\n    }\n  }, {\n    key: \"drawAt\",\n    value: function drawAt(a, b, c, d) {\n      return d = d || this._getAvailableToolTip('explicit'), d.setStyle(this.config.tooltipStyle), ToolTipController._draw.call(this, a, b, c, d), d;\n    }\n  }, {\n    key: \"_getAvailableToolTip\",\n    value: function _getAvailableToolTip(a) {\n      var b,\n          c,\n          d = this.toolTips[a];\n\n      for (var e = 0, f = d.length; e < f; e++) {\n        if (b = d[e], c = !1 === b.getData('active'), c) return b;\n      }\n\n      return this._createToolTip(a);\n    }\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(a) {\n      var b = this,\n          c = b.config,\n          d = c.tooltipStyle || (c.tooltipStyle = {});\n\n      for (var e in a) {\n        d[e] = a[e];\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(a) {\n      return ToolTipController._hide(a, 'dispose'), this;\n    }\n  }, {\n    key: \"hideAll\",\n    value: function hideAll() {\n      var a,\n          b,\n          c = this;\n\n      for (a in c.toolTips) {\n        for (b = 0; b < c.toolTips[a].length; b++) {\n          ToolTipController._hide(c.toolTips[a][b], 'dispose');\n        }\n      }\n    }\n  }], [{\n    key: \"_draw\",\n    value: function _draw(a, b, c, d) {\n      d.setStyle(this.config.tooltipStyle), d.show(c), d.update(a, b);\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide(a, b) {\n      a && (b ? a.dispose() : a.hide());\n    }\n  }]);\n\n  return ToolTipController;\n}();\n\nexport default {\n  extension: ToolTipController,\n  name: 'ToolTipController',\n  type: 'plugin'\n};","map":null,"metadata":{},"sourceType":"module"}