{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport FormatSpecifier from './format-specifier';\nimport formatTypes from './format-types';\nimport formatTrim from './format-trim';\nimport { prefixExponent } from './format-prefix-auto';\n\nvar CHAR_CODE_0 = 48,\n    CHAR_CODE_9 = 57,\n    CHAR_CODE_DOT = 46,\n    isNil = function isNil(a) {\n  return 'undefined' == typeof a || null === a;\n};\n\nvar Formatter =\n/*#__PURE__*/\nfunction () {\n  function Formatter(a, b) {\n    _classCallCheck(this, Formatter);\n\n    var c = Math.max,\n        d = Math.min;\n    this.specifier = new FormatSpecifier(a), this.localeInfo = b;\n    var e = this.specifier.symbol;\n    this.fill = this.specifier.fill, this.align = this.specifier.align, this.sign = this.specifier.sign, this.zero = this.specifier.zero, this.width = this.specifier.width, this.comma = this.specifier.comma, this.precision = this.specifier.precision, this.trim = this.specifier.trim, this.type = this.specifier.type, 'n' === this.type ? (this.comma = !0, this.type = 'g') : !formatTypes[this.type] && (isNil(this.precision) && (this.precision = 12), this.trim = !0, this.type = 'g'), (this.zero || '0' === this.fill && '=' === this.align) && (this.zero = !0, this.fill = '0', this.align = '='), this.prefix = '$' === e ? this.localeInfo.prefix : '#' === e && /[boxX]/.test(this.type) ? '0' + this.type.toLowerCase() : '', this.suffix = '$' === e ? this.localeInfo.suffix : /[%p]/.test(this.type) ? this.localeInfo.percent : '', this.formatType = formatTypes[this.type], this.mayHaveSuffix = /[defgprs%]/.test(this.type), this.precision = isNil(this.precision) ? 6 : /[gprs]/.test(this.type) ? c(1, d(21, this.precision)) : c(0, d(20, this.precision)), this.setCustomPrefix(''), this.setCustomSuffix('');\n  }\n\n  _createClass(Formatter, [{\n    key: \"format\",\n    value: function format(a) {\n      var b,\n          d,\n          e,\n          f,\n          g,\n          h,\n          j = this.prefix,\n          k = this.suffix,\n          l = this.formatType;\n      if ('c' === this.type) k = l(a) + k, a = '';else if (a = +a, b = 0 > a, a = l(Math.abs(a), this.precision), this.trim && (a = formatTrim(a)), b && 0 == +a && (b = !1), j = b ? ('(' === this.sign ? this.sign : '-') + j : '-' === this.sign || '(' === this.sign ? '' + j : this.sign + j, k = 's' === this.type ? this.localeInfo.prefixes[8 + prefixExponent / 3] + k : '' + k, k += b && '(' === this.sign ? ')' : '', this.mayHaveSuffix) for (f = -1, g = a.length; ++f < g;) {\n        if (h = a.charCodeAt(f), h < CHAR_CODE_0 || h > CHAR_CODE_9) {\n          k = (h === CHAR_CODE_DOT ? this.localeInfo.decimal + a.slice(f + 1) : a.slice(f)) + k, a = a.slice(0, f);\n          break;\n        }\n      }\n\n      switch (this.comma && !this.zero && (a = this.localeInfo.group(a, 1 / 0)), d = j.length + a.length + k.length, e = d < this.width ? Array(this.width - d + 1).join(this.fill) : '', this.comma && this.zero && (a = this.localeInfo.group(e + a, e.length ? this.width - k.length : 1 / 0), e = ''), this.align) {\n        case '<':\n          a = j + a + k + e;\n          break;\n\n        case '=':\n          a = j + e + a + k;\n          break;\n\n        case '^':\n          d = e.length / 2, a = e.slice(0, d) + j + a + k + e.slice(d);\n          break;\n\n        default:\n          a = e + j + a + k;\n      }\n\n      return this.getCustomPrefix() + this.localeInfo.numerals(a) + this.getCustomSuffix();\n    }\n  }, {\n    key: \"setCustomPrefix\",\n    value: function setCustomPrefix(a) {\n      return this._customPrefix = a + '', this;\n    }\n  }, {\n    key: \"getCustomPrefix\",\n    value: function getCustomPrefix() {\n      return this._customPrefix;\n    }\n  }, {\n    key: \"setCustomSuffix\",\n    value: function setCustomSuffix(a) {\n      return this._customSuffix = a + '', this;\n    }\n  }, {\n    key: \"getCustomSuffix\",\n    value: function getCustomSuffix() {\n      return this._customSuffix;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.specifier.toString();\n    }\n  }]);\n\n  return Formatter;\n}();\n\nexport default Formatter;","map":null,"metadata":{},"sourceType":"module"}