{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport interpolateValue from '../utils/interpolators/value';\nimport interpolateRound from '../utils/interpolators/round';\nimport constant from '../utils/constant';\nimport enUS from '../../../../fc-utils/src/number-converter/locales/en-US';\nimport { NumberConverter } from '../../../../fc-utils/src/number-converter';\nvar count = 0;\nvar UNIT = [0, 1];\n\nfunction bimap(a, b, c, d) {\n  var e, f;\n  return a[0] > a[1] ? (e = c(a[1], a[0]), f = d(b[1], b[0])) : (e = c(a[0], a[1]), f = d(b[0], b[1])), function (a) {\n    return f(e(a));\n  };\n}\n\nfunction copyScale(a, b) {\n  return b.setInterpolate(a.getInterpolate()).setClamp(a.getClamp()).setDomain(a.getDomain()).setRange(a.getRange());\n}\n\nfunction deInterpolateLinear(a, b) {\n  a = +a, b = +b;\n  var c = b - a;\n  return c ? function (b) {\n    return (b - a) / c;\n  } : constant(c);\n}\n\nfunction deInterpolateClamp(a) {\n  return function (b, c) {\n    b = +b, c = +c;\n    var d = a(b, c);\n    return function (a) {\n      return a <= b ? 0 : a >= c ? 1 : d(a);\n    };\n  };\n}\n\nfunction reInterpolateClamp(a) {\n  return function (b, c) {\n    b = +b, c = +c;\n    var d = a(b, c);\n    return function (a) {\n      return 0 >= a ? b : 1 <= a ? c : d(a);\n    };\n  };\n}\n\nvar ScaleContinuous =\n/*#__PURE__*/\nfunction () {\n  function ScaleContinuous(a, b) {\n    _classCallCheck(this, ScaleContinuous);\n\n    this.domain = UNIT, this.range = UNIT, this.deInterpolate = a, this.reInterpolate = b, this.interpolate = interpolateValue, this.clamp = !1, this.input = null, this.output = null, this.locale = enUS, this._localeConverter = new NumberConverter(enUS), this._rescale(), this._id = 'scale_' + count++;\n  }\n\n  _createClass(ScaleContinuous, [{\n    key: \"_rescale\",\n    value: function _rescale() {\n      return this.input = null, this.output = null, this;\n    }\n  }, {\n    key: \"setDomain\",\n    value: function setDomain() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UNIT;\n      return this.domain = a.map(Number), this._rescale();\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this.domain.slice();\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UNIT;\n      return this.range = a.slice(), this._rescale();\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      return this.range.slice();\n    }\n  }, {\n    key: \"setInterpolate\",\n    value: function setInterpolate() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : interpolateValue;\n      return this.interpolate = a, this._rescale();\n    }\n  }, {\n    key: \"getInterpolate\",\n    value: function getInterpolate() {\n      return this.interpolate;\n    }\n  }, {\n    key: \"setClamp\",\n    value: function setClamp() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;\n      return this.clamp = !!a, this._rescale();\n    }\n  }, {\n    key: \"getClamp\",\n    value: function getClamp() {\n      return this.clamp;\n    }\n  }, {\n    key: \"rangeRound\",\n    value: function rangeRound() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UNIT;\n      return this.range = a.slice(), this.interpolate = interpolateRound, this._rescale();\n    }\n  }, {\n    key: \"getRangeValue\",\n    value: function getRangeValue(a) {\n      a = null === a ? void 0 : a;\n      var b = this.getClamp(),\n          c = b ? deInterpolateClamp(this.deInterpolate) : this.deInterpolate;\n      return this.output || (this.output = bimap(this.getDomain(), this.getRange(), c, this.interpolate)), this.output(+a);\n    }\n  }, {\n    key: \"getDomainValue\",\n    value: function getDomainValue(a) {\n      var b = this.getClamp(),\n          c = b ? reInterpolateClamp(this.reInterpolate) : this.reInterpolate;\n      return this.input || (this.input = bimap(this.getRange(), this.getDomain(), deInterpolateLinear, c)), this.input(+a);\n    }\n  }, {\n    key: \"setLocale\",\n    value: function setLocale() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : enUS;\n      return this.locale = a, this._localeConverter = new NumberConverter(a), this;\n    }\n  }, {\n    key: \"getLocale\",\n    value: function getLocale() {\n      return this.locale;\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this._id;\n    }\n  }]);\n\n  return ScaleContinuous;\n}();\n\nexport { copyScale, deInterpolateLinear, bimap };\nexport default ScaleContinuous;","map":null,"metadata":{},"sourceType":"module"}