{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { ComponentInterface } from '../../../fc-core/src/component-interface';\nimport { toRaphaelColor, hashify, parseUnsafeString, pluck, pluckNumber, BLANKSTRING, getFirstColor } from '../../../fc-core/src/lib';\nimport { addDep } from '../../../fc-core/src/dependency-manager';\nimport centerLabelAnimation from './center-label.animation';\nvar UNDEF,\n    HIDDEN = 'hidden',\n    VISIBLE = 'visible';\n\nfunction replaceMacros(a, b, c) {\n  if (a) for (var d, e = b.length || 0; e--;) {\n    d = new RegExp(b[e], 'gi'), a = a.replace(d, c[e]);\n  }\n  return a;\n}\n\naddDep({\n  name: 'centerLabelAnimation',\n  type: 'animationRule',\n  extension: centerLabelAnimation\n});\n\nvar CenterLabel =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(CenterLabel, _ComponentInterface);\n\n  function CenterLabel() {\n    _classCallCheck(this, CenterLabel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CenterLabel).apply(this, arguments));\n  }\n\n  _createClass(CenterLabel, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'centerLabel';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'centerLabel';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(a) {\n      var b = this.getFromEnv('chart-attrib'),\n          c = this.getFromEnv('number-formatter'),\n          d = a.dataLabelStyle,\n          e = this;\n      e.config = {\n        label: parseUnsafeString(pluck(b.defaultcenterlabel, '')),\n        font: pluck(b.centerlabelfont, d.fontFamily),\n        fontSize: pluckNumber(b.centerlabelfontsize, parseInt(d.fontSize, 10)),\n        color: getFirstColor(pluck(b.centerlabelcolor, b.valuefontcolor, a.style.inCanvasStyle.color, '555555')),\n        alpha: pluckNumber(b.centerlabelalpha, 100),\n        bold: pluckNumber(b.centerlabelbold, d.fontWeight),\n        italic: pluckNumber(b.centerlabelitalic, d.style),\n        bgColor: pluck(b.centerlabelbgcolor, ''),\n        bgAlpha: pluckNumber(b.centerlabelbgalpha, 100),\n        borderColor: pluck(b.centerlabelbordercolor, d.borderColor),\n        borderAlpha: pluckNumber(b.centerlabelborderalpha, 100),\n        borderThickness: pluckNumber(b.centerlabelborderthickness, d.borderThickness),\n        borderRadius: pluckNumber(b.centerlabelborderradius, d.borderRadius),\n        textPadding: pluckNumber(b.centerlabeltextpadding, d.borderPadding),\n        padding: pluckNumber(b.centerlabelpadding, 2),\n        bgOval: pluckNumber(b.centerlabelbgoval, 0),\n        shadow: pluckNumber(b.showcenterlabelshadow, 0),\n        hoverColor: b.centerlabelhovercolor && getFirstColor(pluck(b.centerlabelhovercolor)),\n        hoverAlpha: pluckNumber(b.centerlabelhoveralpha),\n        toolText: parseUnsafeString(pluck(b.centerlabeltooltext, BLANKSTRING))\n      }, e.addExtEventListener('datasetrollover', function (a) {\n        var b = a.sender.getFromEnv('dataSource'),\n            d = a.data,\n            f = pluck(replaceMacros(b.chart.centerlabel, ['\\\\$value', '\\\\$percentValue', '\\\\$displayValue', '\\\\$label'], [c.scale(d.value), d.pValue, d.displayValue, d.label]), '');\n        e.draw(f, !1);\n      }, this.getFromEnv('chart').getDatasets()[0]), e.addExtEventListener('datasetrollout', function (a) {\n        var b = a.sender.config.label,\n            c = pluck(b, '');\n        e.draw(c, !1);\n      }, this.getFromEnv('chart').getDatasets()[0]);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(a) {\n      var b,\n          c = this,\n          d = c.getFromEnv('chart'),\n          e = d.config.canvasLeft + .5 * d.config.canvasWidth,\n          f = d.config.canvasTop + .5 * d.config.canvasHeight,\n          g = d.getDatasets()[0].config.innerSize,\n          h = d.getDatasets()[0].config.innerSize,\n          i = d.getDatasets()[0],\n          j = i.config,\n          k = this.config,\n          l = c.getFromEnv('animationManager'),\n          m = c.getFromEnv('smartLabel'),\n          n = this.getGraphicalElement('centerLabel'),\n          o = n,\n          p = this.getGraphicalElement('centerLabelBg'),\n          q = d.getChildContainer('plotGroup'),\n          r = k.padding,\n          s = 2 * k.textPadding,\n          t = {\n        fontFamily: k.font,\n        fontSize: k.fontSize + 'px',\n        lineHeight: 1.2 * k.fontSize + 'px',\n        fontWeight: k.bold ? 'bold' : '',\n        fontStyle: k.italic ? 'italic' : ''\n      },\n          u = c.getFromEnv('toolTipController');\n      a = pluck(a, k.label), m.setStyle(t), m.useEllipsesOnOverflow(d.config.useEllipsesWhenOverflow), b = m.getSmartText(a, 1.414 * (.5 * g - r) - s, 1.414 * (.5 * h - r) - s), a ? (k.bgOval && (p = l.setAnimation({\n        el: p || 'circle',\n        attr: {\n          cx: e,\n          cy: f,\n          r: .5 * g - r,\n          visibility: VISIBLE,\n          container: q,\n          fill: hashify(k.bgColor),\n          \"fill-opacity\": k.bgAlpha / 100,\n          stroke: hashify(k.borderColor),\n          \"stroke-width\": k.borderThickness,\n          \"stroke-opacity\": k.borderAlpha / 100\n        },\n        component: c\n      })), o = l.setAnimation({\n        el: n || 'text',\n        component: c,\n        container: q,\n        css: t,\n        attr: {\n          x: e,\n          y: f,\n          text: b.text,\n          visibility: VISIBLE,\n          direction: d.config.textDirection,\n          fill: toRaphaelColor({\n            FCcolor: {\n              color: k.color,\n              alpha: k.alpha\n            }\n          }),\n          \"text-bound\": k.bgOval ? 'none' : [toRaphaelColor({\n            FCcolor: {\n              color: k.bgColor,\n              alpha: k.bgAlpha\n            }\n          }), toRaphaelColor({\n            FCcolor: {\n              color: k.borderColor,\n              alpha: k.borderAlpha\n            }\n          }), k.borderThickness, k.textPadding, k.borderRadius]\n        },\n        label: 'text'\n      }), u.enableToolTip(o, k.toolText || b.tooltext)) : (o && l.setAnimation({\n        el: o,\n        attr: {\n          visibility: HIDDEN\n        },\n        component: c\n      }), p && l.setAnimation({\n        el: p,\n        attr: {\n          visibility: HIDDEN\n        },\n        component: c\n      })), n ? o.attr('text') !== a && c.centerLabelChange(a) : (c.addEventListener('fc-mouseover', function () {\n        c._centerLabelRollover(d);\n      }), c.addEventListener('fc-mouseout', function () {\n        c._centerLabelRollout(d);\n      }), c.addEventListener('fc-click', function () {\n        c._centerLabelClick(d);\n      }), c.addGraphicalElement('centerLabel', o), c.addGraphicalElement('centerLabelBg', p)), j.lastCenterLabelConfig = k, j.centerLabelConfig = k;\n    }\n  }, {\n    key: \"centerLabelChange\",\n    value: function centerLabelChange(a) {\n      var b = this,\n          c = b.getFromEnv('chart'),\n          d = c.config,\n          e = b.getFromEnv('chartInstance'),\n          f = {\n        height: d.height,\n        width: d.width,\n        pixelHeight: c.getFromEnv('chartWidth'),\n        pixelWidth: c.getFromEnv('chartHeight'),\n        id: e.id,\n        renderer: e.args.renderer,\n        container: e.options.containerElement,\n        centerLabelText: a\n      };\n      c.fireChartInstanceEvent('centerLabelChanged', f);\n    }\n  }, {\n    key: \"_centerLabelRollover\",\n    value: function _centerLabelRollover(a) {\n      var b = a.config,\n          c = a.getFromEnv('chartInstance'),\n          d = this.config,\n          e = this,\n          f = {\n        height: b.height,\n        width: b.width,\n        pixelHeight: a.getFromEnv('chartWidth'),\n        pixelWidth: a.getFromEnv('chartHeight'),\n        id: c.id,\n        renderer: c.args.renderer,\n        container: c.options.containerElement,\n        centerLabelText: d && d.label\n      };\n      this.getFromEnv('paper').attr('text') && a.fireChartInstanceEvent('centerLabelRollover', f, UNDEF, e.hoverOnCenterLabel.bind(e, a));\n    }\n  }, {\n    key: \"_centerLabelRollout\",\n    value: function _centerLabelRollout(a) {\n      var b = a.config,\n          c = this,\n          d = a.getFromEnv('chartInstance'),\n          e = this.config,\n          f = {\n        height: b.height,\n        width: b.width,\n        pixelHeight: a.getFromEnv('chartWidth'),\n        pixelWidth: a.getFromEnv('chartHeight'),\n        id: d.id,\n        renderer: d.args.renderer,\n        container: d.options.containerElement,\n        centerLabelText: e && e.label\n      };\n      this.getFromEnv('paper').attr('text') && a.fireChartInstanceEvent('centerLabelRollout', f, UNDEF, c.hoverOffCenterLabel.bind(c, a));\n    }\n  }, {\n    key: \"_centerLabelClick\",\n    value: function _centerLabelClick(a) {\n      var b,\n          c = a.config,\n          d = a.getFromEnv('chartInstance'),\n          e = {\n        height: c.height,\n        width: c.width,\n        pixelHeight: a.getFromEnv('chartWidth'),\n        pixelWidth: a.getFromEnv('chartHeight'),\n        id: d.id,\n        renderer: d.args.renderer,\n        container: d.options.containerElement\n      };\n      b = this.config, e.centerLabelText = b && b.label, this.getFromEnv('paper').attr('text') && a.fireChartInstanceEvent('centerLabelClick', e);\n    }\n  }, {\n    key: \"hoverOnCenterLabel\",\n    value: function hoverOnCenterLabel(a) {\n      var b = a.getChildren('dataset')[0],\n          c = b.config,\n          d = c.lastCenterLabelConfig;\n      (d.hoverColor || d.hoverAlpha) && this.getGraphicalElement('centerLabel').attr({\n        fill: toRaphaelColor({\n          FCcolor: {\n            color: d.hoverColor || d.color,\n            alpha: d.hoverAlpha || d.alpha\n          }\n        })\n      });\n    }\n  }, {\n    key: \"hoverOffCenterLabel\",\n    value: function hoverOffCenterLabel(a) {\n      var b = a.getChildren('dataset')[0],\n          c = b.config,\n          d = c.lastCenterLabelConfig;\n      (d.hoverColor || d.hoverAlpha) && this.getGraphicalElement('centerLabel').attr({\n        fill: toRaphaelColor({\n          FCcolor: {\n            color: d.color,\n            alpha: d.alpha\n          }\n        })\n      });\n    }\n  }]);\n\n  return CenterLabel;\n}(ComponentInterface);\n\nexport { CenterLabel as default };","map":null,"metadata":{},"sourceType":"module"}