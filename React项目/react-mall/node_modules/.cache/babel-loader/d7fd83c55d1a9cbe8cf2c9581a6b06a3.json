{"ast":null,"code":"import { drawSvgOnCanvas, downloadCharts, browserDetails } from '../utils/lib-svg-to-canvas';\nimport { JpegToPdf, addImage, getDataUrl } from '../utils/jpeg-to-pdf';\nimport { pluck, pluckNumber, PROJECT_VERSION } from '../../../fc-core/src/lib';\nimport { EXPORTACTION, EXPORTMODE, EXPORTFORMAT, LOGMODE, createExportActionOldString, logCharts, cacheAllImages, replaceImagesWithNonDataUrl } from '../utils/export-utils';\nimport { triggerEvent } from '../../../fc-core/src/event-api';\nvar UNDEF,\n    FCGlobal,\n    win = window,\n    math = Math,\n    mathMax = math.max,\n    Image = win.Image,\n    isIOS = win.navigator.userAgent.match(/ (iPad|iPhone|iPod)/g),\n    IMAGEDATA = 'IMAGE-DATA',\n    DEFAULT_LOG_URL = 'https:' === win.location.protocol ? 'https://export.api3.fusioncharts.com/api/v1.0/logs' : 'http://export.api3.fusioncharts.com/api/v1.0/logs',\n    DEFAULT_EXPORT_URL = 'https:' === win.location.protocol ? 'https://export.api3.fusioncharts.com/' : 'http://export.api3.fusioncharts.com/',\n    BLANKSTRING = '';\n\nfunction batchExport() {\n  var a,\n      b,\n      c,\n      d,\n      e,\n      f,\n      g,\n      h,\n      j,\n      k = arguments[0],\n      l = k || {},\n      m = 0,\n      n = !1,\n      o = {\n    exportTargetWindow: pluck(l.exportTargetWindow, isIOS ? '_blank' : '_self'),\n    exportAction: function () {\n      var a;\n      return l.exportAction && 'string' == typeof l.exportAction ? (a = l.exportAction.toLowerCase(), 0 <= [EXPORTACTION.DOWNLOAD, EXPORTACTION.SAVE, EXPORTACTION.DOWNLOADSAVE].indexOf(a) ? a : EXPORTACTION.DOWNLOAD) : EXPORTACTION.DOWNLOAD;\n    }(),\n    exportFileName: pluck(l.exportFileName, 'FusionCharts'),\n    exportHandler: pluck(l.exportHandler, DEFAULT_EXPORT_URL),\n    exportParameters: pluck(l.exportParameters, BLANKSTRING),\n    exportFormat: pluck(l.exportFormat, EXPORTFORMAT.PNG),\n    exportCallback: pluck(l.exportCallback, BLANKSTRING),\n    exportAtClientSide: pluckNumber(l.exportAtClientSide, 1),\n    exportMode: function () {\n      var a;\n      return 'undefined' != typeof l.exportAtClientSide && (a = {\n        1: EXPORTMODE.AUTO,\n        0: EXPORTMODE.SERVER\n      }[l.exportAtClientSide]), a = l.exportMode || a || EXPORTMODE.AUTO, a = a.toLowerCase(), a;\n    }(),\n    logEnabled: pluckNumber(l.logEnabled, 0),\n    logMode: function () {\n      var a = l.logMode;\n      return 'undefined' != typeof a && 'string' == typeof a && a.toUpperCase() in LOGMODE ? LOGMODE[a.toUpperCase()] : LOGMODE.AUTO;\n    }(),\n    logHandler: pluck(l.logHandler, DEFAULT_LOG_URL)\n  },\n      p = o.exportFormat.toLowerCase(),\n      q = 0,\n      r = 0,\n      s = 5,\n      t = win.document,\n      u = FCGlobal.items,\n      v = function v(a) {\n    return !(a.match(/http:\\/\\/|https:\\/\\//) && /(http:\\/\\/|https:\\/\\/)([^\\/\\:]*)/.exec(a)[2] && win.location.hostname !== /(http:\\/\\/|https:\\/\\/)([^\\/\\:]*)/.exec(a)[2]);\n  },\n      w = function w(a, b, c, d) {\n    var e = a,\n        f = b;\n    return isNaN(e) && (e = pluckNumber(b, d) * (c / d)), isNaN(f) && (f = pluckNumber(a, c) * (d / c)), {\n      width: e,\n      height: f\n    };\n  },\n      x = function x(a, b, c) {\n    var d, e, f, g;\n    return c = c || o.exportAction, d = o.exportAction, e = createExportActionOldString(o.exportAction), f = ['exportfilename=' + o.exportFileName, 'exportformat=' + o.exportFormat, 'exportaction=' + e, 'exportactionnew=' + d, 'configuredexportaction=' + c, 'exportparameters=' + o].join('|'), g = !!o.logEnabled, o.logMode === LOGMODE.CLIENT && (g = !1), {\n      charttype: 'combined',\n      stream_type: a || '',\n      stream: b || '',\n      is_single_export: !1,\n      is_full_version: !1,\n      version: PROJECT_VERSION,\n      user_time_zone: -new Date().getTimezoneOffset(),\n      log_enabled: g,\n      parameters: f\n    };\n  },\n      y = function y() {\n    var a = o.exportAction;\n    return {\n      chartType: 'combined',\n      isSingleExport: !1,\n      isFullVersion: !1,\n      exportAction: a,\n      userTimeZone: -new Date().getTimezoneOffset(),\n      exportFileName: [o.exportFileName, o.exportFormat].join('.'),\n      exportFormat: o.exportFormat,\n      version: PROJECT_VERSION\n    };\n  },\n      z = function z(a) {\n    a === LOGMODE.CLIENT && logCharts(y(), o);\n  },\n      A = function A(a) {\n    var b, c, d;\n    triggerEvent('beforeexport', UNDEF, UNDEF, UNDEF, function () {\n      c = 'undefined' != typeof win.btoa && ('Chrome' === browserDetails.name || 'Firefox' === browserDetails.name || 'Edge' === browserDetails.name || 'ie' === browserDetails.name), o.exportMode === EXPORTMODE.CLIENT || o.exportMode === EXPORTMODE.AUTO && c ? ((o.exportAction === EXPORTACTION.DOWNLOAD || o.exportAction === EXPORTACTION.DOWNLOADSAVE) && (b = o.exportMode === EXPORTMODE.AUTO ? x(IMAGEDATA, a) : null, downloadCharts('url', a, o.exportFileName + '.' + p, b, o), triggerEvent('exported', UNDEF, {\n        fileName: o.exportFileName + '.' + p\n      })), o.exportAction === EXPORTACTION.SAVE || o.exportAction === EXPORTACTION.DOWNLOADSAVE ? (d = o.exportAction, o.exportAction === EXPORTACTION.DOWNLOADSAVE && (o.exportAction = EXPORTACTION.SAVE), b = x(IMAGEDATA, a, d), o.paper = {\n        width: void 0,\n        height: void 0\n      }, o.fusionCharts = {}, downloadCharts(null, null, null, b, o), delete o.paper, delete o.fusioncharts, z(o.logMode)) : o.logMode !== LOGMODE.SERVER && logCharts(y(), o)) : (b = x(IMAGEDATA, a), o.paper = {\n        width: void 0,\n        height: void 0\n      }, o.fusionCharts = {}, downloadCharts(null, null, null, b, o), delete o.paper, delete o.fusioncharts, z(o.logMode));\n    }, function () {\n      triggerEvent('exportcancelled');\n    });\n  },\n      B = function B() {\n    var a = this;\n    drawSvgOnCanvas({\n      svg: arguments[0],\n      canvas: c,\n      x: a.x,\n      y: a.y,\n      width: a.width,\n      height: a.height,\n      useCanvas: arguments[1]\n    }, function () {\n      m -= 1, 0 == m && n && ('png' === p ? A(c.toDataURL('image/png')) : 'jpeg' === p ? A(c.toDataURL('image/jpeg')) : 'pdf' === p ? (JpegToPdf(q, r), addImage(c.toDataURL('image/jpeg')), A(getDataUrl())) : A(c.toDataURL('image/png')));\n    });\n  },\n      C = function C(a) {\n    var b = l.background;\n    c = t.createElement('canvas'), c.id = 'newCanvas', c.width = r, c.height = q, c.style.border = '1px solid black', d = c.getContext('2d'), d.fillStyle = b && b.bgColor || '#ffffff', d.fillRect(0, 0, r, q), b && b.bgImage && v(b.bgImage) ? (g = new Image(), g.src = b.bgImage, g._userData = b, d.globalAlpha = pluckNumber(b.bgImageAlpha, 100) / 100, g.onload = function () {\n      var b = this._userData,\n          c = pluckNumber(b.bgImageX, 0),\n          e = pluckNumber(b.bgImageY, 0),\n          f = w(+b.bgImageWidth, +b.bgImageHeight, this.width, this.height),\n          g = f.width,\n          h = f.height;\n\n      try {\n        d.drawImage(this, c, e, g, h);\n      } finally {\n        d.globalAlpha = 1, a();\n      }\n    }, g.onerror = function () {\n      a();\n    }) : a();\n  },\n      D = function D(b, c) {\n    a = FCGlobal.items[b], a.jsVars.instanceAPI && (e = a.jsVars.instanceAPI.getFromEnv('paper').toSVG(!0), e = e.replace(/NS\\d+:/gi, 'xlink:'), e = e.replace(/(\\sd\\s*=\\s*[\"'])[M\\s\\d\\.]*([\"'])/ig, '$1M 0 0 L 0 0$2'), e = e.replace(/(xlink:title\\s*=\\s*)['\"].*[\"']/ig, ''), m += 1, function () {\n      var b = e,\n          d = FCGlobal.options['export'].useCanvas;\n      cacheAllImages(b, !1, function () {\n        b = replaceImagesWithNonDataUrl(b), B.call(c || a, b, d);\n      });\n    }());\n  },\n      E = function E() {\n    var a,\n        c,\n        d,\n        e,\n        f = l.charts;\n    if (b = [], f) for (d in f) {\n      f.hasOwnProperty(d) && (a = u[f[d].id]) && (c = f[d], e = w(+c.width, +c.height, a.width, a.height), b.push({\n        id: a.id,\n        width: e.width,\n        height: e.height,\n        x: c.x,\n        y: c.y\n      }));\n    } else for (d in u) {\n      u.hasOwnProperty(d) && (a = u[d], b.push({\n        id: a.id,\n        width: a.width,\n        height: a.height\n      }));\n    }\n  };\n\n  if (function () {\n    var a, b;\n    a = o.exportMode, b = {}, b[EXPORTMODE.CLIENT] = 1, b[EXPORTMODE.AUTO] = 0, b[EXPORTMODE.SERVER] = 0, o.exportatclientside = b[a];\n  }(), !!browserDetails.hasCanvas) {\n    for (E(), j = 0, f = b.length; j < f; j += 1) {\n      h = b[j], h.x = pluckNumber(h.x, s), h.y = pluckNumber(h.y, q + s), h.height = pluckNumber(h.height), h.width = pluckNumber(h.width), q = mathMax(q, h.y + h.height), r = mathMax(r, h.x + h.width);\n    }\n\n    q = l.imageHeight || q + 5, r = l.imageWidth || r + 5, C(function () {\n      return function () {\n        for (j = 0, f = b.length; j < f; j += 1) {\n          h = b[j], j === f - 1 && (n = !0), D(h.id, h);\n        }\n      };\n    }());\n  }\n}\n\nfunction batchExportLinker(a) {\n  a.batchExport = batchExport, FCGlobal = a;\n}\n\nexport default {\n  extension: batchExportLinker,\n  name: 'batchExportLinker',\n  type: 'extension',\n  requiresFusionCharts: !0\n};","map":null,"metadata":{},"sourceType":"module"}