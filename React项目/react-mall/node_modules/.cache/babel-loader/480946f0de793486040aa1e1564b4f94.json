{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport AnnotationShape from './annotation-shape';\nimport { pluckNumber, pluck, setLineHeight, pluckFontSize, toRaphaelColor, getSuggestiveRotation, parseUnsafeString } from '../../../../fc-core/src/lib';\n\nvar POSITION_BOTTOM = 'bottom',\n    POSITION_TOP = 'top',\n    POSITION_MIDDLE = 'middle',\n    BOLD = 'bold',\n    DEFAULT_RADIUS = 0,\n    DEFAULT_BORDER_PADDING = 2,\n    DEFAULT_BORDER_THICKNESS = 1,\n    DEFAULT_COLOR = '#FF0000',\n    DEFAULT_ALPHA = 100,\n    FULL_ANGLE_DEGREES = 360,\n    RADIAL = 'radial',\n    DEFAULT_FILL_ANGLE = 0,\n    DEFAULT_FONT_SIZE = 10,\n    ITALIC = 'italic',\n    NORMAL = 'normal',\n    TEXT_ALIGN_OPTIONS = {\n  left: 'start',\n  right: 'end',\n  center: 'middle'\n},\n    TEXT_V_ALIGN_OPTIONS = {\n  top: 'bottom',\n  middle: 'middle',\n  bottom: 'top'\n},\n    TEXT_ROTATION_OPTIONS = {\n  0: '0',\n  1: '270',\n  right: '90',\n  cw: '90',\n  left: '270',\n  ccw: '270'\n},\n    applyTextBound = function applyTextBound(a, b) {\n  if (!a || 'none' === a) return !1;\n  return 0 !== b;\n};\n\nfunction isValidColor(a) {\n  return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a) ? a : /(^[0-9A-F]{6}$)|(^[0-9A-F]{3}$)/i.test(a) && '#' + a;\n}\n\nvar AnnotaionText =\n/*#__PURE__*/\nfunction (_AnnotationShape) {\n  _inherits(AnnotaionText, _AnnotationShape);\n\n  function AnnotaionText() {\n    _classCallCheck(this, AnnotaionText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AnnotaionText).apply(this, arguments));\n  }\n\n  _createClass(AnnotaionText, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'text';\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _get(_getPrototypeOf(AnnotaionText.prototype), \"configureAttributes\", this).call(this, a);\n\n      var b = this,\n          c = b.rawConfig,\n          d = b.groupConfig;\n      b.config.text = parseUnsafeString(pluck(c.text, c.label, '')), b.config.font = pluck(c.font, d.font, 'Verdana, sans'), b.config.fontSize = pluckFontSize(c.fontSize, d.fontSize, DEFAULT_FONT_SIZE), b.config.align = pluck(TEXT_ALIGN_OPTIONS[c.align && c.align.toLowerCase()], TEXT_ALIGN_OPTIONS[d.textAlign && d.textAlign.toLowerCase()], 'middle'), b.config.vAlign = pluck(TEXT_V_ALIGN_OPTIONS[c.vAlign && c.vAlign.toLowerCase()], TEXT_V_ALIGN_OPTIONS[d.textVAlign && d.textVAlign.toLowerCase()], 'middle'), b.config.radius = pluckNumber(parseFloat(c.radius), DEFAULT_RADIUS), b.config.fontWeight = pluckNumber(c.bold, 0) ? BOLD : NORMAL, b.config.fontStyle = pluckNumber(c.italic, 0) ? ITALIC : NORMAL, b.config.bgColor = isValidColor(c.bgColor) ? c.bgColor : 'none', b.config.borderThickness = pluckNumber(parseFloat(b.rawConfig.borderThickness), parseFloat(b.rawConfig.thickness), DEFAULT_BORDER_THICKNESS), b.config.rotateText = pluck(c.rotateText, d.rotateText, '0'), b.config.rotateAngle = TEXT_ROTATION_OPTIONS[b.config.rotateText && b.config.rotateText.toLowerCase()], b.config.wrap = pluckNumber(c.wrap, d.wrapText, c.wrapHeight, c.wrapWidth, 1), b.config.wrap && (b.config.wrapWidth = pluckNumber(c.wrapWidth), b.config.wrapHeight = pluckNumber(c.wrapHeight)), b.config.leftMargin = pluckNumber(c.leftMargin, 0), b.config.elementType = 'text';\n    }\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      var a,\n          b = this,\n          c = b.config,\n          d = b.getFromEnv('smartLabel'),\n          e = c.wrap,\n          f = b.getLinkedParent(),\n          g = f && f._getConfig('scaleText'),\n          h = g ? b.getScaledVal(c.wrapWidth, !0) : c.wrapWidth,\n          i = g ? b.getScaledVal(c.wrapHeight, !1) : c.wrapHeight,\n          j = {\n        fontStyle: c.fontStyle,\n        fontFamily: c.font,\n        fontWeight: c.fontWeight,\n        fontSize: c.fontSize + 'px',\n        \"text-anchor\": c.align,\n        \"vertical-align\": c.vAlign\n      };\n\n      return setLineHeight(j), d && d.setStyle(j), a = d && e ? d.getSmartText(c.text, h, i, 0).text : c.text, a;\n    }\n  }, {\n    key: \"_getFillColor\",\n    value: function _getFillColor(a, b) {\n      var c = this,\n          d = c.getType(),\n          e = {\n        color: '',\n        alpha: '',\n        angle: '',\n        ratio: '',\n        radialGradient: 'circle' === d || 'arc' === d\n      };\n      return e.color = a.fontColor || a.fillColor || a.color || b.color || DEFAULT_COLOR, e.alpha = pluck(a.fillAlpha, parseFloat(a.alpha), b.alpha, DEFAULT_ALPHA), e.angle = FULL_ANGLE_DEGREES - pluckNumber(a.fillAngle, DEFAULT_FILL_ANGLE), e.ratio = pluck(a.fillRatio), a.fillPattern && (e.radialGradient = a.fillPattern === RADIAL || pluckNumber(a.fillPattern)), e.radialGradient && (e.gradientUnits = 'objectBoundingBox', e.cx = .5, e.cy = .5, e.fx = .5, e.fy = .5), c.config.rawColor = e.color, c.config.rawAlpha = e.alpha, c.config.rawAngle = e.angle, c.config.rawFillPattern = e.radialGradient ? 'radial' : 'linear', c.config.rawRatio = e.ratio, toRaphaelColor(e);\n    }\n  }, {\n    key: \"updateAttr\",\n    value: function updateAttr() {\n      var a,\n          b = this,\n          c = b.config,\n          d = c.calculatedAttrs,\n          e = pluckNumber(d.x, b.getScaledVal(c.x, !0)),\n          f = pluckNumber(d.y, b.getScaledVal(c.y, !0));\n      '0' !== c.rotateText && (a = getSuggestiveRotation(parseFloat(c.rotateAngle), e, f)), b._setConfig('attr', {\n        x: e,\n        y: f,\n        transform: a\n      });\n    }\n  }, {\n    key: \"_getAnnotationAttrs\",\n    value: function _getAnnotationAttrs() {\n      var a = this,\n          b = a.config,\n          c = a._getConfig('attr') || {},\n          d = a.getText(),\n          e = a.getScaledVal(b.x, !0),\n          f = a.getScaledVal(b.y, !1);\n      return c.x = ('undefined' == typeof c.x ? e : c.x) + b.leftMargin / 2, c.y = 'undefined' == typeof c.y ? f : c.y, c.text = d, c.fill = b.color, c['text-bound'] = applyTextBound(a.rawConfig.borderColor, a.rawConfig.borderAlpha) ? [toRaphaelColor(b.bgColor), b.borderColor, b.borderThickness, DEFAULT_BORDER_PADDING, b.radius, b.dashArrayStr] : [], c['font-style'] = b.fontStyle, c['font-weight'] = b.fontWeight, c['font-family'] = b.font, c['font-size'] = a.getScaledFont(b.fontSize), c['text-anchor'] = b.align, c['vertical-align'] = b.vAlign, '0' !== b.rotateText && (c.transform = c.transform || getSuggestiveRotation(parseFloat(b.rotateAngle), e, f)), c;\n    }\n  }]);\n\n  return AnnotaionText;\n}(AnnotationShape);\n\nexport default AnnotaionText;","map":null,"metadata":{},"sourceType":"module"}