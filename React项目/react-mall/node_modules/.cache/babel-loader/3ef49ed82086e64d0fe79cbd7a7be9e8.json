{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\src\\\\components\\\\Content\\\\Food\\\\Add\\\\Step\\\\Step.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Input, Select, InputNumber } from 'antd';\nimport './Add.less';\nvar FormItem = Form.Item;\nvar Option = Select.Option;\nvar ButtonGroup = Button.Group;\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n     两种报错方法 validateFields和rule中的min判断条件\r\n     min默认为 name is require 使用message进行修改\r\n     \r\n*/\n\nvar StepOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepOne, _Component);\n\n  function StepOne(props) {\n    _classCallCheck(this, StepOne);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StepOne).call(this));\n  }\n\n  _createClass(StepOne, [{\n    key: \"handleReset\",\n    value: function handleReset(e) {\n      //resetFields重置表单内容\n      e.preventDefault();\n      this.props.form.resetFields();\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      //表单内容提交组件,校验并获取一组输入域的值与 Error\t\n      e.preventDefault(); // console.log(this.props.form.getFieldError(\"name\"))\n\n      this.props.form.validateFields(function (errors, values) {\n        if (!!errors) {\n          console.log('Errors in form!!!');\n          return;\n        }\n\n        console.log('Submit!!!');\n      });\n    }\n  }, {\n    key: \"userExists\",\n    value: function userExists(rule, value, callback) {\n      //当做validator函数来用,用来作为判断条件\n      if (!value) {\n        callback();\n      } else {\n        setTimeout(function () {\n          if (value === '宫爆鸡丁') {\n            callback([new Error('抱歉，该菜名已被占用。')]);\n          } else {\n            callback();\n          }\n        }, 800);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props); // this.props.onRef(this)\n    } // componentWillReceiveProps() {\n    // console.log(this.props.form.getFieldError(\"name\"))\n    //返回值     [\"输入1时显示报错\"]\n    //          [\"菜品名至少为 1个字符\"]  message \n    // };\n\n  }, {\n    key: \"render\",\n    value: function render(props) {\n      console.log(this.props.form); // const { getFieldProps, getFieldError, isFieldValidating } = this.props.form; \n      //--------------------------------需要-----------------------\n      // const nameProps = getFieldProps('name', { //第一个参数为ID,第二个为options\n      //   /* \n      //   getFieldProps options \n      //   */\n      //   rules: [\n      //     { required: true, min: 1, message: '菜品名至少为 1 个字符' },\n      //     { validator: this.userExists.bind(this) },\n      //     ,\n      //     //  {\n      //     //    -------添加另外限制条件------------\n      //     //   validator(rule, value, callback, source, options) {\n      //     //     var errors = [];\n      //     //     console.log(value, \"Xx\") \n      //     //     if (value == 1) {\n      //     //       callback(\"输入1时显示报错\");\n      //     //     } else {\n      //     //       callback();\n      //     //       //  成功后显示在页面上的值\n      //     //       //  [\"菜品名至少为 1 个字符\", 22222]\n      //     //     }\n      //     //   }\n      //     // }\n      //   ]\n      // });\n\n      /*  \r\n      const selectProps = getFieldProps('select', {\r\n         rules: [\r\n           { required: true, message: '请选择菜品类型' },\r\n         ],\r\n       }); \r\n       */\n      // const textareaProps = getFieldProps('textarea', {//textarea 为ID\n      //   rules: [//判断条件\n      //     {  message: '输入内容不能为空' },\n      //   ],\n      // });\n\n      /*  \r\n      const formItemLayout = {//样式\r\n         labelCol: { span: 7 },\r\n         wrapperCol: { span: 12 },\r\n       }; \r\n       */\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"213123213\") // <Form >\n      //   <FormItem\n      //     {...formItemLayout}\n      //     label=\"菜品名称：\"\n      //     hasFeedback\n      //     help={isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', ')}\n      //   >\n      //     <Input {...nameProps} placeholder=\" 输入 宫爆鸡丁 看看\"\n      //     />\n      //   </FormItem>\n      //   <FormItem\n      //     label=\"菜品类型：\"\n      //     {...formItemLayout}\n      //     required\n      //   >\n      //     <Select style={{ width: 200 }}\n      //       {...selectProps}\n      //     >\n      //       <Option value=\"特色汤面\">特色汤面</Option>\n      //       <Option value=\"酒水饮料\">酒水饮料</Option>\n      //       <Option value=\"烧烤系列\">烧烤系列</Option>\n      //       <Option value=\"美味盖饭\">美味盖饭</Option>\n      //       <Option value=\"小吃，肉夹馍\">小吃，肉夹馍</Option>\n      //       <Option value=\"海鲜\" disabled>海鲜</Option>\n      //     </Select>\n      //   </FormItem>\n      //   <FormItem\n      //     {...formItemLayout}\n      //     label=\"菜品价格：\"\n      //   >\n      //     <InputNumber\n      //       style={{ width: 320 }}\n      //       type=\"textarea\"\n      //       // placeholder=\"菜品名称\"\n      //       id=\"textarea\"\n      //       name=\"textarea\"\n      //     />\n      //   </FormItem>\n      //   <FormItem\n      //     id=\"control-textarea\"\n      //     label=\"菜品介绍：\"\n      //     {...formItemLayout}\n      //   >\n      //     <textarea id=\"control-textarea\" style={{\n      //       borderRadius: 6, textAlign: \"left\", verticalAlign: \"top\", border: \"1px solid #d9d9d9\", fontSize: 14, lineHeight: \"20px\", textIndent: \"1em\"\n      //     }} placeholder=\"Please enter...\" cols=\"45\" rows=\"4\"  ></textarea>\n      //   </FormItem>\n      //   <ButtonGroup style={{ borderRadius: 15 }}>\n      //     <Button onClick={this.handleReset.bind(this)} style={{ marginLeft: 430 }}>Reset</Button>\n      //     <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>Submit</Button>\n      //   </ButtonGroup>\n      // </Form>\n      ;\n    }\n  }]);\n\n  return StepOne;\n}(Component);\n\nexport default StepOne;","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\components\\Content\\Food\\Add\\Step\\Step.js"],"names":["React","Component","Button","Form","Input","Select","InputNumber","FormItem","Item","Option","ButtonGroup","Group","StepOne","props","e","preventDefault","form","resetFields","validateFields","errors","values","console","log","rule","value","callback","setTimeout","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,WAAtC,QAAyD,MAAzD;AACA,OAAO,YAAP;AAGA,IAAMC,QAAQ,GAAGJ,IAAI,CAACK,IAAtB;AACA,IAAMC,MAAM,GAAGJ,MAAM,CAACI,MAAtB;AACA,IAAMC,WAAW,GAAGR,MAAM,CAACS,KAA3B;AAGA;;;;;;;;;;;;;;;;;IAgBMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AAElB;;;;gCACWC,C,EAAG;AACb;AACAA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKF,KAAL,CAAWG,IAAX,CAAgBC,WAAhB;AACD;;;iCACYH,C,EAAG;AACd;AACAA,MAAAA,CAAC,CAACC,cAAF,GAFc,CAGd;;AACA,WAAKF,KAAL,CAAWG,IAAX,CAAgBE,cAAhB,CAA+B,UAACC,MAAD,EAASC,MAAT,EAAoB;AACjD,YAAI,CAAC,CAACD,MAAN,EAAc;AACZE,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;AACD;;AACDD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,OAND;AAOD;;;+BAEUC,I,EAAMC,K,EAAOC,Q,EAAU;AAChC;AACA,UAAI,CAACD,KAAL,EAAY;AACVC,QAAAA,QAAQ;AACT,OAFD,MAEO;AACLC,QAAAA,UAAU,CAAC,YAAM;AACf,cAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBC,YAAAA,QAAQ,CAAC,CAAC,IAAIE,KAAJ,CAAU,aAAV,CAAD,CAAD,CAAR;AACD,WAFD,MAEO;AACLF,YAAAA,QAAQ;AACT;AACF,SANS,EAMP,GANO,CAAV;AAOD;AACF;;;wCAEkB;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB,EADiB,CAEjB;AACD,K,CACD;AACA;AACA;AACA;AACA;;;;2BACOA,K,EAAO;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWG,IAAvB,EADY,CAEZ;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAED;;;;;;;AASC;AACA;AACA;AACA;AACA;;AACD;;;;;;;AAOC,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzDF;AA4DD;;;;EA9JmBf,S;;AAiKtB,eAAeW,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Input, Select, InputNumber } from 'antd';\r\nimport './Add.less';\r\n\r\n\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst ButtonGroup = Button.Group;\r\n\r\n \r\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n     两种报错方法 validateFields和rule中的min判断条件\r\n     min默认为 name is require 使用message进行修改\r\n     \r\n*/\r\nclass StepOne extends Component {\r\n  constructor(props) {\r\n    super()\r\n  }\r\n  handleReset(e) {\r\n    //resetFields重置表单内容\r\n    e.preventDefault();\r\n    this.props.form.resetFields();\r\n  };\r\n  handleSubmit(e) {\r\n    //表单内容提交组件,校验并获取一组输入域的值与 Error\t\r\n    e.preventDefault();\r\n    // console.log(this.props.form.getFieldError(\"name\"))\r\n    this.props.form.validateFields((errors, values) => {\r\n      if (!!errors) {\r\n        console.log('Errors in form!!!');\r\n        return;\r\n      }\r\n      console.log('Submit!!!');\r\n    });\r\n  };\r\n\r\n  userExists(rule, value, callback) {\r\n    //当做validator函数来用,用来作为判断条件\r\n    if (!value) {\r\n      callback();\r\n    } else {\r\n      setTimeout(() => {\r\n        if (value === '宫爆鸡丁') {\r\n          callback([new Error('抱歉，该菜名已被占用。')]);\r\n        } else {\r\n          callback();\r\n        }\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n  componentDidMount(){\r\n    console.log(this.props)\r\n    // this.props.onRef(this)\r\n  }\r\n  // componentWillReceiveProps() {\r\n  // console.log(this.props.form.getFieldError(\"name\"))\r\n  //返回值     [\"输入1时显示报错\"]\r\n  //          [\"菜品名至少为 1个字符\"]  message \r\n  // };\r\n  render(props) {\r\n    console.log(this.props.form)\r\n    // const { getFieldProps, getFieldError, isFieldValidating } = this.props.form; \r\n   \r\n    \r\n    //--------------------------------需要-----------------------\r\n    // const nameProps = getFieldProps('name', { //第一个参数为ID,第二个为options\r\n    //   /* \r\n    //   getFieldProps options \r\n    //   */\r\n    //   rules: [\r\n    //     { required: true, min: 1, message: '菜品名至少为 1 个字符' },\r\n    //     { validator: this.userExists.bind(this) },\r\n    //     ,\r\n    //     //  {\r\n    //     //    -------添加另外限制条件------------\r\n    //     //   validator(rule, value, callback, source, options) {\r\n    //     //     var errors = [];\r\n    //     //     console.log(value, \"Xx\") \r\n    //     //     if (value == 1) {\r\n    //     //       callback(\"输入1时显示报错\");\r\n    //     //     } else {\r\n    //     //       callback();\r\n    //     //       //  成功后显示在页面上的值\r\n    //     //       //  [\"菜品名至少为 1 个字符\", 22222]\r\n    //     //     }\r\n    //     //   }\r\n    //     // }\r\n    //   ]\r\n    // });\r\n\r\n   /*  \r\n   const selectProps = getFieldProps('select', {\r\n      rules: [\r\n        { required: true, message: '请选择菜品类型' },\r\n      ],\r\n    }); \r\n    */\r\n\r\n\r\n    // const textareaProps = getFieldProps('textarea', {//textarea 为ID\r\n    //   rules: [//判断条件\r\n    //     {  message: '输入内容不能为空' },\r\n    //   ],\r\n    // });\r\n   /*  \r\n   const formItemLayout = {//样式\r\n      labelCol: { span: 7 },\r\n      wrapperCol: { span: 12 },\r\n    }; \r\n    */\r\n \r\n    return (\r\n      <div>213123213</div>\r\n      // <Form >\r\n      //   <FormItem\r\n      //     {...formItemLayout}\r\n      //     label=\"菜品名称：\"\r\n      //     hasFeedback\r\n      //     help={isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', ')}\r\n      //   >\r\n      //     <Input {...nameProps} placeholder=\" 输入 宫爆鸡丁 看看\"\r\n      //     />\r\n      //   </FormItem>\r\n\r\n      //   <FormItem\r\n      //     label=\"菜品类型：\"\r\n      //     {...formItemLayout}\r\n      //     required\r\n      //   >\r\n      //     <Select style={{ width: 200 }}\r\n      //       {...selectProps}\r\n      //     >\r\n      //       <Option value=\"特色汤面\">特色汤面</Option>\r\n      //       <Option value=\"酒水饮料\">酒水饮料</Option>\r\n      //       <Option value=\"烧烤系列\">烧烤系列</Option>\r\n      //       <Option value=\"美味盖饭\">美味盖饭</Option>\r\n      //       <Option value=\"小吃，肉夹馍\">小吃，肉夹馍</Option>\r\n      //       <Option value=\"海鲜\" disabled>海鲜</Option>\r\n      //     </Select>\r\n      //   </FormItem>\r\n\r\n      //   <FormItem\r\n      //     {...formItemLayout}\r\n      //     label=\"菜品价格：\"\r\n      //   >\r\n      //     <InputNumber\r\n      //       style={{ width: 320 }}\r\n      //       type=\"textarea\"\r\n      //       // placeholder=\"菜品名称\"\r\n      //       id=\"textarea\"\r\n      //       name=\"textarea\"\r\n      //     />\r\n      //   </FormItem>\r\n\r\n      //   <FormItem\r\n      //     id=\"control-textarea\"\r\n      //     label=\"菜品介绍：\"\r\n      //     {...formItemLayout}\r\n      //   >\r\n      //     <textarea id=\"control-textarea\" style={{\r\n      //       borderRadius: 6, textAlign: \"left\", verticalAlign: \"top\", border: \"1px solid #d9d9d9\", fontSize: 14, lineHeight: \"20px\", textIndent: \"1em\"\r\n      //     }} placeholder=\"Please enter...\" cols=\"45\" rows=\"4\"  ></textarea>\r\n      //   </FormItem>\r\n\r\n      //   <ButtonGroup style={{ borderRadius: 15 }}>\r\n      //     <Button onClick={this.handleReset.bind(this)} style={{ marginLeft: 430 }}>Reset</Button>\r\n      //     <Button type=\"primary\" onClick={this.handleSubmit.bind(this)}>Submit</Button>\r\n      //   </ButtonGroup>\r\n      // </Form>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default StepOne"]},"metadata":{},"sourceType":"module"}