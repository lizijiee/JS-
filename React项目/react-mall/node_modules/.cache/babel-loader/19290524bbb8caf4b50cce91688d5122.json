{"ast":null,"code":"var jobList = [],\n    pausedList = {},\n    priorityJobList = [],\n    jobByID = {},\n    jobCount = 0,\n    win = window,\n    nav = win.navigator,\n    isIE11 = /trident/i.test(nav.userAgent) && /rv:11/i.test(nav.userAgent) && !win.opera,\n    isIE = /msie/i.test(nav.userAgent) && !win.opera,\n    isEdge = /Edge/.test(nav.userAgent),\n    minMsThreshold = 16,\n    schedular = {},\n    fnStr = 'function',\n    jobPrefixStr = 'JOB_',\n    priorityList = {\n  instant: 1,\n  render: 1,\n  chartEvents: 1,\n  configure: 2,\n  chartClick: 2,\n  draw: 3,\n  entitydraw: 4,\n  label: 4,\n  animation: 5,\n  tracker: 6,\n  kdTree: 6,\n  postRender: 7\n},\n    jobFrame = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (a) {\n  setTimeout(a, minMsThreshold);\n},\n    jobExecutionFramerequested = !1,\n    executeJob = function executeJob() {\n  var a,\n      b,\n      c,\n      d = !0,\n      e = new Date().getTime();\n\n  for (jobExecutionFramerequested = !0; d && (a = jobList[0]);) {\n    b = new Date().getTime(), a.OIAF && c || a.executeAfter && !(a.executeAfter < b) || !(b - e < minMsThreshold) ? d = !1 : (jobList.shift(), priorityJobList[a.priority] -= 1, jobByID[a.jobID] && !a.executed && (a.executed = !0, delete jobByID[a.jobID], a.job(), c = a.OIAF));\n  }\n\n  jobList.length ? jobFrame(executeJob) : jobExecutionFramerequested = !1;\n};\n\n(isIE11 || isIE || isEdge) && (jobFrame = jobFrame.bind(window)), schedular.addJob = function (a, b, c) {\n  var d,\n      e,\n      f,\n      g = 0,\n      h = c && c.oneInAFrame,\n      j = c && c.addToTop ? b - 1 : b;\n\n  for (typeof a == fnStr ? (d = jobPrefixStr + ++jobCount + '_' + (b || 1), e = {\n    job: a,\n    priority: b,\n    OIAF: h,\n    jobID: d\n  }, c && c.executionDelay && (e.executeAfter = new Date().getTime() + c.executionDelay)) : e = a, f = 0; f <= j; f++) {\n    g += priorityJobList[f] || 0;\n  }\n\n  return jobList.splice(g, 0, e), jobByID[e.jobID] = e, priorityJobList[b] = (priorityJobList[b] || 0) + 1, jobExecutionFramerequested || 1 !== jobList.length || (h ? jobFrame(executeJob) : setTimeout(executeJob, 0)), d;\n}, schedular.removeJob = function (a) {\n  jobByID[a] && delete jobByID[a];\n}, schedular.updateJob = function (a, b, c, d) {\n  return jobByID[a] ? (jobByID[a].job = b, a) : this.addJob(b, c, d);\n}, schedular.pauseExecution = function (a) {\n  return !!jobByID[a] && void (pausedList[a] = jobByID[a], delete jobByID[a]);\n}, schedular.resumeExecution = function (a) {\n  var b = pausedList[a];\n  return !!b && void (schedular.addJob(b, b.priority), delete pausedList[a]);\n};\nexport default schedular;\nexport { priorityList };","map":null,"metadata":{},"sourceType":"module"}