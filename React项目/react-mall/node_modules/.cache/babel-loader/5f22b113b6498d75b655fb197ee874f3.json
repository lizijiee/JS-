{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { hasSVG } from '../../../fc-core/src/lib';\nvar FC_TOOLTIP_CLASS = 'fc__tooltip',\n    GUTTER_12 = 12;\nvar UNDEF;\n\nvar ToolTip =\n/*#__PURE__*/\nfunction () {\n  function ToolTip(a) {\n    _classCallCheck(this, ToolTip);\n\n    this.text = '', this.x = 0, this.y = 0, this.visibleWidth = 0, this.universeBounds = a.getBoundingClientRect(), this.data = {\n      active: !1,\n      target: !1\n    }, this.element = this.createElement(a);\n  }\n\n  _createClass(ToolTip, [{\n    key: \"setUniverse\",\n    value: function setUniverse(a) {\n      this.universeBounds = a.getBoundingClientRect();\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(a) {\n      var b = document.createElement('div');\n      return b.setAttribute('class', FC_TOOLTIP_CLASS), b.className += ' fusioncharts-div', b.innerHTML = this.text, b.style.color = '#545454', b.style.padding = '3px', b.style.fontSize = '10px', b.style.overflow = 'hidden', b.style.borderWidth = '1px', b.style.borderColor = '#000000', b.style.whiteSpace = 'nowrap', b.style.position = 'absolute', b.style.borderStyle = 'solid', b.style.backgroundColor = '#ffffff', b.style['user-select'] = 'none', b.style['-ms-user-select'] = 'none', b.style['-moz-user-select'] = 'none', b.style['-webkit-user-select'] = 'none', b.style['-webkit-touch-callout'] = 'none', b.style.top = this.x + 'px', b.style.left = this.y + 'px', b.style.visibility = 'hidden', b.style['pointer-events'] = 'none', a.appendChild(b), b;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(a, b) {\n      this.data[a] = b;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(a) {\n      return this.data[a];\n    }\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(a) {\n      var b = this.element;\n      b.style.color = a.fontColor, hasSVG ? (b.style.backgroundColor = a.bgColor, b.style.borderColor = a.borderColor, b.style.boxShadow = a.showToolTipShadow ? '1px 1px 3px rgba(64,64,64,0.4)' : 'none') : (b.style.backgroundColor = a.rawBgColor, b.style.borderColor = a.rawBorderColor), b.style.fontFamily = a['font-family'], b.style.fontSize = a['font-size'] + 'px', b.style.borderWidth = a.borderThickness + 'px', b.style.borderRadius = a.borderRadius + 'px', b.style.padding = a.padding + 'px';\n    }\n  }, {\n    key: \"show\",\n    value: function show(a) {\n      this.text !== a && (this.text = a, this.element.innerHTML = this.text), this.setData('active', !0), 'visible' !== this.element.style.visibility && (this.element.style.visibility = 'visible'), this.element.style['will-change'] = 'left, top', this.element.style['max-width'] = this.universeBounds.right - this.universeBounds.left - 24 + 'px';\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.x;\n      var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.y;\n      var c = this.universeBounds,\n          d = c.left + GUTTER_12,\n          e = c.right - GUTTER_12,\n          f = c.top + GUTTER_12,\n          g = c.bottom - GUTTER_12,\n          h = this.universeBounds.right - this.universeBounds.left - 24,\n          i = this.element.offsetWidth,\n          j = this.element.offsetHeight;\n      a + i + d < e ? (this.element.style.left = a + 'px', this.element.style.whiteSpace = 'nowrap') : i < h ? this.element.style.left = e - i - d + 'px' : (this.element.style.left = '12px', this.element.style.whiteSpace = 'normal'), this.element.style.top = b + f + j < g ? b + 'px' : g - j - f + 'px';\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.y = 0, this.x = 0, this.x = '', this.setData('active', !1), this.setData('target', !1), this.element.style.visibility = 'hidden', this.element.style['will-change'] = 'auto', this.element.innerHTML = '', this.text = UNDEF;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.hide();\n    }\n  }]);\n\n  return ToolTip;\n}();\n\nexport default ToolTip;","map":null,"metadata":{},"sourceType":"module"}