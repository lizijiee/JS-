{"ast":null,"code":"import _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport MSCartesian from '../../../../fc-charts/src/chart/_internal/mscartesian';\nimport { ComponentInterface } from '../../../../fc-core/src/component-interface';\nimport * as defaultPaletteOption from '../../../../fc-charts/src/_internal/color-utils/chart-palette-colors';\nimport domEvtHandler from '../../../../fc-core/src/dom-event';\nimport { raiseWarning } from '../../../../fc-core/src/event-api';\nimport { pluck, hasTouch, trimString, pluckNumber, getDashStyle, getMouseCoordinate, convertColor, extend2 } from '../../../../fc-core/src/lib';\nimport datasetFactory from '../../factories/maps-dataset';\nimport canvasFactory from '../../../../fc-charts/src/factories/canvas';\nimport createColorRangeManager from '../../../../fc-charts/src/factories/colorrange';\nimport decideLegendCreation from '../../../../fc-charts/src/factories/legendmanager';\n\nvar UNDEF,\n    defaultPaletteOptions = extend2({\n  foregroundcolor: '333333',\n  foregroundalpha: '100',\n  foregrounddarkcolor: '111111',\n  foregrounddarkalpha: '100',\n  foregroundlightcolor: '666666',\n  foregroundlightalpha: '100',\n  backgroundlightcolor: 'FFFFFF',\n  backgroundlightalpha: '100',\n  backgroundlightangle: 90,\n  backgroundlightratio: '',\n  backgroundcolor: 'FFFFCC',\n  backgroundalpha: '100',\n  backgrounddarkcolor: 'ffcc66',\n  backgrounddarkalpha: '100',\n  backgrounddarkangle: 270,\n  backgrounddarkratio: '',\n  shadow: 1\n}, defaultPaletteOption),\n    zeroCommaHundredStr = '0,100',\n    colorPaletteMapGlobal = {\n  basefontcolor: 'foregroundcolor',\n  bordercolor: 'foregrounddarkcolor',\n  borderalpha: 'foregrounddarkalpha',\n  bgcolor: 'backgroundlightcolor',\n  bgalpha: 'backgroundlightalpha',\n  bgangle: 'backgroundlightangle',\n  bgratio: 'backgroundlightratio',\n  canvasbordercolor: 'foregrounddarkcolor',\n  canvasborderalpha: 'foregrounddarkalpha',\n  canvasbgcolor: 'backgroundlightcolor',\n  canvasbgalpha: 'backgroundlightalpha',\n  canvasbgangle: 'backgroundlightangle',\n  canvasbgratio: 'backgroundlightratio',\n  tooltipbordercolor: 'foregrounddarkcolor',\n  tooltipborderalpha: 'foregrounddarkalpha',\n  tooltipbgcolor: 'backgroundlightcolor',\n  tooltipbgalpha: 'backgroundlightalpha',\n  tooltipfontcolor: 'foregroundcolor',\n  legendbordercolor: 'foregrounddarkcolor',\n  legendborderalpha: 'foregrounddarkalpha',\n  markerbordercolor: 'foregroundlightcolor',\n  markerborderalpha: 'foregroundlightalpha',\n  markerfillcolor: 'backgrounddarkcolor',\n  markerfillalpha: 'backgrounddarkalpha',\n  markerfillangle: 'backgrounddarkangle',\n  markerfillratio: 'backgrounddarkratio',\n  plotfillcolor: 'backgroundcolor',\n  plotfillalpha: 'backgroundalpha',\n  plotfillangle: 'backgroundangle',\n  plotfillratio: 'backgroundratio',\n  plothoverfillcolor: 'backgrounddarkcolor',\n  plothoverfillalpha: 'backgrounddarkalpha',\n  plothoverfillangle: 'backgrounddarkangle',\n  plothoverfillratio: 'backgrounddarkratio',\n  plotbordercolor: 'foregroundcolor',\n  plotborderalpha: 'foregroundalpha',\n  shadow: 'shadow'\n},\n    eiMethodsGlobal = {\n  getMapName: function getMapName() {\n    var a = this,\n        b = a.jsVars.instanceAPI,\n        c = b.getName().toLowerCase();\n    return c;\n  },\n  getEntityList: function getEntityList() {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = this,\n        j = h.jsVars.instanceAPI,\n        k = j.getDatasets() || [],\n        l = k.length,\n        m = [];\n\n    for (a = 0; a < l; a++) {\n      if (c = k[a] || [], g = c.getName(), 'entities' === g) {\n        b = c;\n        break;\n      }\n    }\n\n    for (a in d = b.components.data, l = d.length, d) {\n      d.hasOwnProperty(a) && (e = d[a] || {}, f = e.config || {}, m.push({\n        id: f.id,\n        originalId: f.originalId || f.id,\n        label: f.label,\n        shortlabel: f.shortLabel,\n        value: f.value,\n        formattedValue: f.formattedValue,\n        toolText: f.toolText\n      }));\n    }\n\n    return m;\n  },\n  getMapAttribute: function getMapAttribute() {\n    var a = this;\n    return raiseWarning(this, '12061210581', 'run', 'JavaScriptRenderer~getMapAttribute()', 'Use of deprecated \"getMapAttribute()\". Replace with \"getChartAttribute()\".'), a.getChartAttribute.apply(a, arguments);\n  },\n  exportMap: function exportMap() {\n    var a = this;\n    return raiseWarning(this, '12061210581', 'run', 'JavaScriptRenderer~exportMap()', 'Use of deprecated \"exportMap()\". Replace with \"exportChart()\".'), a.exportChart && a.exportChart.apply(a, arguments);\n  },\n  addMarker: function addMarker(a) {\n    var b,\n        c,\n        d,\n        e,\n        f = this.jsVars.instanceAPI,\n        g = f.getDatasets() || [],\n        h = g.length;\n\n    for (b = 0; b < h; b++) {\n      if (c = g[b] || [], e = c.getName(), 'markers' === e) {\n        d = c;\n        break;\n      }\n    }\n\n    d && !d.addMarkerItem(a) && raiseWarning(this, '1309264086', 'run', 'MapsRenderer~addMarker()', 'Failed to add marker. Check the options and try again.');\n  },\n  updateMarker: function updateMarker(a, b) {\n    var c,\n        d,\n        e,\n        f,\n        g = this.jsVars.instanceAPI,\n        h = g.getDatasets() || [],\n        j = h.length;\n\n    for (c = 0; c < j; c++) {\n      if (d = h[c] || [], f = d.getName(), 'markers' === f) {\n        e = d;\n        break;\n      }\n    }\n\n    e && a && (a = (a + BLANK).toLowerCase(), e.updateMarkerItem(a, b));\n  },\n  removeMarker: function removeMarker(a) {\n    var b,\n        c,\n        d,\n        e,\n        f = this.jsVars.instanceAPI,\n        g = f.getDatasets() || [],\n        h = g.length;\n\n    for (b = 0; b < h; b++) {\n      if (c = g[b] || [], e = c.getName(), 'markers' === e) {\n        d = c;\n        break;\n      }\n    }\n\n    a && (a = (a + BLANK).toLowerCase(), d._removeMarkerItem(a));\n  }\n},\n    DASH_DEF = 'none',\n    COMMASPACE = ', ',\n    BLANK = '',\n    POSITION_BOTTOM = 'bottom',\n    SHAPE_CIRCLE = 'circle',\n    math = window.Math,\n    mathMin = math.min,\n    mathMax = math.max,\n    isWithinCanvas = function isWithinCanvas(a, b) {\n  var c = getMouseCoordinate(b.getFromEnv('chart-container'), a),\n      d = c.chartX,\n      e = c.chartY,\n      f = b.config,\n      g = f.canvasLeft,\n      h = f.canvasTop,\n      i = f.canvasLeft + f.canvasWidth,\n      j = f.canvasHeight + f.canvasTop;\n  return c.insideCanvas = !1, c.originalEvent = a, d > g && d < i && e > h && e < j && (c.insideCanvas = !0), c;\n};\n\nvar ColorPalette =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(ColorPalette, _ComponentInterface);\n\n  function ColorPalette(a, b) {\n    var _this;\n\n    _classCallCheck(this, ColorPalette);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorPalette).call(this)), _this.subpalette = '', _this.key = '', _this.index = b;\n\n    for (var c in a) {\n      _this.subpalette = defaultPaletteOptions[a[c]], _this[c] = _this.subpalette instanceof Array ? _this.subpalette[b] : _this.subpalette, _this.key = c;\n    }\n\n    return _this;\n  }\n\n  return ColorPalette;\n}(ComponentInterface);\n\nvar Maps =\n/*#__PURE__*/\nfunction (_MSCartesian) {\n  _inherits(Maps, _MSCartesian);\n\n  function Maps() {\n    var _this2;\n\n    _classCallCheck(this, Maps);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Maps).call(this)), _this2.friendlyName = 'Map', _this2.revision = 1, _this2.hasCanvas = !0, _this2.standaloneInit = !1, _this2.defaultDatasetType = 'maps', _this2.defaultSeriesType = 'geo', _this2.fireGroupEvent = !0, _this2.legendposition = 'right', _this2.hasGradientLegend = !0, _this2.isMap = !0, _this2.defaultPaletteOptions = {\n      paletteColors: [['A6A6A6', 'CCCCCC', 'E1E1E1', 'F0F0F0'], ['A7AA95', 'C4C6B7', 'DEDFD7', 'F2F2EE'], ['04C2E3', '66E7FD', '9CEFFE', 'CEF8FF'], ['FA9101', 'FEB654', 'FED7A0', 'FFEDD5'], ['FF2B60', 'FF6C92', 'FFB9CB', 'FFE8EE']],\n      bgColor: ['FFFFFF', 'CFD4BE,F3F5DD', 'C5DADD,EDFBFE', 'A86402,FDC16D', 'FF7CA0,FFD1DD'],\n      bgAngle: [270, 270, 270, 270, 270],\n      bgRatio: [zeroCommaHundredStr, zeroCommaHundredStr, zeroCommaHundredStr, zeroCommaHundredStr, zeroCommaHundredStr],\n      bgAlpha: ['100', '60,50', '40,20', '20,10', '30,30'],\n      toolTipBgColor: ['FFFFFF', 'FFFFFF', 'FFFFFF', 'FFFFFF', 'FFFFFF'],\n      toolTipBorderColor: ['545454', '545454', '415D6F', '845001', '68001B'],\n      baseFontColor: ['555555', '60634E', '025B6A', 'A15E01', '68001B'],\n      tickColor: ['333333', '60634E', '025B6A', 'A15E01', '68001B'],\n      trendColor: ['545454', '60634E', '415D6F', '845001', '68001B'],\n      plotFillColor: ['545454', '60634E', '415D6F', '845001', '68001B'],\n      borderColor: ['767575', '545454', '415D6F', '845001', '68001B'],\n      borderAlpha: [50, 50, 50, 50, 50]\n    }, _this2.colorPaletteMap = colorPaletteMapGlobal, _this2.eiMethods = eiMethodsGlobal, _this2.registerFactory('legend', decideLegendCreation, ['canvas']), _this2.registerFactory('axis', function () {}, ['canvas']), _this2.registerFactory('colormanager-decider', createColorRangeManager, ['legend']), _this2.registerFactory('dataset', datasetFactory, ['colormanager-decider']), _this2.registerFactory('canvas', canvasFactory);\n    return _this2;\n  }\n\n  _createClass(Maps, [{\n    key: \"_checkInvalidSpecificData\",\n    value: function _checkInvalidSpecificData() {\n      return this.config.invalid = !1, !1;\n    }\n  }, {\n    key: \"__setDefaultConfig\",\n    value: function __setDefaultConfig() {\n      _get(_getPrototypeOf(Maps.prototype), \"__setDefaultConfig\", this).call(this);\n\n      var a = this.config;\n      a.baseWidth || (a.baseWidth = 400), a.baseHeight || (a.baseHeight = 300), a.baseScaleFactor || (a.baseScaleFactor = 1);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.config.name || 'GEO';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'chartAPI';\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes(a) {\n      var b,\n          c = this,\n          d = c.getChildren('colorPalette') && c.getChildren('colorPalette')[0];\n      b = a.chart = a.chart || a.graph || a.map || {}, c.jsonData = a, d || (d = new ColorPalette(this.colorPaletteMap, (0 < b.palette && 6 > b.palette ? b.palette : pluckNumber(c.paletteIndex, 1)) - 1), c.attachChild(d, 'colorPalette')), c.config.skipCanvasDrawing = !0, _get(_getPrototypeOf(Maps.prototype), \"configureAttributes\", this).call(this, a), c._parseBackgroundCosmetics();\n    }\n  }, {\n    key: \"parseChartAttr\",\n    value: function parseChartAttr(a) {\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g = this,\n          h = g.jsonData,\n          i = h.chart || h.map,\n          j = h.markers,\n          k = new ColorPalette(this.colorPaletteMap, (0 < i.palette && 6 > i.palette ? i.palette : pluckNumber(g.paletteIndex, 1)) - 1),\n          l = pluck(i.entitybordercolor, i.bordercolor, k.plotbordercolor),\n          m = pluck(i.entityfillcolor, i.fillcolor, k.plotfillcolor),\n          n = pluck(i.entityfillalpha, i.fillalpha, k.plotfillalpha),\n          o = pluck(i.entityfillratio, i.fillratio, k.plotfillratio),\n          p = pluck(i.entityfillangle, i.fillangle, k.plotfillangle),\n          q = pluck(i.nullentityfillcolor, i.nullentitycolor, m),\n          r = pluckNumber(i.usevaluesformarkers, h.markers && h.markers.items && h.markers.items.length, !(h.markers && h.markers.application && h.markers.application.length && h.markers.definition && h.markers.definition.length));\n      _get(_getPrototypeOf(Maps.prototype), \"parseChartAttr\", this).call(this, a), b = g.config, b.origMarginTop = pluckNumber(i.charttopmargin, i.maptopmargin, 11), b.origMarginLeft = pluckNumber(i.chartleftmargin, i.mapleftmargin, 11), b.origMarginBottom = pluckNumber(i.chartbottommargin, i.mapbottommargin, 11), b.origMarginRight = pluckNumber(i.chartrightmargin, i.maprightmargin, 11), b.labelsOnTop = pluckNumber(i.entitylabelsontop, 1), f = b.style, c = f.inCancolor, d = f.inCanfontFamily, e = f.inCanfontSize, b.entityOpts = {\n        baseScaleFactor: b.baseScaleFactor,\n        dataLabels: {\n          style: {\n            fontFamily: d,\n            fontSize: e,\n            lineHeight: f.inCanLineHeight,\n            color: f.inCancolor\n          }\n        },\n        fillColor: m,\n        fillAlpha: n,\n        fillRatio: o,\n        fillAngle: p,\n        borderColor: l,\n        borderAlpha: pluck(i.entityborderalpha, i.borderalpha, g.borderAlpha, '100'),\n        borderThickness: pluckNumber(i.showentityborder, i.showborder, 1) ? pluckNumber(i.entityborderthickness, i.borderthickness, 1) : 0,\n        scaleBorder: pluckNumber(i.scaleentityborder, i.scaleborder, 0),\n        hoverFillColor: pluck(i.entityfillhovercolor, i.hoverfillcolor, i.hovercolor, k.plothoverfillcolor),\n        hoverFillAlpha: pluck(i.entityfillhoveralpha, i.hoverfillalpha, i.hoveralpha, k.plothoverfillalpha),\n        hoverFillRatio: pluck(i.entityfillhoverratio, i.hoverfillratio, i.hoverratio, k.plothoverfillratio),\n        hoverFillAngle: pluck(i.entityfillhoverangle, i.hoverfillangle, i.hoverangle, k.plothoverfillangle),\n        hoverBorderThickness: pluck(i.entityborderhoverthickness, i.hoverborderthickness),\n        hoverBorderColor: pluck(i.entityborderhovercolor, l, k.plotbordercolor),\n        hoverBorderAlpha: pluck(i.entityborderhoveralpha, k.plotborderalpha),\n        nullEntityColor: q,\n        nullEntityAlpha: pluck(i.nullentityfillalpha, i.nullentityalpha, n),\n        nullEntityRatio: pluck(i.nullentityfillratio, i.nullentityratio, o),\n        nullEntityAngle: pluck(i.nullentityfillangle, i.nullentityangle, p),\n        connectorColor: pluck(i.labelconnectorcolor, i.connectorcolor, c),\n        connectorAlpha: pluck(i.labelconnectoralpha, i.connectoralpha, '100'),\n        connectorThickness: pluckNumber(i.labelconnectorthickness, i.borderthickness, 1),\n        showHoverEffect: pluckNumber(i.showentityhovereffect, i.usehovercolor, i.showhovereffect, 1),\n        hoverOnNull: pluckNumber(i.hoveronnull, i.entityhoveronnull, 1),\n        labelPadding: pluckNumber(i.labelpadding, 5),\n        showLabels: pluckNumber(i.showlabels, 1),\n        labelsOnTop: pluckNumber(i.entitylabelsontop, 1),\n        includeNameInLabels: pluckNumber(i.includenameinlabels, 1),\n        includeValueInLabels: pluckNumber(i.includevalueinlabels, 0),\n        useSNameInTooltip: pluckNumber(i.usesnameintooltip, 0),\n        useShortName: pluckNumber(i.usesnameinlabels, 1),\n        labelSepChar: pluck(i.labelsepchar, COMMASPACE),\n        showTooltip: pluckNumber(i.showentitytooltip, i.showtooltip, 1),\n        tooltipSepChar: pluck(i.tooltipsepchar, ', '),\n        tooltext: i.entitytooltext,\n        hideNullEntities: pluckNumber(i.hidenullentities, 0),\n        showHiddenEntityBorder: pluckNumber(i.showhiddenentityborder, 1),\n        showNullEntityBorder: pluckNumber(i.shownullentityborder, 1),\n        hiddenEntityColor: pluck(i.hiddenentitycolor, i.hiddenentityfillcolor, i.hiddenentityalpha || i.hiddenentityfillalpha ? q : 'ffffff'),\n        hiddenEntityAlpha: pluck(i.hiddenentityalpha, i.hiddenentityfillalpha, .001),\n        shadow: pluckNumber(i.showshadow, g.defaultPlotShadow, k.shadow)\n      }, b.markerOpts = {\n        dataLabels: {\n          style: {\n            fontFamily: pluck(i.markerfont, d),\n            fontSize: pluckNumber(i.markerfontsize, parseInt(e, 10)),\n            fontColor: pluck(i.markerfontcolor, c)\n          }\n        },\n        showTooltip: pluckNumber(i.showmarkertooltip, i.showtooltip, 1),\n        showLabels: pluckNumber(i.showmarkerlabels, i.showlabels, 1),\n        showHoverEffect: pluckNumber(i.showmarkerhovereffect, 1),\n        labelPadding: pluck(i.markerlabelpadding, '5'),\n        labelWrapWidth: pluckNumber(i.markerlabelwrapwidth, 0),\n        labelWrapHeight: pluckNumber(i.markerlabelwrapheight, 0),\n        fillColor: pluck(i.markerfillcolor, i.markerbgcolor, k.markerfillcolor),\n        fillAlpha: pluck(i.markerfillalpha, k.markerfillalpha),\n        fillAngle: pluck(i.markerfillangle, k.markerfillangle),\n        fillRatio: pluck(i.markerfillratio, k.markerfillratio),\n        fillPattern: pluck(i.markerfillpattern, k.markerbgpattern),\n        hoverFillColor: i.markerfillhovercolor,\n        hoverFillAlpha: i.markerfillhoveralpha,\n        hoverFillRatio: i.markerfillhoverratio,\n        hoverFillAngle: i.markerfillhoverangle,\n        borderThickness: pluck(i.markerborderthickness, 1),\n        borderColor: pluck(i.markerbordercolor, k.markerbordercolor),\n        borderAlpha: pluckNumber(i.markerborderalpha, k.markerborderalpha),\n        hoverBorderThickness: i.markerborderhoverthickness,\n        hoverBorderColor: i.markerborderhovercolor,\n        hoverBorderAlpha: i.markerborderhoveralpha,\n        radius: pluckNumber(i.markerradius && trimString(i.markerradius), 7),\n        shapeId: pluck(i.defaultmarkershape, SHAPE_CIRCLE),\n        labelSepChar: pluck(i.labelsepchar, COMMASPACE),\n        tooltipSepChar: pluck(i.tooltipsepchar, ', '),\n        autoScale: pluckNumber(i.autoscalemarkers, 0),\n        tooltext: pluck(j && j.tooltext, i.markertooltext),\n        dataEnabled: r,\n        valueToRadius: pluckNumber(i.markerradiusfromvalue, 1),\n        valueMarkerAlpha: pluck(i.valuemarkeralpha, '75'),\n        hideNull: pluckNumber(i.hidenullmarkers, 0),\n        nullRadius: pluckNumber(i.nullmarkerradius, i.markerradius, 7),\n        adjustViewPort: pluckNumber(i.adjustviewportformarkers, 0),\n        startAngle: pluckNumber(i.markerstartangle, 90),\n        maxRadius: pluckNumber(i.maxmarkerradius, 0),\n        minRadius: pluckNumber(i.minmarkerradius, 0),\n        applyAll: pluckNumber(i.applyallmarkers, 0),\n        shadow: pluckNumber(i.showmarkershadow, i.showshadow, 0)\n      }, b.connectorOpts = {\n        showHoverEffect: pluckNumber(i.showconnectorhovereffect, 1),\n        thickness: pluckNumber(i.connectorthickness, i.markerconnthickness, '2'),\n        color: pluck(i.connectorcolor, i.markerconncolor, k.markerbordercolor),\n        alpha: pluck(i.connectoralpha, i.markerconnalpha, '100'),\n        hoverThickness: pluckNumber(i.connectorhoverthickness, i.connectorthickness, i.markerconnthickness, '2'),\n        hoverColor: pluck(i.connectorhovercolor, i.connectorcolor, i.markerconncolor, k.markerbordercolor),\n        hoverAlpha: pluck(i.connectorhoveralpha, i.connectoralpha, i.markerconnalpha, '100'),\n        dashed: pluckNumber(i.connectordashed, i.markerconndashed, 0),\n        dashLen: pluckNumber(i.connectordashlen, i.markerconndashlen, 3),\n        dashGap: pluckNumber(i.connectordashgap, i.markerconndashgap, 2),\n        font: pluck(i.connectorfont, i.markerconnfont, d),\n        fontColor: pluck(i.connectorfontcolor, i.markerconnfontcolor, c),\n        fontSize: pluckNumber(i.connectorfontsize, i.markerconnfontsize, parseInt(e, 10)),\n        showLabels: pluckNumber(i.showconnectorlabels, i.showmarkerlabels, i.showlabels, 1),\n        labelBgColor: pluck(i.connectorlabelbgcolor, i.markerconnlabelbgcolor, k.plotfillcolor),\n        labelBorderColor: pluck(i.connectorlabelbordercolor, i.markerconnlabelbordercolor, k.markerbordercolor),\n        shadow: pluckNumber(i.showconnectorshadow, i.showmarkershadow, i.showshadow, 0),\n        showTooltip: pluckNumber(i.showconnectortooltip, i.showmarkertooltip, i.showtooltip, 1),\n        tooltext: pluck(j && j.connectortooltext, i.connectortooltext),\n        hideOpen: pluckNumber(i.hideopenconnectors, 1)\n      }, b.adjustViewPortForMarkers = pluckNumber(i.adjustviewportformarkers, r);\n    }\n  }, {\n    key: \"_attachMouseEvents\",\n    value: function _attachMouseEvents() {\n      var a = this,\n          b = a.getFromEnv('eventListeners'),\n          c = a.getFromEnv('chart-container');\n      b.push(domEvtHandler.listen(c, hasTouch ? 'touchstart' : 'click', Maps.searchMouseMove, a)), b.push(domEvtHandler.listen(window.document, hasTouch ? 'touchstart' : 'mousemove', Maps.searchMouseMove, a));\n    }\n  }, {\n    key: \"_dispose\",\n    value: function _dispose() {\n      var a = this,\n          b = a.getFromEnv('chart-container');\n      hasTouch && (domEvtHandler.unlisten(b, 'touchstart', Maps.searchMouseMove), domEvtHandler.unlisten(window.document, 'touchstart', Maps.searchMouseMove)), domEvtHandler.unlisten(b, 'click', Maps.searchMouseMove), domEvtHandler.unlisten(window.document, 'mousemove', Maps.searchMouseMove), _get(_getPrototypeOf(Maps.prototype), \"_dispose\", this).call(this);\n    }\n  }, {\n    key: \"_searchNearestNeighbour\",\n    value: function _searchNearestNeighbour(a, b) {\n      var c,\n          d = this,\n          e = d.getDatasets(),\n          f = e[1];\n\n      if (f) {\n        if (!f.components.kDTree) return;\n        c = f.getElement(a), c ? f.highlightPoint(c, b) : f.highlightPoint(!1, b);\n      }\n    }\n  }, {\n    key: \"_createLayers\",\n    value: function _createLayers() {\n      _get(_getPrototypeOf(Maps.prototype), \"_createLayers\", this).call(this), this._attachMouseEvents();\n    }\n  }, {\n    key: \"_parseBackgroundCosmetics\",\n    value: function _parseBackgroundCosmetics() {\n      var a,\n          b = this,\n          c = b.getChildren('background')[0],\n          d = c.config,\n          e = b.getChildren('colorPalette')[0],\n          f = b.getFromEnv('chart-attrib');\n      a = d.showBorder = pluckNumber(f.showcanvasborder, 1), d.borderWidth = a ? pluckNumber(f.canvasborderthickness, 1) : 0, d.borderRadius = d.borderRadius = pluckNumber(f.canvasborderradius, 0), d.borderDashStyle = d.borderDashStyle = pluckNumber(f.borderdashed, 0) ? getDashStyle(pluckNumber(f.borderdashlen, 4), pluckNumber(f.borderdashgap, 2)) : DASH_DEF, d.borderAlpha = pluck(f.canvasborderalpha, e.borderAlpha), d.borderColor = d.borderColor = convertColor(pluck(f.canvasbordercolor, e && e.borderColor), d.borderAlpha);\n    }\n  }, {\n    key: \"_getBackgroundCosmetics\",\n    value: function _getBackgroundCosmetics() {\n      var a = this,\n          b = a.getFromEnv('chart-attrib') || a.jsonData.map,\n          c = a.getChildren('colorPalette')[0];\n      return {\n        FCcolor: {\n          color: pluck(b.bgcolor, b.canvasbgcolor, c.bgcolor),\n          alpha: pluck(b.bgalpha, b.canvasbgalpha, c.bgalpha),\n          angle: pluck(b.bgangle, b.canvasbgangle, c.bgangle),\n          ratio: pluck(b.bgratio, b.canvasbgratio, c.bgratio)\n        }\n      };\n    }\n  }, {\n    key: \"_parseCanvasCosmetics\",\n    value: function _parseCanvasCosmetics() {\n      _get(_getPrototypeOf(Maps.prototype), \"_parseCanvasCosmetics\", this).call(this);\n\n      var a = this,\n          b = a.config,\n          c = a.getFromEnv('chart-attrib') || a.jsonData.map,\n          d = a.getChildren('canvas')[0].config;\n      b.origMarginTop = pluckNumber(c.maptopmargin, 11), b.origMarginLeft = pluckNumber(c.mapleftmargin, 11), b.origMarginBottom = pluckNumber(c.mapbottommargin, 11), b.origMarginRight = pluckNumber(c.maprightmargin, 11), b.origCanvasLeftMargin = pluckNumber(c.canvasleftmargin, 0), b.origCanvasRightMargin = pluckNumber(c.canvasrightmargin, 0), b.origCanvasTopMargin = pluckNumber(c.canvastopmargin, 0), b.origCanvasBottomMargin = pluckNumber(c.canvasbottommargin, 0), d.canvasBorderRadius = pluckNumber(c.canvasborderradius, 0), d.origCanvasTopPad = pluckNumber(c.canvastoppadding, 0), d.origCanvasBottomPad = pluckNumber(c.canvasbottompadding, 0), d.origCanvasLeftPad = pluckNumber(c.canvasleftpadding, 0), d.origCanvasRightPad = pluckNumber(c.canvasrightpadding, 0);\n    }\n  }, {\n    key: \"preliminaryScaling\",\n    value: function preliminaryScaling() {\n      var a,\n          b,\n          c,\n          d = this,\n          e = d.jsonData,\n          f = e.markers && e.markers.items || [],\n          g = f && f.length || 0,\n          h = 1 / 0,\n          j = 1 / 0,\n          k = -Infinity,\n          l = -Infinity;\n\n      for (; g--;) {\n        c = f[g], a = +c.x, b = +c.y, h = mathMin(h, a), j = mathMin(j, b), k = mathMax(k, a), l = mathMax(l, b);\n      }\n\n      return {\n        x: h,\n        y: j,\n        x1: k,\n        y1: l\n      };\n    }\n  }, {\n    key: \"getScalingParameters\",\n    value: function getScalingParameters(a, b, c, d) {\n      var e,\n          f,\n          g = this,\n          h = a / b,\n          i = c / (a * g.config.baseScaleFactor),\n          j = d / (b * g.config.baseScaleFactor),\n          k = 0,\n          l = 0;\n      return i > j ? (e = j, k += (c - d * h) / 2, f = 200 / (b * e)) : (e = i, l += (d - c / h) / 2, f = 200 / (a * e)), {\n        scaleFactor: e,\n        strokeWidth: f,\n        translateX: k,\n        translateY: l\n      };\n    }\n  }, {\n    key: \"calculateMarkerBounds\",\n    value: function calculateMarkerBounds(a, b, c) {\n      var d,\n          e,\n          f,\n          g,\n          h,\n          j,\n          k,\n          l,\n          m,\n          n,\n          o,\n          p,\n          q,\n          s,\n          t = this,\n          u = t.config,\n          v = u.markerOpts,\n          w = t.getDatasets(),\n          z = t.getDataLimits(),\n          A = z.dataMin,\n          B = z.dataMax,\n          C = v.hideNull,\n          D = v.nullRadius,\n          E = v.valueToRadius,\n          F = 1 / 0,\n          G = 1 / 0,\n          H = -Infinity,\n          I = -Infinity;\n\n      for (j = 0, m = w.length; j < m; j++) {\n        l = w[j], k = l.getName(), 'markers' === k && (d = l);\n      }\n\n      if (d) for (j in d.calculateMarkerRadiusLimits(), e = d.config || {}, f = e.minRadius, g = e.maxRadius, h = d.components && d.components.markerObjs || {}, h) {\n        if (s = h[j], u = s.config, q = u.definition || {}, null !== u.cleanValue) E && q.radius === UNDEF && (u.radius = f + (g - f) * (u.cleanValue - A) / (B - A));else {\n          C ? u.__hideMarker = !0 : null === u.radius && (u.radius = D);\n          continue;\n        }\n        p = +u.radius, n = (+q.x + b) * a, o = (+q.y + c) * a, F = mathMin(F, n - p), G = mathMin(G, o - p), H = mathMax(H, n + p), I = mathMax(I, o + p);\n      }\n      return {\n        x: F,\n        y: G,\n        x1: H,\n        y1: I\n      };\n    }\n  }, {\n    key: \"_spaceManager\",\n    value: function _spaceManager() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          i,\n          j = this,\n          k = j.config,\n          l = j.getChildren('legend') && j.getChildren('legend')[0],\n          m = l && l.config.legendPos,\n          n = j.getFromEnv('chart-attrib'),\n          o = k.showBorder,\n          p = k.origMarginLeft,\n          q = k.origMarginTop,\n          r = j.config.baseWidth,\n          s = j.config.baseHeight,\n          t = {},\n          u = 0,\n          v = 0,\n          w = k.markerOpts,\n          x = k.borderWidth = o ? pluckNumber(n.borderthickness, 1) : 0;\n      j._allocateSpace({\n        top: x,\n        bottom: x,\n        left: x,\n        right: x\n      }), j._allocateSpace(j._manageActionBarSpace && j._manageActionBarSpace(.225 * k.availableHeight) || {}), h = 'right' === m ? .3 * k.canvasWidth : .3 * k.canvasHeight, k.showLegend && j._manageLegendSpace(h), a = m === POSITION_BOTTOM ? .225 * k.canvasHeight : .225 * k.canvasWidth, i = j._manageChartMenuBar(a), c = k.canvasWidth, d = k.canvasHeight, w.dataEnabled ? (k.adjustViewPortForMarkers ? (t = j.preliminaryScaling(), t.x1 > r && (r = t.x1), 0 > t.x && (r += -t.x, u = -t.x), t.y1 > s && (s = t.y1), 0 > t.y && (s += -t.y, v = -t.y), b = j.getScalingParameters(r, s, c, d), t = j.calculateMarkerBounds(b.scaleFactor * j.config.baseScaleFactor, u, v), f = d, g = c, 0 > t.x && (p += -t.x, c += t.x), 0 > t.y && (q += -t.y, d += t.y), t.x1 > g && (c -= t.x1 - g), t.y1 > f && (d -= t.y1 - f)) : (b = j.getScalingParameters(r, s, c, d), j.calculateMarkerBounds(b.scaleFactor * j.config.baseScaleFactor, u, v)), b = j.getScalingParameters(r, s, c, d), p += u * b.scaleFactor * j.config.baseScaleFactor, q += v * b.scaleFactor * j.config.baseScaleFactor) : b = j.getScalingParameters(r, s, c, d), j.config.scalingParams = b, e = b.scaleFactor, b.translateX += p, b.translateY = b.translateY + q + i.top || 0, b.sFactor = 100 * (e * j.config.baseScaleFactor) / 100, b.transformStr = ['t', b.translateX, ',', b.translateY, 's', e, ',', e, ',0,0'].join(''), j.config.annotationConfig = {\n        id: 'Geo',\n        showbelow: 0,\n        autoscale: 0,\n        grpxshift: b.translateX ? b.translateX : 0,\n        grpyshift: b.translateY ? b.translateY : 0,\n        xscale: 100 * (e ? e * j.config.baseScaleFactor : 1),\n        yscale: 100 * (e ? e * j.config.baseScaleFactor : 1),\n        scaletext: 1,\n        options: {\n          useTracker: !0\n        }\n      };\n    }\n  }, {\n    key: \"getDataLimits\",\n    value: function getDataLimits() {\n      var a,\n          b,\n          c,\n          d = this,\n          e = d.getDatasets(),\n          f = e.length,\n          g = +Infinity,\n          h = -Infinity;\n\n      for (c = 0; c < f; c++) {\n        a = e[c], b = a.getDataLimits(), g = mathMin(g, b.min), h = mathMax(h, b.max);\n      }\n\n      return {\n        dataMin: g,\n        dataMax: h\n      };\n    }\n  }, {\n    key: \"getEntityPaths\",\n    value: function getEntityPaths(a) {\n      var b,\n          c = {},\n          d = this.config.entities;\n\n      if (a) {\n        for (b in d) {\n          c[b] = d[b];\n        }\n\n        return c;\n      }\n\n      return d;\n    }\n  }, {\n    key: \"checkComplete\",\n    value: function checkComplete() {\n      var a = this;\n      a.config.entityFlag && a.config.entitiesReady && (a.config.entityFlag = !1, a.config.markersDrawn = !0, a.fireChartInstanceEvent('internal.mapdrawingcomplete', {\n        renderer: a\n      }));\n    }\n  }], [{\n    key: \"getName\",\n    value: function getName() {\n      return 'maps';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'chartAPI';\n    }\n  }, {\n    key: \"searchMouseMove\",\n    value: function searchMouseMove(a) {\n      var b,\n          c = a.data,\n          d = c.config,\n          e = c.getDatasets(),\n          f = e[1],\n          g = f && f.getFromEnv('toolTipController'),\n          h = f && f.config.currentToolTip,\n          i = c.config.lastHoveredPoint,\n          j = {};\n      c.getFromEnv('chart-container') && c.config.lastInteractionEvent !== a.originalEvent && (c.config.lastInteractionEvent = a.originalEvent, (b = isWithinCanvas(a, c)) && b.insideCanvas ? (d.lastMouseEvent = a, j = {\n        x: b.chartX,\n        y: b.chartY\n      }, c._searchNearestNeighbour(j, a)) : (i && f && f.hoverOutFn.call(i.element), c.config.lastHoveredPoint = null, g && g.hide(h)));\n    }\n  }]);\n\n  return Maps;\n}(MSCartesian);\n\nexport default Maps;","map":null,"metadata":{},"sourceType":"module"}