{"ast":null,"code":"import { getAlignImage } from '../../image-alignment';\nexport default function (a) {\n  var b,\n      c = 'top',\n      d = 'middle',\n      e = 'bottom',\n      f = 'left',\n      g = 'right',\n      h = function h(a) {\n    return function () {\n      a.hide();\n\n      for (var _b = 0, _c = a._.gridElem && a._.gridElem.length; _b < _c; _b++) {\n        a._.gridElem[_b].remove();\n      }\n\n      a._.gridElem = [], a._attr({\n        src: a._._src\n      }), setTimeout(function () {\n        a.show();\n      }, 100);\n    };\n  },\n      i = function i(a, c, d) {\n    return function () {\n      var e,\n          f,\n          g,\n          h = j(a._.imageGridAttr, c),\n          i = 1,\n          k = 1,\n          l = 1;\n\n      if (h.tileInfo && (i = h.tileInfo.xCount, k = l = h.tileInfo.yCount, g = h.y, delete h.tileInfo), a._.gridElem) {\n        for (f = 0; f < a._.gridElem.length; f++) {\n          a._.gridElem[f].remove();\n        }\n\n        a._.gridElem.length = 0;\n      }\n\n      for (f = 0; i && h.width && h.height;) {\n        l--, 0 === f ? a.attr(d ? Object.assign(h, {\n          applysrc: a._._src\n        }) : h) : (e = a.clone().attr({\n          x: h.x,\n          y: h.y\n        }), a._.gridElem.push(e.follow(a, b, 'after'))), h.y += h.height, 0 === l && (l = k, i--, h.x += h.width, h.y = g), f++;\n      }\n    };\n  },\n      j = function j(a, b) {\n    var c;\n\n    if (a) {\n      var _d = a.displayMode,\n          _e = a.vAlign,\n          _f = a.hAlign,\n          _g = a.scale,\n          _h = a.canvasBorderWidth,\n          _i = a.canvasWidth,\n          _j = a.canvasHeight,\n          k = b.width * (_g / 100),\n          l = b.height * (_g / 100);\n      c = getAlignImage(_e, _f, _d, k, l, _i, _j, _h, _i - 2 * _h, _j - 2 * _h);\n    }\n\n    return c || {\n      x: 0,\n      y: 0,\n      width: b.width,\n      height: b.height\n    };\n  };\n\n  a.define && a.define([{\n    name: 'imagegrid',\n    imagegrid: function imagegrid() {\n      var c,\n          d,\n          e = this,\n          f = arguments,\n          g = f.length - 1,\n          j = f[g];\n      return j && j.constructor === a.el.constructor ? f[g] = b : j = b, c = new Image(), d = e.image(j), d._.gridElem = [], d._.refImage = c, d._attr = d.attr, d.attr = function (a, c) {\n        var e = Array.isArray(a),\n            f = !e && 'object' == typeof a,\n            g = 'string' == typeof a;\n\n        if (e && (a = a[0], f = 'object' == typeof a), f) {\n          var _b2 = Object.assign({}, a),\n              _c2 = _b2 && _b2.src,\n              _e2 = _b2 && _b2.applysrc;\n\n          delete _b2.src, delete _b2.applysrc, _c2 && delete d._._src, d._attr(_b2), _c2 && d._attr({\n            _src: _c2\n          }), _e2 && d._attr({\n            src: _e2\n          });\n        } else {\n          if (a === b && c === b) return this.attrs;\n          if (c === b) return this.attrs[a];\n          g && c && ('src' === a ? d._attr({\n            _src: c\n          }) : 'applysrc' === a ? d._attr({\n            src: c\n          }) : d._attr({\n            name: c\n          }));\n        }\n\n        return this;\n      }, c.onload = i(d, c, !0), c.onerror = h(d), d;\n    },\n    ca: {\n      imagegrid: function imagegrid(a, b, h) {\n        var j = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;\n        var k = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        var l = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n        var m = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n        var n = this;\n        a === 'tile' || a === 'fill' || a === 'fit' ? (b !== c && b !== d && b !== e && (b = d), h !== f && h !== d && h !== g && (h = d)) : (b !== c && b !== d && b !== e && (b = c), h !== f && h !== d && h !== g && (h = f)), n._.imageGridAttr = {\n          displayMode: a,\n          vAlign: b,\n          hAlign: h,\n          scale: j,\n          canvasBorderWidth: k,\n          canvasWidth: l,\n          canvasHeight: m\n        }, this._._src && i(n, n._.refImage)();\n      },\n      _src: function _src(a) {\n        return this._.refImage.src = a, this._._src = a, {\n          _src: a\n        };\n      }\n    }\n  }]);\n}","map":null,"metadata":{},"sourceType":"module"}