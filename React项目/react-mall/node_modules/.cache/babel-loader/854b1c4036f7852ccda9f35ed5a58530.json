{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\src\\\\components\\\\Content\\\\Food\\\\Add\\\\Step\\\\Step.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport './Add.less';\nvar createForm = Form.create;\nvar FormItem = Form.Item;\n\nfunction noop() {\n  return false;\n}\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n*/\n\n\nvar StepOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepOne, _Component);\n\n  function StepOne() {\n    _classCallCheck(this, StepOne);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StepOne).call(this));\n  }\n\n  _createClass(StepOne, [{\n    key: \"handleReset\",\n    value: function handleReset(e) {\n      //resetFields重置表单内容\n      e.preventDefault();\n      this.props.form.resetFields();\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      //表单内容提交组件,校验并获取一组输入域的值与 Error\t\n      e.preventDefault();\n      console.log(this.props.form.getFieldError(\"name\"));\n      this.props.form.validateFields(function (errors, values) {\n        if (!!errors) {\n          console.log('Errors in form!!!');\n          return;\n        }\n\n        console.log('Submit!!!');\n      });\n    }\n  }, {\n    key: \"userExists\",\n    value: function userExists(rule, value, callback) {\n      //当做validator函数来用,用来作为判断条件\n      if (!value) {\n        callback();\n      } else {\n        setTimeout(function () {\n          if (value === '宫爆鸡丁') {\n            callback([new Error('抱歉，该菜名已被占用。')]);\n          } else {\n            callback();\n          }\n        }, 800);\n      }\n    }\n  }, {\n    key: \"checkPass\",\n    value: function checkPass(rule, value, callback) {\n      var validateFields = this.props.form.validateFields;\n\n      if (value) {\n        validateFields(['rePasswd'], {\n          force: true\n        });\n      }\n\n      callback();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      console.log(this.props.form.getFieldError(\"name\")); //返回值     [\"wocao  111\"]\n      //          [\"菜品名至少为 1个字符\"]  message \n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldProps = _this$props$form.getFieldProps,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldValidating = _this$props$form.isFieldValidating;\n      var nameProps = getFieldProps('name', {\n        //第一个参数为ID,第二个为options\n\n        /* \r\n        getFieldProps options \r\n        */\n        rules: [{\n          required: true,\n          min: 1,\n          message: '菜品名至少为 1 个字符',\n          trigger: 'onblur'\n        }, {\n          validator: this.userExists.bind(this)\n        },, {\n          validator: function validator(rule, value, callback, source, options) {\n            var errors = [];\n            console.log(value, \"Xx\");\n\n            if (value == 1) {\n              callback(\"报错\");\n            } else {\n              callback(); //  成功后显示在页面上的值\n              //  [\"菜品名至少为 1 个字符\", 22222]\n            }\n          }\n        }]\n      });\n      var textareaProps = getFieldProps('textarea', {\n        rules: [{\n          required: true,\n          min: 1,\n          message: '输入内容不能为空'\n        }]\n      });\n      var formItemLayout = {\n        labelCol: {\n          span: 7\n        },\n        wrapperCol: {\n          span: 12\n        }\n      };\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u540D\\u79F0\\uFF1A\",\n        hasFeedback: true,\n        help: isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', '),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, nameProps, {\n        placeholder: \" \\u8F93\\u5165 \\u5BAB\\u7206\\u9E21\\u4E01 \\u770B\\u770B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u7C7B\\u578B\\uFF1A\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, textareaProps, {\n        type: \"textarea\",\n        placeholder: \"\\u83DC\\u54C1\\u540D\\u79F0\",\n        id: \"textarea\",\n        name: \"textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        onClick: this.handleReset.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \" Reset\"), React.createElement(Button, {\n        onClick: this.handleSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \" Submit\"));\n    }\n  }]);\n\n  return StepOne;\n}(Component);\n\nStepOne = createForm()(StepOne); //将Form表单,通过props获取到各种方法\n\nexport default StepOne; // class StepTwo extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepTwo\">\n//         11111111111111111\n//        </div>\n//     )\n//   }\n// }\n// class StepThree extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepThree\">\n//         22222222222222\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\components\\Content\\Food\\Add\\Step\\Step.js"],"names":["React","Component","Button","Form","Input","createForm","create","FormItem","Item","noop","StepOne","e","preventDefault","props","form","resetFields","console","log","getFieldError","validateFields","errors","values","rule","value","callback","setTimeout","Error","force","getFieldProps","isFieldValidating","nameProps","rules","required","min","message","trigger","validator","userExists","bind","source","options","textareaProps","formItemLayout","labelCol","span","wrapperCol","join","handleReset","handleSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport './Add.less';\r\n\r\nconst createForm = Form.create;\r\nconst FormItem = Form.Item;\r\nfunction noop() {\r\n  return false;\r\n}\r\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n*/\r\nclass StepOne extends Component {\r\n  constructor() {\r\n    super()\r\n  }\r\n  handleReset(e) {\r\n    //resetFields重置表单内容\r\n    e.preventDefault();\r\n    this.props.form.resetFields();\r\n  };\r\n  handleSubmit(e) {\r\n    //表单内容提交组件,校验并获取一组输入域的值与 Error\t\r\n    e.preventDefault();\r\n    console.log(this.props.form.getFieldError(\"name\"))\r\n\r\n    this.props.form.validateFields((errors, values) => {\r\n      if (!!errors) {\r\n        console.log('Errors in form!!!');\r\n        return;\r\n      }\r\n      console.log('Submit!!!');\r\n    });\r\n  };\r\n\r\n  userExists(rule, value, callback) {\r\n    //当做validator函数来用,用来作为判断条件\r\n    if (!value) {\r\n      callback();\r\n    } else {\r\n      setTimeout(() => {\r\n        if (value === '宫爆鸡丁') {\r\n          callback([new Error('抱歉，该菜名已被占用。')]);\r\n        } else {\r\n          callback();\r\n        }\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n  checkPass(rule, value, callback) {\r\n    const { validateFields } = this.props.form;\r\n    if (value) {\r\n      validateFields(['rePasswd'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n\r\n  componentWillReceiveProps() {\r\n    console.log(this.props.form.getFieldError(\"name\"))\r\n    //返回值     [\"wocao  111\"]\r\n    //          [\"菜品名至少为 1个字符\"]  message \r\n  };\r\n  render() {\r\n    const { getFieldProps, getFieldError, isFieldValidating } = this.props.form;\r\n    const nameProps = getFieldProps('name', { //第一个参数为ID,第二个为options\r\n      /* \r\n      getFieldProps options \r\n      */\r\n      rules: [\r\n        { required: true, min: 1, message: '菜品名至少为 1 个字符', trigger: 'onblur' },\r\n        { validator: this.userExists.bind(this) },\r\n        , {\r\n          validator(rule, value, callback, source, options) {\r\n            var errors = [];\r\n            console.log(value, \"Xx\") \r\n\r\n            if (value == 1) {\r\n              callback(\"报错\");\r\n            } else {\r\n              callback();\r\n              //  成功后显示在页面上的值\r\n              //  [\"菜品名至少为 1 个字符\", 22222]\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    const textareaProps = getFieldProps('textarea', {\r\n      rules: [\r\n        { required: true, min: 1, message: '输入内容不能为空' },\r\n      ],\r\n    });\r\n    const formItemLayout = {\r\n      labelCol: { span: 7 },\r\n      wrapperCol: { span: 12 },\r\n    };\r\n\r\n\r\n    return (\r\n      <Form >\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品名称：\"\r\n          hasFeedback\r\n          help={isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', ')}\r\n        >\r\n          <Input {...nameProps} placeholder=\" 输入 宫爆鸡丁 看看\"\r\n          />\r\n        </FormItem>\r\n\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品类型：\"\r\n         >\r\n          <Input {...textareaProps} \r\n          type=\"textarea\" \r\n          placeholder=\"菜品名称\" \r\n          id=\"textarea\" \r\n          name=\"textarea\"\r\n          />\r\n        </FormItem>\r\n        <Button onClick={this.handleReset.bind(this)} > Reset</Button >\r\n        <Button onClick={this.handleSubmit.bind(this)}> Submit</Button >\r\n      </Form>\r\n\r\n    );\r\n  }\r\n}\r\nStepOne = createForm()(StepOne);//将Form表单,通过props获取到各种方法\r\n\r\n\r\nexport default StepOne\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class StepTwo extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepTwo\">\r\n//         11111111111111111\r\n//        </div>\r\n//     )\r\n//   }\r\n// }\r\n// class StepThree extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepThree\">\r\n//         22222222222222\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}