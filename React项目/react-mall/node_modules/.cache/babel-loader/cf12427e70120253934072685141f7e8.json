{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { SmartRenderer } from '../../component-interface';\nimport { pluckNumber, touchEnabled, pluck, convertColor } from '../../lib';\nimport { preConfig as _preConfig } from './helper';\nimport { UNDEF } from '../../../../fc-features/src/annotation/utils';\n\nvar _optionSanitization = function _optionSanitization(a) {\n  for (var b in a) {\n    if (a.hasOwnProperty(b)) {\n      var c = a[b];\n      (c === UNDEF || '' === c) && delete a[b];\n    }\n  }\n\n  return a;\n};\n\nvar Tool =\n/*#__PURE__*/\nfunction (_SmartRenderer) {\n  _inherits(Tool, _SmartRenderer);\n\n  function Tool(a) {\n    var _this;\n\n    _classCallCheck(this, Tool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tool).call(this, a)), _this._listeners = {};\n    return _this;\n  }\n\n  _createClass(Tool, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'button';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'tool';\n    }\n  }, {\n    key: \"__setDefaultConfig\",\n    value: function __setDefaultConfig() {\n      var a = this,\n          b = a.config;\n      b.scale = 1.15, b.width = touchEnabled ? 20 : 15, b.height = touchEnabled ? 20 : 15, b.radius = touchEnabled ? 4 : 2, b.spacing = 2.5, b.marginTop = 2.5, b.marginLeft = 2.5, b.marginRight = 2.5, b.marginBottom = 2.5, b.fill = 'ffffff', b.fillAlpha = 'cccccc', b.symbolFill = 'ffffff', b.stroke = 'bbbbbb', b.symbolStroke = '9a9a9a', b.strokeWidth = 1, b.symbolStrokeWidth = 1, b.symbolPadding = 5, b.symbolHPadding = 5, b.symbolVPadding = 5, b.fillAlpha = 100, b.stateStyle = {}, b.text = '', b.marginTop = b.marginLeft = b.marginRight = b.marginBottom = 2.5, b.labelFontSize = 12;\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var b,\n          c,\n          d,\n          e = this,\n          f = e.config;\n      a = _optionSanitization(a), Object.assign(f, a), f.symbolName = f.name, this.setState('visible', !0 !== f.isHidden), f.marginTop = pluckNumber(a.marginTop, a.spacing, f.marginTop), f.marginLeft = pluckNumber(a.marginLeft, a.spacing, f.marginLeft), f.marginRight = pluckNumber(a.marginRight, a.spacing, f.marginRight), f.marginBottom = pluckNumber(a.marginBottom, a.spacing, f.marginBottom), f.fill = pluck(a.fill, f.fill), f.fillAlpha = pluckNumber(a.fillAlpha, f.fillAlpha), f.labelFill = pluck(a.labelFill, f.labelFill), f.symbolFill = pluck(a.symbolFill, f.symbolFill), f.hoverFill = pluck(a.hoverFill, f.hoverFill), f.stroke = pluck(a.stroke, f.stroke), f.symbolStroke = pluck(a.symbolStroke, f.symbolStroke), f.strokeWidth = pluckNumber(a.strokeWidth, f.strokeWidth), f.symbolStrokeWidth = pluckNumber(a.symbolStrokeWidth, f.symbolStrokeWidth), b = f.symbolPadding = pluckNumber(a.symbolPadding, f.symbolPadding), f.symbolHPadding = pluckNumber(a.symbolHPadding, b), f.symbolVPadding = pluckNumber(a.symbolVPadding, b), f.hAlign = pluck(a.hAlign, 'center').toLowerCase(), f.vAlign = pluck(a.vAlign, 'middle').toLowerCase(), f.containerInfo = a.containerInfo || {\n        id: 'group',\n        label: 'group',\n        isParent: !0\n      }, c = a.x, d = a.y, 'undefined' == typeof c || 'undefined' == typeof d ? f.spaceNotHardCoded = !0 : (f.x = c, f.y = d, f.spaceNotHardCoded = !1);\n    }\n  }, {\n    key: \"setDimension\",\n    value: function setDimension() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var b = this.config;\n      a.x !== void 0 && (b.x = a.x), a.y !== void 0 && (b.y = a.y), a.width !== void 0 && (b.width = b.width && b.width > a.width ? b.width : a.width), a.height !== void 0 && (b.height = b.height && b.height > a.height ? b.height : a.height);\n    }\n  }, {\n    key: \"getAlignment\",\n    value: function getAlignment() {\n      return {\n        hAlign: this.config.hAlign,\n        vAlign: this.config.vAlign\n      };\n    }\n  }, {\n    key: \"getLogicalSpace\",\n    value: function getLogicalSpace() {\n      var _this$config = this.config,\n          a = _this$config.width,\n          b = _this$config.height,\n          c = _this$config.marginTop,\n          d = _this$config.marginLeft,\n          e = _this$config.marginRight,\n          f = _this$config.marginBottom,\n          g = _this$config.scale;\n      return a *= g, b *= g, (this.config.skipGraphics || this.config.isHidden || this.getState('removed')) && (a = b = f = d = e = c = 0), {\n        width: a,\n        height: b,\n        marginTop: c,\n        marginLeft: d,\n        marginRight: e,\n        marginBottom: f\n      };\n    }\n  }, {\n    key: \"setCurrentState\",\n    value: function setCurrentState(a) {\n      this.config.state = a, this.asyncDraw();\n    }\n  }, {\n    key: \"getCurrentState\",\n    value: function getCurrentState() {\n      return this.config.state;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a,\n          b,\n          c,\n          d = this,\n          e = d.config,\n          f = e,\n          g = e.text,\n          h = e.labelFontSize,\n          i = e.labelFontFamily;\n      e.skipGraphics || (a = {\n        width: e.width * e.scale,\n        height: e.height * e.scale,\n        r: e.radius,\n        verticalPadding: e.symbolVPadding * e.scale,\n        horizontalPadding: e.symbolHPadding\n      }, b = Object.assign({\n        button: [e.x, e.y, g, e.symbolName, a, h, i],\n        \"button-label\": g,\n        \"button-padding\": [e.symbolHPadding, e.symbolVPadding * e.scale],\n        \"button-repaint\": [f.x, f.y, e.width * e.scale, e.height * e.scale, e.radius * e.scale],\n        fill: convertColor(e.fill),\n        labelFill: convertColor(e.labelFill),\n        symbolFill: convertColor(e.symbolFill),\n        hoverFill: e.hoverFill,\n        stroke: convertColor(e.stroke),\n        \"symbol-stroke\": convertColor(e.symbolStroke || e.stroke),\n        \"stroke-width\": e.strokeWidth,\n        \"symbol-stroke-width\": pluckNumber(e.symbolStrokeWidth, e.strokeWidth)\n      }, e.stateStyle[e.state] || _preConfig[e.state] || {}), c = e.btnTextStyle, !e.isHidden && d.addGraphicalElement({\n        el: 'button',\n        attr: b,\n        css: c,\n        component: d,\n        container: e.containerInfo,\n        label: 'button',\n        id: 'button',\n        tooltext: e.tooltext\n      }));\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.config.isHidden = !0, this.setState('visible', !1), this.asyncDraw();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.config.isHidden = !1, this.setState('visible', !0), this.asyncDraw();\n    }\n  }]);\n\n  return Tool;\n}(SmartRenderer);\n\nexport default Tool;","map":null,"metadata":{},"sourceType":"module"}