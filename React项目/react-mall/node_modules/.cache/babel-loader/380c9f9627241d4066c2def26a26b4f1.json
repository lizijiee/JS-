{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { ComponentInterface } from '../../../../fc-core/src/component-interface';\nimport { hasSVG } from '../../../../fc-core/src/lib';\nimport { addDep } from '../../../../fc-core/src/dependency-manager';\nimport mapsAnimation from '../_internal/map-entities.animation';\naddDep({\n  name: 'mapsAnimation',\n  type: 'animationRule',\n  extension: mapsAnimation\n});\n\nvar MapGroup =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(MapGroup, _ComponentInterface);\n\n  function MapGroup() {\n    _classCallCheck(this, MapGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapGroup).apply(this, arguments));\n  }\n\n  _createClass(MapGroup, [{\n    key: \"getType\",\n    value: function getType() {\n      return 'group';\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'mapGroup';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var a = this;\n\n      a._mapChildren(function (a) {\n        a.configure && a.configure();\n      });\n    }\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      var a,\n          b = this,\n          c = b.getLinkedParent(),\n          d = b.getFromEnv('animationManager'),\n          e = c.getChildContainer();\n      a = e.plotGroup, b.getChildContainer('plotShadow') || b.addChildContainer('plotShadow', d.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'manager-plot-shadow',\n          opacity: 1\n        },\n        container: a,\n        component: b,\n        label: 'group'\n      })), b.getChildContainer('plot') || b.addChildContainer('plot', d.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'manager-plot',\n          opacity: 1\n        },\n        container: a,\n        component: b,\n        label: 'group'\n      })), b.getChildContainer('layer0') || b.addChildContainer('layer0', d.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'ann-layer0',\n          opacity: 1\n        },\n        container: e.abovePlotGroup,\n        component: b,\n        label: 'group'\n      })), b.getChildContainer('layer1') || b.addChildContainer('layer1', d.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'ann-layer1',\n          opacity: 1\n        },\n        container: e.abovePlotGroup,\n        component: b,\n        label: 'group'\n      })), c.config.labelsOnTop ? b.getChildContainer('layer0').toFront() : b.getChildContainer('layer0').toBack();\n    }\n  }, {\n    key: \"_transformGroup\",\n    value: function _transformGroup() {\n      var a = this,\n          b = this.getFromEnv('chart'),\n          c = b.getFromEnv('chartInstance'),\n          d = a.getFromEnv('animationManager'),\n          e = b.jsonData,\n          f = a.getChildContainer('plot'),\n          g = a.getChildContainer('plotShadow'),\n          h = b.config.scalingParams;\n      f.hide(), g.hide(), b.config.entitiesReady = !1, c.addEventListener('internal.mapdrawingcomplete', function () {\n        return function (b) {\n          b.detachHandler(), hasSVG && (c.args.link && c.args.clickedEntityBox && 'scale' === e.chart.linkedcharttransition ? (f && d.setAnimation({\n            el: f,\n            attr: {\n              transform: h.transformStr\n            },\n            component: a,\n            label: 'group'\n          }), g && d.setAnimation({\n            el: g,\n            attr: {\n              transform: h.transformStr\n            },\n            component: a,\n            label: 'group'\n          })) : (f && d.setAnimation({\n            el: f,\n            attr: {\n              transform: h.transformStr\n            },\n            component: a,\n            label: 'group'\n          }), g && d.setAnimation({\n            el: g,\n            attr: {\n              transform: h.transformStr\n            },\n            component: a,\n            label: 'group'\n          }))), f.show(), g.show();\n        };\n      }()), b.checkComplete();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      this.createContainer(), this._transformGroup();\n    }\n  }, {\n    key: \"getDataLimits\",\n    value: function getDataLimits(a) {\n      var b,\n          c = this,\n          d = +Infinity,\n          e = -Infinity,\n          f = 0,\n          g = function g(a) {\n        e = Math.max(e, a.max), d = Math.min(d, a.min);\n      };\n\n      return c._mapChildren(function (c) {\n        return c.getState('removed') || !1 === c.getState('visible') ? void (a && (b = c.getDataLimits(a), g(b))) : void (f++, b = c.getDataLimits(a), g(b));\n      }), f ? c.setState('visible', !0) : c.setState('visible', !1), this.config.range || (this.config.range = {}, this.config.range.min = this.config.dataMin, this.config.range.max = this.config.dataMax), {\n        max: e,\n        min: d\n      };\n    }\n  }]);\n\n  return MapGroup;\n}(ComponentInterface);\n\nexport default MapGroup;","map":null,"metadata":{},"sourceType":"module"}