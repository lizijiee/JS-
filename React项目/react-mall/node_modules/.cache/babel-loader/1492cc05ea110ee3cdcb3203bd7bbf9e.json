{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { ComponentInterface } from '../../../fc-core/src/component-interface';\nimport { componentFactory, getMouseCoordinate } from '../../../fc-core/src/lib';\nvar inclusionList = {\n  candlestick: !0\n};\n\nvar manageMultiCanvasCrossline =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(manageMultiCanvasCrossline, _ComponentInterface);\n\n  function manageMultiCanvasCrossline() {\n    var _this;\n\n    _classCallCheck(this, manageMultiCanvasCrossline);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(manageMultiCanvasCrossline).call(this)), _this._handlers = function (a) {\n      return {\n        onhover: function onhover(b) {\n          b.originalEvent && a.show(b);\n        },\n        onhoverout: function onhoverout(b) {\n          b.originalEvent && a.hide(b);\n        }\n      };\n    }(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(manageMultiCanvasCrossline, [{\n    key: \"getAxesInfo\",\n    value: function getAxesInfo() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var b = arguments.length > 1 ? arguments[1] : undefined;\n      var c,\n          d,\n          e,\n          f,\n          g = this,\n          h = b.getAxes(),\n          j = [],\n          k = getMouseCoordinate(g.getFromEnv('chart-container'), a.originalEvent, g.getFromEnv('chart')),\n          l = k.chartX || 0,\n          m = k.chartY || 0;\n\n      for (c = h.length - 1; 0 <= c; c--) {\n        d = h[c].axis, e = h[c].isY, f = !!d.config.isVertical, j.push({\n          value: f ? d.getValue(m) : d.getValue(l),\n          axis: d,\n          isVertical: f,\n          isY: e\n        });\n      }\n\n      return j;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'multiCanvasCrosslineManager';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'multiCanvasCrosslineManager';\n    }\n  }, {\n    key: \"show\",\n    value: function show(a) {\n      var b,\n          c = a.sender,\n          d = this.getFromEnv('chart');\n      b = this.getAxesInfo(a, c), d.iterateComponents(function (a) {\n        'canvas' === a.getName() && a !== c && a.fireEvent('fc-mousemove', {\n          axes: b\n        });\n      });\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(a) {\n      var b = a.sender,\n          c = getMouseCoordinate(b.getFromEnv('chart-container'), a && a.originalEvent, b.getFromEnv('chart')),\n          d = c.chartX,\n          e = c.chartY;\n      b.isWithinCanvas(d, e) || this.getFromEnv('chart').iterateComponents(function (a) {\n        'canvas' === a.getName() && a !== b && a.fireEvent('fc-mouseout');\n      });\n    }\n  }]);\n\n  return manageMultiCanvasCrossline;\n}(ComponentInterface);\n\nexport default {\n  extension: function extension(a) {\n    a.addEventListener('instantiated', function (a) {\n      if (a.sender.getType && 'chartAPI' === a.sender.getType() && inclusionList[a.sender.getName && a.sender.getName()]) {\n        var b,\n            c,\n            d = a.sender;\n        d.registerFactory('multiCanvasCrossline', function () {\n          componentFactory(d, manageMultiCanvasCrossline, 'multiCanvasCrosslineManager'), b = d.getChildren('multiCanvasCrosslineManager')[0], c = b._handlers, d.iterateComponents(function (a) {\n            'canvas' === a.getName() && (a.addEventListener('fc-mouseover', c.onhover), a.addEventListener('fc-mousemove', c.onhover), a.addEventListener('fc-mouseout', c.onhoverout));\n          });\n        }, ['canvas']);\n      }\n    });\n  },\n  name: 'multi-canvas-crossline-manager',\n  type: 'extension',\n  requiresFusionCharts: !0\n};","map":null,"metadata":{},"sourceType":"module"}