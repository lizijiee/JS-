{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { ComponentInterface } from '../../../../../fc-core/src/component-interface';\nimport { pluck, pluckNumber, getValidValue, preDefStr, getContainerBackgroundColor, toRaphaelColor, chartPaletteStr, getDashStyle, convertColor } from '../../../../../fc-core/src/lib';\nimport { addDep } from '../../../../../fc-core/src/dependency-manager';\nimport backgroundAnimation from './index.animation';\n\nvar noneStr,\n    stringConstants = {\n  BACKGROUNDLOADED: 'BackgroundLoaded',\n  BACKGROUNDLOADERROR: 'BackgroundLoadError',\n  clipRectStr: 'clip-rect'\n},\n    POSITION_TOP = 'top',\n    POSITION_BOTTOM = 'bottom',\n    POSITION_MIDDLE = 'middle',\n    POSITION_RIGHT = 'right',\n    POSITION_LEFT = 'left',\n    TILE = 'tile',\n    FILL = 'fill',\n    FIT = 'fit',\n    DASH_DEF = noneStr = 'none',\n    getHandler = function getHandler(a) {\n  var b = a.config;\n  return {\n    load: function load() {\n      var c = b.bgImageDisplayMode,\n          d = b.bgImageVAlign,\n          e = b.bgImageHAlign,\n          f = b.bgImageScale,\n          g = b.bgSWFAlpha,\n          h = b.bgSWF,\n          i = a.getGraphicalElement('backgroundImage'),\n          j = i._.RefImg,\n          k = a.getFromEnv('chart');\n      k.fireChartInstanceEvent(stringConstants.BACKGROUNDLOADED, {\n        url: h,\n        bgImageAlpha: g,\n        bgImageDisplayMode: c,\n        bgImageVAlign: d,\n        bgImageHAlign: e,\n        bgImageScale: f,\n        imageheight: j.height,\n        imagewidth: j.width\n      });\n    },\n    error: function error(c) {\n      var d = b.bgImageDisplayMode,\n          e = b.bgImageVAlign,\n          f = b.bgImageHAlign,\n          g = b.bgImageScale,\n          h = b.bgSWFAlpha,\n          i = b.bgSWF,\n          j = a.getFromEnv('chart');\n      j.fireChartInstanceEvent(stringConstants.BACKGROUNDLOADERROR, {\n        url: i,\n        bgImageAlpha: h,\n        error: c,\n        bgImageDisplayMode: d,\n        bgImageVAlign: e,\n        bgImageHAlign: f,\n        bgImageScale: g\n      });\n    }\n  };\n},\n    COMMA = ',',\n    BLANKSTRING = '';\n\naddDep({\n  name: 'backgroundAnimation',\n  type: 'animationRule',\n  extension: backgroundAnimation\n});\n\nvar Background =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(Background, _ComponentInterface);\n\n  function Background() {\n    var _this;\n\n    _classCallCheck(this, Background);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Background).call(this)), _this.config.handler = getHandler(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Background, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'background';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'background';\n    }\n  }, {\n    key: \"_getBackgroundCosmetics\",\n    value: function _getBackgroundCosmetics() {\n      var a = this,\n          b = a.getFromEnv('chart-attrib'),\n          c = a.getFromEnv('color-manager'),\n          d = a.getFromEnv('chartConfig').is3D,\n          e = d ? chartPaletteStr.chart3D : chartPaletteStr.chart2D;\n      return {\n        FCcolor: {\n          color: pluck(b.bgcolor, c.getColor(e.bgColor)),\n          alpha: pluck(b.bgalpha, c.getColor(e.bgAlpha)),\n          angle: pluck(b.bgangle, c.getColor(e.bgAngle)),\n          ratio: pluck(b.bgratio, c.getColor(e.bgRatio))\n        }\n      };\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes() {\n      var a,\n          b,\n          c,\n          d,\n          e = this,\n          f = e.config,\n          g = e.getFromEnv('chart-attrib'),\n          h = e.getFromEnv('chartConfig'),\n          i = h.is3D,\n          j = e.getFromEnv('color-manager'),\n          k = f.bgImageDisplayMode = pluck(g.bgimagedisplaymode, noneStr).toLowerCase();\n      f.bgSWF = pluck(g.bgimage, g.bgswf), f.bgSWFAlpha = pluckNumber(g.bgimagealpha, g.bgswfalpha, 100), b = f.showBorder = pluckNumber(g.showborder, h.showBorder, i ? 0 : 1), f.borderWidth = Math.max(b ? pluckNumber(g.borderthickness, 1) : 0, 0), f.borderRadius = pluckNumber(g.borderradius, 0), f.borderDashStyle = pluckNumber(g.borderdashed, 0) ? getDashStyle(pluckNumber(g.borderdashlen, 4), pluckNumber(g.borderdashgap, 2), a) : DASH_DEF, f.borderAlpha = pluck(g.borderalpha, i ? '100' : j && j.getColor('borderAlpha')), f.borderColor = convertColor(pluck(g.bordercolor, i ? '#666666' : j && j.getColor('borderColor')), f.borderAlpha), f.bgImageVAlign = c = getValidValue(g.bgimagevalign, BLANKSTRING).toLowerCase(), f.bgImageHAlign = d = (g.bgimagehalign || BLANKSTRING).toLowerCase(), f.bgImageScale = pluckNumber(g.bgimagescale, 100), f.containerBackgroundColor = getContainerBackgroundColor(e.getFromEnv('chartInstance')), f.backgroundColor = e._getBackgroundCosmetics(), k === TILE || k === FILL || k === FIT ? (c !== POSITION_TOP && c !== POSITION_MIDDLE && c !== POSITION_BOTTOM && (f.bgImageVAlign = POSITION_MIDDLE), d !== POSITION_LEFT && d !== POSITION_MIDDLE && d !== POSITION_RIGHT && (f.bgImageHAlign = POSITION_MIDDLE)) : (c !== POSITION_TOP && c !== POSITION_MIDDLE && c !== POSITION_BOTTOM && (f.bgImageVAlign = POSITION_TOP), d !== POSITION_LEFT && d !== POSITION_MIDDLE && d !== POSITION_RIGHT && (f.bgImageHAlign = POSITION_LEFT));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          g = this,\n          h = g.getFromEnv('paper'),\n          i = g.getGraphicalElement('backgroundElement'),\n          j = g.getGraphicalElement('borderElement'),\n          k = g.config,\n          l = g.getFromEnv('chart'),\n          m = g.getFromEnv('chartConfig'),\n          n = k.backgroundColor,\n          o = g.getFromEnv('animationManager'),\n          p = g.getGraphicalElement('backgroundImage'),\n          q = k.bgSWF,\n          r = l.getChildContainer('backgroundGroup'),\n          s = m.width,\n          t = m.height,\n          u = k.borderWidth || 0,\n          v = k.borderRadius,\n          w = k.borderDashStyle,\n          x = k.borderColor,\n          y = k.bgSWFAlpha,\n          z = k.bgImageDisplayMode,\n          A = k.bgImageVAlign,\n          B = k.bgImageHAlign,\n          C = k.bgImageScale;\n      h.canvas.style.backgroundColor = k.containerBackgroundColor, f = s - 2 * u, e = t - 2 * u, c = {\n        x: u,\n        y: u,\n        width: 0 > f ? 0 : f,\n        height: 0 < e ? e : 0,\n        stroke: preDefStr.noneStr,\n        fill: toRaphaelColor(n)\n      }, a = o.setAnimation({\n        el: i || 'rect',\n        attr: c,\n        container: r,\n        component: g,\n        label: 'rect'\n      }), a.show(), i || g.addGraphicalElement('backgroundElement', a), f = s - u, e = t - u, c = {\n        x: u / 2,\n        y: u / 2,\n        width: 0 > f ? 0 : f,\n        height: 0 < e ? e : 0,\n        stroke: x,\n        \"stroke-width\": u,\n        \"stroke-dasharray\": w,\n        fill: preDefStr.noneStr,\n        r: v || 0\n      }, b = o.setAnimation({\n        el: j || 'rect',\n        attr: c,\n        container: r,\n        component: g,\n        label: 'rect'\n      }), b.show(), j || g.addGraphicalElement('borderElement', b), q && !g.getState('removed') ? (d = o.setAnimation({\n        el: p || 'imagegrid',\n        attr: {\n          imagegrid: [z, A, B, C, u, s, t],\n          src: q,\n          opacity: .01 * y,\n          \"clip-rect\": u + COMMA + u + COMMA + (s - 2 * u) + COMMA + (t - 2 * u)\n        },\n        container: r,\n        component: g,\n        label: 'imagegrid'\n      }), d.show(), !p && (g.addGraphicalElement('backgroundImage', d), d.on('load', k.handler.load), d.on('error', k.handler.error))) : p && g.removeGraphicalElement(p);\n    }\n  }]);\n\n  return Background;\n}(ComponentInterface);\n\nexport default Background;","map":null,"metadata":{},"sourceType":"module"}