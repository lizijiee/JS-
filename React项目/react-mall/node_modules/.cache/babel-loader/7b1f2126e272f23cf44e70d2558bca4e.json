{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { ComponentInterface } from '../../../fc-core/src/component-interface';\nimport getLinearRegressionPoints from './linear-regression';\nimport getPolynomialRegressionPoints from './polynomial-regression';\nimport { pluckNumber, pluck, toRaphaelColor } from '../../../fc-core/src/lib';\nimport { createPolynomial, createLinear } from './utility-functions';\nimport { addDep } from '../../../fc-core/src/dependency-manager';\nimport regressionLineAnimation from './regression-line.animation';\naddDep({\n  name: 'regressionLineAnimation',\n  type: 'animationRule',\n  extension: regressionLineAnimation\n});\n\nvar RegressionLineExtension =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(RegressionLineExtension, _ComponentInterface);\n\n  function RegressionLineExtension() {\n    var _this;\n\n    _classCallCheck(this, RegressionLineExtension);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegressionLineExtension).call(this)), _this._config = {\n      regressionPoints: []\n    }, _this.regressionLine = [];\n    return _this;\n  }\n\n  _createClass(RegressionLineExtension, [{\n    key: \"getType\",\n    value: function getType() {\n      return 'extension';\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'regression';\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes(a) {\n      var b = this,\n          c = b.getFromEnv('dataSource').chart,\n          d = a.config,\n          e = d.JSONData,\n          f = b._config;\n      f.regressionPoints.splice(0, f.regressionPoints.length), f.showYOnX = pluckNumber(e.showyonx, c.showyonx, 1), f.regressionLineColor = toRaphaelColor(pluck(e.regressionlinecolor, c.regressionlinecolor, d.anchorbordercolor, d.lineColor, d.anchorBgColor, 'fff000')), f.polynomialRegressionLineColor = toRaphaelColor(pluck(e.polynomialregressionlinecolor, c.polynomialregressionlinecolor, f.regressionLineColor)), f.regressionLineThickness = pluckNumber(e.regressionlinethickness, c.regressionlinethickness, e.anchorborderthickness, 1), f.polynomialRegressionLineThickness = pluckNumber(e.polynomialregressionlinethickness, c.polynomialregressionlinethickness, f.regressionLineThickness), f.regressionLineAlpha = pluckNumber(e.regressionlinealpha, c.regressionlinealpha, 100), f.polynomialRegressionLineAlpha = pluckNumber(e.polynomialregressionlinealpha, c.polynomialregressionlinealpha, f.regressionLineAlpha), createLinear(c, e) && f.regressionPoints.push(getLinearRegressionPoints(e.data, f.showYOnX)), createPolynomial(c, e) && f.regressionPoints.push(getPolynomialRegressionPoints(e.data, f.showYOnX));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this,\n          i = h._config,\n          k = h.getFromEnv('xAxis'),\n          l = h.getFromEnv('yAxis'),\n          j = h.getFromEnv('chart'),\n          m = j.getChildren('canvas')[0],\n          o = m.config,\n          p = h.getLinkedParent(),\n          q = p.getState('visible'),\n          r = h.getContainer('regressionlinecontainer'),\n          s = j.getChildContainer('abovePlotGroup'),\n          t = h.getFromEnv('animationManager'),\n          u = i.regressionPoints,\n          v = [],\n          w = [],\n          x = h.getGraphicalElement('regressionLineLinear'),\n          y = h.getGraphicalElement('regressionLinePolynomial'),\n          z = function z() {\n        this.hide();\n      };\n\n      q || (g = 'disappearing'), r = h.addContainer('regressionlinecontainer', t.setAnimation({\n        el: r || 'group',\n        attr: {\n          name: 'regressionlinecontainer',\n          \"clip-rect\": [o.canvasLeft, o.canvasTop, o.canvasWidth, o.canvasHeight]\n        },\n        container: s,\n        component: h,\n        label: 'group'\n      }));\n\n      for (var _b, _c = 0; _c < u.length; _c++) {\n        if (_b = '', v = u[_c][0], w = u[_c][1], a = w.length, 0 === v.length && 0 === w.length) d = !0, _b += 'M0,0';else if (0 !== v.length && 0 === w.length) d = !1, _b += 'M0,0';else if (0 === v.length) d = !0, _b += 'M' + k.getPixel(w[0].x) + ',' + l.getPixel(w[0].y), _b += 'L' + k.getPixel(w[a - 1].x) + ',' + l.getPixel(w[a - 1].y);else {\n          d = !1, _b += 'M' + k.getPixel(w[0].x) + ',' + l.getPixel(w[0].y), _b += ' R' + k.getPixel(w[1].x) + ',' + l.getPixel(w[1].y);\n\n          for (var _c2 = 2; _c2 < a; _c2++) {\n            _b += ' ' + k.getPixel(w[_c2].x) + ',' + l.getPixel(w[_c2].y);\n          }\n        }\n        d ? e = {\n          opacity: +i.regressionLineAlpha / 100,\n          stroke: i.regressionLineColor,\n          \"stroke-width\": i.regressionLineThickness,\n          path: _b\n        } : f = {\n          opacity: +pluck(i.polynomialRegressionLineAlpha, i.regressionLineAlpha) / 100,\n          stroke: pluck(i.polynomialRegressionLineColor, i.regressionLineColor),\n          \"stroke-width\": pluck(i.polynomialRegressionLineThickness, i.regressionLineThickness),\n          path: _b\n        };\n      }\n\n      'disappearing' !== g && (x && x.show(), y && y.show()), b = t.setAnimation({\n        el: x || 'path',\n        container: r,\n        component: h,\n        doNotRemove: !0,\n        attr: 'disappearing' !== g && e,\n        callback: 'disappearing' === g && z,\n        label: 'path'\n      }), x || h.addGraphicalElement('regressionLineLinear', b), c = t.setAnimation({\n        el: y || 'path',\n        container: r,\n        component: h,\n        doNotRemove: !0,\n        attr: 'disappearing' !== g && f,\n        callback: 'disappearing' === g && z,\n        label: 'path'\n      }), y || h.addGraphicalElement('regressionLinePolynomial', c);\n    }\n  }]);\n\n  return RegressionLineExtension;\n}(ComponentInterface);\n\nexport { RegressionLineExtension as default };","map":null,"metadata":{},"sourceType":"module"}