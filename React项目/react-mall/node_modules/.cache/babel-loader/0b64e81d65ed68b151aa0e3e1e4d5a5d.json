{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\src\\\\components\\\\Content\\\\Food\\\\Add\\\\Step\\\\Step.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Input, Select } from 'antd';\nimport './Add.less';\nvar createForm = Form.create;\nvar FormItem = Form.Item;\nvar Option = Select.Option;\n\nfunction noop() {\n  return false;\n}\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n     两种报错方法 validateFields和rule中的min判断条件\r\n     min默认为 name is require 使用message进行修改\r\n     \r\n*/\n\n\nvar StepOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepOne, _Component);\n\n  function StepOne() {\n    _classCallCheck(this, StepOne);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StepOne).call(this));\n  }\n\n  _createClass(StepOne, [{\n    key: \"handleReset\",\n    value: function handleReset(e) {\n      //resetFields重置表单内容\n      e.preventDefault();\n      this.props.form.resetFields();\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      //表单内容提交组件,校验并获取一组输入域的值与 Error\t\n      e.preventDefault(); // console.log(this.props.form.getFieldError(\"name\"))\n\n      this.props.form.validateFields(function (errors, values) {\n        if (!!errors) {\n          console.log('Errors in form!!!');\n          return;\n        }\n\n        console.log('Submit!!!');\n      });\n    }\n  }, {\n    key: \"userExists\",\n    value: function userExists(rule, value, callback) {\n      //当做validator函数来用,用来作为判断条件\n      if (!value) {\n        callback();\n      } else {\n        setTimeout(function () {\n          if (value === '宫爆鸡丁') {\n            callback([new Error('抱歉，该菜名已被占用。')]);\n          } else {\n            callback();\n          }\n        }, 800);\n      }\n    }\n  }, {\n    key: \"render\",\n    // componentWillReceiveProps() {\n    // console.log(this.props.form.getFieldError(\"name\"))\n    //返回值     [\"输入1时显示报错\"]\n    //          [\"菜品名至少为 1个字符\"]  message \n    // };\n    value: function render() {\n      var _this$props$form = this.props.form,\n          getFieldProps = _this$props$form.getFieldProps,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldValidating = _this$props$form.isFieldValidating;\n      var nameProps = getFieldProps('name', {\n        //第一个参数为ID,第二个为options\n\n        /* \r\n        getFieldProps options \r\n        */\n        rules: [{\n          required: true,\n          min: 1,\n          message: '菜品名至少为 1 个字符'\n        }, {\n          validator: this.userExists.bind(this)\n        },,]\n      });\n      var selectProps = getFieldProps('select', {\n        rules: [{\n          required: true,\n          message: '请选择菜品类型'\n        }]\n      });\n      var textareaProps = getFieldProps('textarea', {\n        //textarea 为ID\n        rules: [//判断条件\n        {\n          required: true,\n          min: 1,\n          message: '输入内容不能为空'\n        }]\n      });\n      var formItemLayout = {\n        //样式\n        labelCol: {\n          span: 7\n        },\n        wrapperCol: {\n          span: 12\n        }\n      };\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u540D\\u79F0\\uFF1A\",\n        hasFeedback: true,\n        help: isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', '),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, nameProps, {\n        placeholder: \" \\u8F93\\u5165 \\u5BAB\\u7206\\u9E21\\u4E01 \\u770B\\u770B\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({\n        label: \"\\u83DC\\u54C1\\u7C7B\\u578B\\uFF1A\"\n      }, formItemLayout, {\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(Select, Object.assign({\n        style: {\n          width: 200\n        }\n      }, selectProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Option, {\n        value: \"\\u7279\\u8272\\u6C64\\u9762\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"\\u7279\\u8272\\u6C64\\u9762\"), React.createElement(Option, {\n        value: \"\\u9152\\u6C34\\u996E\\u6599\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"\\u9152\\u6C34\\u996E\\u6599\"), React.createElement(Option, {\n        value: \"\\u70E7\\u70E4\\u7CFB\\u5217\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"\\u70E7\\u70E4\\u7CFB\\u5217\"), React.createElement(Option, {\n        value: \"\\u7F8E\\u5473\\u76D6\\u996D\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"\\u7F8E\\u5473\\u76D6\\u996D\"), React.createElement(Option, {\n        value: \"\\u5C0F\\u5403\\uFF0C\\u8089\\u5939\\u998D\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"\\u5C0F\\u5403\\uFF0C\\u8089\\u5939\\u998D\"), React.createElement(Option, {\n        value: \"\\u6D77\\u9C9C\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"\\u6D77\\u9C9C\"))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"\\u83DC\\u54C1\\u7C7B\\u578B\\uFF1A\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(Input, Object.assign({}, textareaProps, {\n        type: \"textarea\",\n        placeholder: \"\\u83DC\\u54C1\\u540D\\u79F0\",\n        id: \"textarea\",\n        name: \"textarea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        onClick: this.handleReset.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \" Reset\"), React.createElement(Button, {\n        onClick: this.handleSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \" Submit\"));\n    }\n  }]);\n\n  return StepOne;\n}(Component);\n\nStepOne = createForm()(StepOne); //将Form表单,通过props获取到各种方法\n\nexport default StepOne; // class StepTwo extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepTwo\">\n//         11111111111111111\n//        </div>\n//     )\n//   }\n// }\n// class StepThree extends Component {\n//   render() {\n//     return (\n//       <div className=\"stepThree\">\n//         22222222222222\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\components\\Content\\Food\\Add\\Step\\Step.js"],"names":["React","Component","Button","Form","Input","Select","createForm","create","FormItem","Item","Option","noop","StepOne","e","preventDefault","props","form","resetFields","validateFields","errors","values","console","log","rule","value","callback","setTimeout","Error","getFieldProps","getFieldError","isFieldValidating","nameProps","rules","required","min","message","validator","userExists","bind","selectProps","textareaProps","formItemLayout","labelCol","span","wrapperCol","join","width","handleReset","handleSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Input, Select } from 'antd';\r\nimport './Add.less';\r\n\r\nconst createForm = Form.create;\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\n\r\nfunction noop() {\r\n  return false;\r\n}\r\n/* \r\n    antd 表单使用\r\n    resetFields() 重置表单内数据\r\n\r\n    getFieldsValue([\"name\"],).name  校验并获取一组输入域的值与 Error(用于提交之前)\r\n    name为ID也为Key值，函数返回值为对象\r\n    前两个参数都为数组， [fieldNames: string[]], [options: object] \r\n\r\n     validateFieldsAndScroll([\"name\"])//直接调用就可以\t  参考 validateFields\r\n     如果校验不通过的菜单域不在可见范围内，则自动滚动进可见范围（建议用在Submit）\r\n\r\n     isFieldValidating\t判断一个输入控件是否在校验状态（可以扔到help里面）\r\n     两种报错方法 validateFields和rule中的min判断条件\r\n     min默认为 name is require 使用message进行修改\r\n     \r\n*/\r\nclass StepOne extends Component {\r\n  constructor() {\r\n    super()\r\n  }\r\n  handleReset(e) {\r\n    //resetFields重置表单内容\r\n    e.preventDefault();\r\n    this.props.form.resetFields();\r\n  };\r\n  handleSubmit(e) {\r\n    //表单内容提交组件,校验并获取一组输入域的值与 Error\t\r\n    e.preventDefault();\r\n    // console.log(this.props.form.getFieldError(\"name\"))\r\n    this.props.form.validateFields((errors, values) => {\r\n      if (!!errors) {\r\n        console.log('Errors in form!!!');\r\n        return;\r\n      }\r\n      console.log('Submit!!!');\r\n    });\r\n  };\r\n\r\n  userExists(rule, value, callback) {\r\n    //当做validator函数来用,用来作为判断条件\r\n    if (!value) {\r\n      callback();\r\n    } else {\r\n      setTimeout(() => {\r\n        if (value === '宫爆鸡丁') {\r\n          callback([new Error('抱歉，该菜名已被占用。')]);\r\n        } else {\r\n          callback();\r\n        }\r\n      }, 800);\r\n    }\r\n  };\r\n\r\n  // componentWillReceiveProps() {\r\n  // console.log(this.props.form.getFieldError(\"name\"))\r\n  //返回值     [\"输入1时显示报错\"]\r\n  //          [\"菜品名至少为 1个字符\"]  message \r\n  // };\r\n  render() {\r\n    const { getFieldProps, getFieldError, isFieldValidating } = this.props.form;\r\n    const nameProps = getFieldProps('name', { //第一个参数为ID,第二个为options\r\n      /* \r\n      getFieldProps options \r\n      */\r\n      rules: [\r\n        { required: true, min: 1, message: '菜品名至少为 1 个字符' },\r\n        { validator: this.userExists.bind(this) },\r\n        ,\r\n        //  {\r\n        //    -------添加另外限制条件------------\r\n        //   validator(rule, value, callback, source, options) {\r\n        //     var errors = [];\r\n        //     console.log(value, \"Xx\") \r\n        //     if (value == 1) {\r\n        //       callback(\"输入1时显示报错\");\r\n        //     } else {\r\n        //       callback();\r\n        //       //  成功后显示在页面上的值\r\n        //       //  [\"菜品名至少为 1 个字符\", 22222]\r\n        //     }\r\n        //   }\r\n        // }\r\n      ]\r\n    });\r\n    const selectProps = getFieldProps('select', {\r\n      rules: [\r\n        { required: true, message: '请选择菜品类型' },\r\n      ],\r\n    });\r\n    const textareaProps = getFieldProps('textarea', {//textarea 为ID\r\n      rules: [//判断条件\r\n        { required: true, min: 1, message: '输入内容不能为空' },\r\n      ],\r\n    });\r\n    const formItemLayout = {//样式\r\n      labelCol: { span: 7 },\r\n      wrapperCol: { span: 12 },\r\n    };\r\n\r\n\r\n    return (\r\n      <Form >\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品名称：\"\r\n          hasFeedback\r\n          help={isFieldValidating('name') ? '校验中...' : (getFieldError('name') || []).join(', ')}\r\n        >\r\n          <Input {...nameProps} placeholder=\" 输入 宫爆鸡丁 看看\"\r\n          />\r\n        </FormItem>\r\n\r\n        <FormItem\r\n          label=\"菜品类型：\"\r\n          {...formItemLayout}\r\n          required\r\n        >\r\n          <Select style={{ width: 200 }}\r\n            {...selectProps}\r\n          >\r\n            <Option value=\"特色汤面\">特色汤面</Option>\r\n            <Option value=\"酒水饮料\">酒水饮料</Option>\r\n            <Option value=\"烧烤系列\">烧烤系列</Option>\r\n            <Option value=\"美味盖饭\">美味盖饭</Option>\r\n            <Option value=\"小吃，肉夹馍\">小吃，肉夹馍</Option>\r\n            <Option value=\"海鲜\" disabled>海鲜</Option>\r\n          </Select>\r\n        </FormItem>\r\n\r\n        <FormItem\r\n          {...formItemLayout}\r\n          label=\"菜品类型：\"\r\n        >\r\n          <Input {...textareaProps}\r\n            type=\"textarea\"\r\n            placeholder=\"菜品名称\"\r\n            id=\"textarea\"\r\n            name=\"textarea\"\r\n          />\r\n        </FormItem>\r\n        <Button onClick={this.handleReset.bind(this)} > Reset</Button >\r\n        <Button onClick={this.handleSubmit.bind(this)}> Submit</Button >\r\n      </Form>\r\n\r\n    );\r\n  }\r\n}\r\nStepOne = createForm()(StepOne);//将Form表单,通过props获取到各种方法\r\n\r\n\r\nexport default StepOne\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class StepTwo extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepTwo\">\r\n//         11111111111111111\r\n//        </div>\r\n//     )\r\n//   }\r\n// }\r\n// class StepThree extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"stepThree\">\r\n//         22222222222222\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}