{"ast":null,"code":"import { fastTrim, extend2, xssEncode } from '../../../fc-core/src/lib';\nvar FCGlobal,\n    UNDEF,\n    format = 'xml';\nvar COMPACTDATAMODE = 'compactdatamode',\n    STRING = 'string',\n    FUNCTION = 'function',\n    OBJECT = 'object';\n\nfunction replaceSp(a) {\n  return a.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nvar toJSON = function () {\n  var a,\n      _b,\n      c,\n      d = {\n    arr: {\n      set: !0,\n      trendlines: !0,\n      vtrendlines: !0,\n      line: {\n        trendlines: !0,\n        vtrendlines: !0\n      },\n      data: !0,\n      dataset: !0,\n      lineset: !0,\n      categories: !0,\n      category: !0,\n      tasks: !0,\n      linkeddata: !0,\n      application: !0,\n      definition: !0,\n      axis: !0,\n      connectors: !0,\n      connector: {\n        connectors: !0\n      },\n      trendset: !0,\n      row: {\n        rows: !0\n      },\n      column: {\n        columns: !0\n      },\n      label: {\n        labels: !0\n      },\n      color: {\n        colorrange: !0\n      },\n      dial: {\n        dials: !0\n      },\n      pointer: {\n        pointers: !0\n      },\n      point: {\n        trendpoints: !0\n      },\n      process: {\n        processes: !0\n      },\n      task: {\n        tasks: !0\n      },\n      milestone: {\n        milestones: !0\n      },\n      datacolumn: {\n        datatable: !0\n      },\n      text: {\n        datacolumn: !0\n      },\n      item: {\n        legend: !0\n      },\n      alert: {\n        alerts: !0\n      },\n      groups: {\n        annotations: !0\n      },\n      items: {\n        groups: !0,\n        data: !0\n      },\n      shapes: !0,\n      shape: {\n        shapes: !0\n      },\n      entitydef: !0,\n      entity: {\n        entitydef: !0\n      }\n    },\n    tag: {\n      chart: 'linkedchart',\n      map: 'linkedmap',\n      set: 'data',\n      vline: {\n        chart: 'data',\n        graph: 'data',\n        dataset: 'data',\n        categories: 'category',\n        linkedchart: 'data'\n      },\n      apply: {\n        application: 'application'\n      },\n      style: {\n        definition: 'definition'\n      },\n      marker: {\n        application: 'application',\n        definition: 'definition',\n        data: 'items'\n      },\n      entity: {\n        entitydef: 'entitydef',\n        data: 'data'\n      },\n      shape: {\n        shapes: 'shapes'\n      },\n      connector: {\n        connectors: {\n          chart: 'connector',\n          linkedchart: 'connector',\n          map: 'connectors',\n          linkedmap: 'connectors'\n        }\n      },\n      annotationgroup: {\n        annotations: 'groups'\n      },\n      annotation: {\n        groups: 'items'\n      }\n    },\n    attr: {\n      vline: {\n        vline: 'true'\n      }\n    },\n    ins: {\n      chart: !0,\n      map: !0,\n      graph: !0\n    },\n    dsv: {\n      dataset: 'data',\n      categories: 'category'\n    },\n    text: {\n      target: 'target',\n      value: 'value'\n    },\n    group: {\n      styles: {\n        definition: !0,\n        application: !0\n      },\n      chart: {\n        value: !0,\n        target: !0\n      },\n      graph: {\n        value: !0,\n        target: !0\n      },\n      linkedchart: {\n        value: !0,\n        target: !0\n      },\n      markers: {\n        definition: !0,\n        application: !0,\n        shapes: !0,\n        connectors: !0,\n        data: !0\n      },\n      map: {\n        entitydef: !0,\n        data: !0\n      },\n      linkedmap: {\n        entitydef: !0,\n        data: !0\n      }\n    }\n  };\n\n  return a = {\n    append: function append(a, b, c, e) {\n      d.arr[c] && (!0 === d.arr[c] || !0 === d.arr[c][e]) ? (!(b[c] instanceof Array) && (b[c] = []), b[c].push(a)) : b[c] = a;\n    },\n    child: function child(b, c, e, f) {\n      var g, h, j, k, l, m;\n\n      for (g = 0; g < c.length; g += 1) {\n        switch (j = c[g], h = j.nodeName.toLowerCase(), j.nodeType) {\n          case 1:\n            if (k = a.attr(j.attributes), m = d.ins[h], !0 === m && (l = k, k = {}, k[h] = l, l = UNDEF), m = d.attr[h], typeof m == OBJECT && extend2(k, m, !1, !0), m = d.tag[h], m) if (typeof m == OBJECT && typeof m[e] == OBJECT) {\n              for (l in l = UNDEF, m[e]) {\n                if (f[l]) {\n                  h = m[e][l];\n                  break;\n                }\n              }\n            } else typeof m == OBJECT && typeof m[e] == STRING ? h = m[e] : typeof m == STRING && (h = m);\n            j.childNodes.length && (m = d.group[e], m && m[h] ? a.child(b, j.childNodes, h, f) : a.child(k, j.childNodes, h, f)), m = d.group[e], m && m[h] || a.append(k, b, h, e);\n            break;\n\n          case 3:\n            m = d.text[e], m && (h = m, k = j.data, a.append(k, b, h, e)), m = d.dsv[e], typeof m == STRING && f.chart && parseInt(f.chart[COMPACTDATAMODE], 10) && (h = m, k = j.data, b[h] = b[h] ? b[h] + k : k);\n        }\n      }\n    },\n    attr: function attr(a) {\n      var b,\n          d = {};\n      if (!a || !a.length) return d;\n\n      for (b = 0; b < a.length; b += 1) {\n        'xml' === c && (a[b].value ? a[b].value = replaceSp(a[b].value) : a[b].nodeValue && (a[b].nodeValue = replaceSp(a[b].nodeValue))), d[a[b].nodeName.toLowerCase()] = a[b].value || a[b].nodeValue;\n      }\n\n      return d;\n    }\n  }, _b = function b(c) {\n    var d,\n        e,\n        f,\n        g,\n        h,\n        j,\n        k,\n        l,\n        m,\n        n = {};\n    if (typeof c != OBJECT && c && typeof c.toString != FUNCTION) return _b.errorObject = new TypeError('xml2json.parse()'), n;\n    if (c = c.toString().replace(/<\\!--[\\s\\S]*?-->/g, '').replace(/<\\?xml[\\s\\S]*?\\?>/ig, '').replace(/&(?!([^;\\n\\r]+?;))/g, '&amp;$1'), c = fastTrim(c), !c) return n;\n\n    try {\n      if (window.DOMParser ? d = new window.DOMParser().parseFromString(c, 'text/xml') : document.body && FCGlobal.options.allowIESafeXMLParsing ? (e = document.createElement('xml'), e.innerHTML = c, document.body.appendChild(e), d = e.XMLDocument, document.body.removeChild(e), e = null) : (d = new window.ActiveXObject('Microsoft.XMLDOM'), d.async = 'false', d.loadXML(c)), !(d && d.childNodes && 1 === d.childNodes.length && (f = d.childNodes[0]) && f.nodeName && (g = f.nodeName.toLowerCase()) && ('chart' === g || 'map' === g || 'graph' === g))) return _b.errorObject = new TypeError('xml2json.parse()'), n;\n\n      if ('graph' === g) {\n        for (h = d.createElement('chart'), k = f.attributes, m = k && k.length || 0; m--;) {\n          h.setAttribute(k[m].name, k[m].value), k.removeNamedItem(k[m].name);\n        }\n\n        for (l = f.childNodes, m = l && l.length || 0, m && (m -= 1, j = f.removeChild(l[m]), h.appendChild(j)); m--;) {\n          j = f.removeChild(l[m]), h.insertBefore(j, h.firstChild);\n        }\n\n        d.replaceChild(h, f), f = h;\n      }\n    } catch (a) {\n      _b.errorObject = a;\n    }\n\n    return f ? (f.attributes && (n[g] = a.attr(f.attributes)), f.childNodes && a.child(n, f.childNodes, g, n), delete _b.errorObject) : _b.errorObject = new TypeError('xml2json.parse()'), n;\n  }, function (a) {\n    delete _b.errorObject, c = arguments[arguments.length - 1];\n\n    var d = _b(a);\n\n    return {\n      data: d,\n      error: _b.errorObject\n    };\n  };\n}(),\n    fromJSON = function () {\n  var a, _b2;\n\n  return a = {\n    items: {\n      explode: {\n        data: 'set',\n        groups: {\n          annotations: 'annotationgroup'\n        },\n        items: {\n          groups: 'annotation'\n        }\n      },\n      text: {\n        chart: {\n          target: 'target',\n          value: 'value'\n        },\n        graph: {\n          target: 'target',\n          value: 'value'\n        }\n      },\n      dsv: {\n        dataset: {\n          data: 'dataset'\n        },\n        categories: {\n          category: 'categories'\n        }\n      },\n      attr: {\n        chart: {\n          chart: 'chart'\n        },\n        graph: {\n          graph: 'graph'\n        },\n        map: {\n          map: 'map'\n        },\n        linkedmap: {\n          map: 'map'\n        },\n        linkedchart: {\n          chart: 'chart'\n        }\n      },\n      group: {\n        styles: {\n          definition: 'style',\n          application: 'apply'\n        },\n        map: {\n          data: 'entity',\n          entitydef: 'entity'\n        },\n        markers: {\n          definition: 'marker',\n          application: 'marker',\n          shapes: 'shape',\n          connectors: 'connector',\n          items: 'marker'\n        }\n      },\n      tag: {\n        markers: {\n          items: 'data'\n        }\n      }\n    },\n    qualify: function qualify(a, b, c) {\n      return typeof this.items[a][c] == OBJECT ? this.items[a][c][b] : this.items[a][c];\n    }\n  }, _b2 = function b(c, d, e, f) {\n    var g,\n        h,\n        i,\n        j,\n        k = '',\n        l = '',\n        m = '',\n        n = '';\n    if (d && 'function' == typeof d.toLowerCase && (d = d.toLowerCase()), e === UNDEF && c[d]) for (h in c[d]) {\n      i = h.toLowerCase(), i === COMPACTDATAMODE && (f.applyDSV = 1 === c[d][h]);\n    }\n    if (c instanceof Array) for (h = 0; h < c.length; h += 1) {\n      m += typeof c[h] == STRING ? xssEncode(c[h]) : _b2(c[h], d, e, f);\n    } else {\n      for (h in c) {\n        i = h.toLowerCase().replace(/[`~!@#$%^&*()|+\\=?;:'\", <>\\{\\}\\[\\]\\\\\\/]/gi, ''), c[h] instanceof Array && (j = a.qualify('group', i, d)) ? (g = a.qualify('tag', i, d) || i, l += '<' + g + '>' + _b2(c[h], j, d, f) + '</' + g + '>') : typeof c[h] == OBJECT ? (j = a.qualify('attr', i, d)) ? (n = _b2(c[h], j, d, f).replace(/\\s*\\/\\>/ig, ''), d = i) : l += _b2(c[h], i, d, f) : f.applyDSV && (j = a.qualify('dsv', i, d)) ? l += c[h] : (j = a.qualify('text', i, d)) ? (g = a.qualify('tag', i, d) || j, l += '<' + g + '>' + c[h] + '</' + g + '>') : 'vline' === i && c[h] ? d = 'vline' : k += ' ' + i + '=\"' + xssEncode(c[h]).toString().replace(/\\\"/ig, '&quot;') + '\"';\n      }\n\n      (j = a.qualify('explode', e, d)) && (d = j), g = d, m = ('' === n ? '<' + g : n) + k + ('' === l ? ' />' : '>' + l + '</' + g + '>');\n    }\n    return m;\n  }, function (a) {\n    if (delete _b2.errorObject, a && typeof a == STRING) try {\n      a = JSON.parse(a);\n    } catch (a) {\n      _b2.errorObject = a;\n    }\n\n    var c = a && a.graph ? 'graph' : a && a.map ? 'map' : 'chart',\n        d = _b2(a, c, UNDEF, {});\n\n    return {\n      data: d,\n      error: _b2.errorObject\n    };\n  };\n}(),\n    getXMLData = function getXMLData() {\n  return this.getChartData('xml');\n},\n    setXMLData = function setXMLData(a) {\n  this.setChartData(a, 'xml');\n},\n    wrapper = function wrapper(a) {\n  return a && (FCGlobal = a, a.prototype.getXMLData = getXMLData, a.prototype.setXMLData = setXMLData), {\n    format: format,\n    toJSON: toJSON,\n    fromJSON: fromJSON\n  };\n};\n\nexport default {\n  extension: wrapper,\n  name: 'XML',\n  type: 'transcoder',\n  requiresFusionCharts: !0\n};","map":null,"metadata":{},"sourceType":"module"}