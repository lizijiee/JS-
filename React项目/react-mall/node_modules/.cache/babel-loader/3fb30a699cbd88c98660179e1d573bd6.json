{"ast":null,"code":"import _objectDestructuringEmpty from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectDestructuringEmpty\";\nimport _toArray from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\n\nvar _ref, _ref$addedIds;\n\n/* import {\r\n  ADD_TO_CART,\r\n  CHECKOUT_REQUEST,\r\n  CHECKOUT_FAILURE\r\n} from '../constants/ActionTypes' */\n//export default 只导出一个\n// const tiger=0;\nvar initialState = (_ref = function _ref() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n\n    case \"DECREMENT\":\n      return state - 1;\n\n    default:\n      return state;\n  }\n}, _ref$addedIds = _toArray(_ref.addedIds), _objectDestructuringEmpty(_ref.quantityById), _ref);\n/* 测试 */\n\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\redux\\reducers\\index.js"],"names":["initialState","state","action","type","addedIds","quantityById"],"mappings":";;;;;AAAA;;;;;AAMA;AACA;AACA,IAAMA,YAAY,WAKhB,gBAA6B;AAAA,MAA5BC,KAA4B,uEAAtBD,YAAsB;AAAA,MAATE,MAAS;;AACvB,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,WAAL;AACA,aAAOF,KAAK,GAAE,CAAd;;AACA,SAAK,WAAL;AACA,aAAQA,KAAK,GAAE,CAAf;;AACA;AACA,aAAOA,KAAP;AANJ;AAQH,CAda,gCAChBG,QADgB,kCAEhBC,YAFgB,QAAlB;AAgBA;;AAEA","sourcesContent":["/* import {\r\n  ADD_TO_CART,\r\n  CHECKOUT_REQUEST,\r\n  CHECKOUT_FAILURE\r\n} from '../constants/ActionTypes' */\r\n\r\n//export default 只导出一个\r\n// const tiger=0;\r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\n= (state=initialState,action)=>{ \r\n        switch(action.type){\r\n            case \"INCREMENT\":\r\n            return state +1\r\n            case \"DECREMENT\":\r\n            return  state -1\r\n            default:\r\n            return state\r\n        }\r\n    }\r\n\r\n/* 测试 */\r\n\r\n/* \r\nconst initialState = {\r\n  addedIds: [],\r\n  quantityById: {}\r\n}\r\n\r\nconst addedIds = (state = initialState.addedIds, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      if (state.indexOf(action.productId) !== -1) {\r\n        return state\r\n      }\r\n      return [ ...state, action.productId ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst quantityById = (state = initialState.quantityById, action) => {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      const { productId } = action\r\n      return { ...state,\r\n        [productId]: (state[productId] || 0) + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getQuantity = (state, productId) =>\r\n  state.quantityById[productId] || 0\r\n\r\nexport const getAddedIds = state => state.addedIds\r\n\r\nconst cart = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CHECKOUT_REQUEST:\r\n      return initialState\r\n    case CHECKOUT_FAILURE:\r\n      return action.cart\r\n    default:\r\n      return {\r\n        addedIds: addedIds(state.addedIds, action),\r\n        quantityById: quantityById(state.quantityById, action)\r\n      }\r\n  }\r\n}\r\n\r\nexport default cart\r\n */"]},"metadata":{},"sourceType":"module"}