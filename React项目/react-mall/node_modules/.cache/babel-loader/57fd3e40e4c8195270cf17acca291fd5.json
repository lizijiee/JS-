{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { pluckNumber, pluck, pluckFontSize, hiddenStr, visibleStr } from '../../../../fc-core/src/lib';\nimport { pluckBoolean } from '../utils';\nimport AnnotationBaseShape from './annotation-base';\nimport mergeDeepRight from 'ramda/src/mergeDeepRight';\nvar DEFAULT_IS_VISIBLE = !0,\n    DEFAULT_OPACITY = 100,\n    DEFAULT_COLOR = '#FF0000',\n    DEFAULT_SHOW_SHADOW = 0,\n    DEFAULT_POSITION = 0;\n\nvar AnnotationGroup =\n/*#__PURE__*/\nfunction (_AnnotationBaseShape) {\n  _inherits(AnnotationGroup, _AnnotationBaseShape);\n\n  function AnnotationGroup() {\n    var _this;\n\n    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AnnotationGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnnotationGroup).call(this, a)), _this.groups = [], _this.items = [];\n    return _this;\n  }\n\n  _createClass(AnnotationGroup, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'group';\n    }\n  }, {\n    key: \"configureAttributes\",\n    value: function configureAttributes(a) {\n      var b = this,\n          c = {},\n          d = b.config;\n      b.rawConfig = {}, c = mergeDeepRight(b.rawConfig, a), b.rawConfig = c, d.id = b.rawConfig.id || b.getId('group'), d.autoScale = pluckNumber(b.rawConfig.autoScale, 1), d.scaleText = pluckNumber(b.rawConfig.scaleText, 0), d.scaleX = d.origScaleX = pluckNumber(b.rawConfig.xScale) / 100, d.scaleY = d.origScaleY = pluckNumber(b.rawConfig.yScale) / 100, d.scaleImages = pluckNumber(b.rawConfig.scaleImages, 0), d.constrainedScale = pluckNumber(b.rawConfig.constrainedScale, 1), d.origH = +b.rawConfig.origH, d.origW = +b.rawConfig.origW, d.link = b.rawConfig.link, d.color = b.rawConfig.color || DEFAULT_COLOR, d.alpha = pluckNumber(parseFloat(b.rawConfig.alpha), DEFAULT_OPACITY), d.showShadow = pluckNumber(b.rawConfig.showShadow, DEFAULT_SHOW_SHADOW), d.x = pluckNumber(b.rawConfig.x, b.rawConfig.xPos, DEFAULT_POSITION), d.y = pluckNumber(b.rawConfig.y, b.rawConfig.yPos, DEFAULT_POSITION), d.font = pluck(b.rawConfig.font, 'Verdana, sans'), d.fontSize = pluckFontSize(b.rawConfig.fontSize, 10), d.textAlign = pluck(b.rawConfig.textAlign), d.textVAlign = pluck(b.rawConfig.textVAlign), d.rotateText = pluck(b.rawConfig.rotateText), d.wrapText = pluck(b.rawConfig.wrapText), d.grpXShift = pluckNumber(b.rawConfig.grpXShift, 0), d.grpYShift = pluckNumber(b.rawConfig.grpYShift, 0), d.xShift = pluckNumber(b.rawConfig.xShift, 0), d.yShift = pluckNumber(b.rawConfig.yShift, 0), d.toolText = b.rawConfig.toolText, d.isVisible = pluckBoolean(b.rawConfig.isVisible, DEFAULT_IS_VISIBLE), d.elementType = 'group', d.containerConfiguration = {\n        id: b.rawConfig.showBelow ? 'lowerAnnotationGroup' : 'upperAnnotationGroup',\n        label: 'group',\n        isParent: !0\n      }, d.animationLabel = 'group';\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale() {\n      var a = Math.min;\n\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g = this,\n          h = g.config,\n          i = g._getConfig('origScaleX'),\n          j = g._getConfig('origScaleY'),\n          k = g.getFromEnv('chart'),\n          l = +k.getFromEnv('chartHeight'),\n          m = +k.getFromEnv('chartWidth'),\n          n = g._getConfig('autoScale'),\n          o = g._getConfig('constrainedScale');\n\n      g._setConfig('origW', +g._getConfig('origW') || m), g._setConfig('origH', +g._getConfig('origH') || l), n ? (c = m / g._getConfig('origW') * (+i || 1), d = l / g._getConfig('origH') * (+j || 1)) : c = d = 1, b = a(c, d), g._setConfig('scaleValue', b), (0 < n || isNaN(g._getConfig('scaleX'))) && (e = o ? b : c, g._setConfig('scaleX', e)), (0 < n || isNaN(g._getConfig('scaleY'))) && (f = o ? b : d, g._setConfig('scaleY', f)), g._setConfig('scaleFont', g._getConfig('scaleText') ? a(g._getConfig('scaleX'), g._getConfig('scaleY')) : 1), g._setConfig('scaleImageX', g._getConfig('scaleImages') ? g._getConfig('scaleX') : 1), g._setConfig('scaleImageY', g._getConfig('scaleImages') ? g._getConfig('scaleY') : 1), h.scaleInfo = {\n        scaleX: h.scaleX,\n        scaleY: h.scaleY,\n        scaleValue: h.scaleValue\n      };\n    }\n  }, {\n    key: \"updateAttr\",\n    value: function updateAttr() {\n      var a,\n          b,\n          c,\n          d = this,\n          e = d.config,\n          f = e.calculatedAttrs;\n\n      for (a in f) {\n        f[a] && (e[a] = f[a]);\n      }\n\n      b = d.getScaledVal(d._getConfig('grpXShift')) + d._getConfig('xShift'), c = d.getScaledVal(d._getConfig('grpYShift')) + d._getConfig('yShift'), d._setConfig('attr', {\n        transform: \"T\".concat(b, \",\").concat(c)\n      });\n    }\n  }, {\n    key: \"retrieveItem\",\n    value: function retrieveItem(a, b) {\n      var c,\n          d,\n          e = this;\n      if (b) e.detachChild(a);else for (c = 0, d = e.items.length; c < d; c++) {\n        if (e.items[c].getId() === a) return e.items[c];\n      }\n    }\n  }, {\n    key: \"getScaledVal\",\n    value: function getScaledVal(a, b) {\n      var c,\n          d = this;\n      return d ? (c = b ? d._getConfig('scaleX') : (!1 === b ? d._getConfig('scaleY') : d._getConfig('scaleValue')) || 1, a * c) : a;\n    }\n  }, {\n    key: \"getScaledFont\",\n    value: function getScaledFont(a) {\n      var b = this;\n      return b ? a * b._getConfig('scaleFont') : a;\n    }\n  }, {\n    key: \"getScaledImageVal\",\n    value: function getScaledImageVal(a, b) {\n      var c,\n          d = this;\n      return d ? (c = (b ? d._getConfig('scaleImageX') : d._getConfig('scaleImageY')) || 1, a * c) : a;\n    }\n  }, {\n    key: \"getScaleInfo\",\n    value: function getScaleInfo() {\n      return this.config.scaleInfo;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var a,\n          b,\n          c = this,\n          d = c._getConfig('attr') || {};\n      c.updateScale(), c.parseAndSetAttribute(), a = c.getScaledVal(c._getConfig('grpXShift')) + c._getConfig('xShift'), b = c.getScaledVal(c._getConfig('grpYShift')) + c._getConfig('yShift'), d.name = c._getConfig('id'), d.transform = d.transform || \"T\".concat(a, \",\").concat(b), d.visibility = c.config.isVisible ? visibleStr : hiddenStr, c.addGraphicalElement({\n        el: 'group',\n        attr: d,\n        container: c.config.containerConfiguration,\n        component: c._getFromStore('component') || c,\n        label: c.config.animationLabel,\n        id: c.config.id\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var a,\n          b,\n          c = this._getFromStore('originalComponent'),\n          d = c.retrieveGroup(this.config.id, !0),\n          e = d.items || [];\n\n      for (b = 0; b < e.length; b++) {\n        a = c.retrieveItem(e[b].getId(), !0), a && a.dispose();\n      }\n\n      c.removeGraphicalElement(d.config.id), d.items = [];\n    }\n  }]);\n\n  return AnnotationGroup;\n}(AnnotationBaseShape);\n\nexport default AnnotationGroup;","map":null,"metadata":{},"sourceType":"module"}