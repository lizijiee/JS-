{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { parseUnsafeString, pluckNumber, pluck, extend2, COLOR_BLACK } from '../lib';\nimport { ComponentInterface } from '../component-interface';\n\nvar UNDEF,\n    getTransitColor = function getTransitColor(a, b, c) {\n  var d = a[0],\n      e = a[1],\n      f = a[2],\n      g = d + (b[0] - d) * c,\n      h = e + (b[1] - e) * c,\n      i = f + (b[2] - f) * c;\n  return {\n    hex: (COLOR_BLACK + (g << 16 | h << 8 | i).toString(16)).slice(-6),\n    rgb: [g, h, i]\n  };\n};\n\nvar ColorBucket =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(ColorBucket, _ComponentInterface);\n\n  function ColorBucket() {\n    var _this;\n\n    _classCallCheck(this, ColorBucket);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorBucket).call(this));\n\n    var a = _assertThisInitialized(_this);\n\n    a.mapByCategory = !1, a.colorArr = [], a.noValidRange = !0, a.sortLegend = !1;\n    return _this;\n  }\n\n  _createClass(ColorBucket, [{\n    key: \"__setDefaultConfig\",\n    value: function __setDefaultConfig() {\n      _get(_getPrototypeOf(ColorBucket.prototype), \"__setDefaultConfig\", this).call(this), this.config.defaultObj = {\n        code: 'CCCCCC',\n        alpha: '100'\n      };\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'colorComponent';\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'colorBucket';\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(a) {\n      if (!a) return;\n      var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          j,\n          k,\n          l,\n          m,\n          n = this,\n          o = n.mapByCategory,\n          p = a.numberFormatter,\n          q = a.colorRange || {},\n          r = extend2([], q.color),\n          s = this.getLinkedParent(),\n          t = n.getFromEnv('dataSource'),\n          u = Math.min(Math.max(pluckNumber(t.chart.palette, 0) - 1, 0), 4),\n          v = s.defaultPaletteOptions && s.defaultPaletteOptions.paletteColors[u],\n          w = pluckNumber(p.getCleanValue(q.maxvalue), 1 / 0),\n          x = pluckNumber(p.getCleanValue(q.minvalue), -Infinity),\n          y = n.colorArr;\n\n      if (a.mapByCategory !== UNDEF && (o = n.mapByCategory = !!+a.mapByCategory), r = o ? r.filter(function (a) {\n        return a.code || a.color;\n      }) : r.filter(function (a) {\n        return a.minvalue || a.maxvalue;\n      }), r.forEach(function (a) {\n        a.minvalue && a.maxvalue && +a.maxvalue < +a.minvalue && (j = a.maxvalue, a.maxvalue = a.minvalue, a.minvalue = j), a.minvalue ? a.maxvalue ? (l = p.getCleanValue(a.minvalue), k = p.getCleanValue(a.maxvalue), a.rangeLabel = p.dataLabels(l) + '-' + p.dataLabels(k)) : (l = p.getCleanValue(a.minvalue), a.maxvalue = k = w, a.rangeLabel = k === 1 / 0 ? '>' + p.dataLabels(l) : p.dataLabels(l) + '-' + p.dataLabels(k)) : (a.minvalue = l = x, k = p.getCleanValue(a.maxvalue), a.rangeLabel = l === -Infinity ? '<' + p.dataLabels(k) : p.dataLabels(l) + '-' + p.dataLabels(k));\n      }), r.sort(function (a, b) {\n        return +a.minvalue == +b.minvalue ? a.maxvalue - b.maxvalue : a.minvalue - b.minvalue;\n      }), r && (b = r.length)) {\n        for (y.length = 0, c = 0; c < b; c += 1) {\n          h = r[c], d = pluck(h.color, h.code, v && v[c]), e = pluck(h.alpha), g = pluck(h.bordercolor), f = pluck(h.borderalpha, 100), k = pluckNumber(h.maxvalue), l = pluckNumber(h.minvalue), m = pluck(h.label, h.displayvalue, h.rangeLabel), (d && k >= l || o && m) && y.push({\n            code: d,\n            alpha: e || '100',\n            oriAlpha: e,\n            maxvalue: k,\n            minvalue: l,\n            label: parseUnsafeString(m),\n            labelId: m.toLowerCase(),\n            bordercolor: g,\n            borderAlpha: f,\n            name: h.name\n          });\n        }\n\n        n.sortedColorArr = n.colorArr.slice(0);\n      } else n.noValidRange = !0, n.colorArr = [], n.sortedColorArr = [];\n    }\n  }, {\n    key: \"getColorObj\",\n    value: function getColorObj(a) {\n      if (a === UNDEF) return {\n        outOfRange: !0\n      };\n      var b,\n          c,\n          d = this,\n          e = d.sortedColorArr,\n          f = d.gradient ? 1 : 0,\n          g = e[f];\n\n      if (d.mapByCategory) {\n        for (a = parseUnsafeString(a).toLowerCase() || a.toString().toLowerCase(); g;) {\n          if (g.labelId === a || g.maxvalue >= a && g.minvalue <= a) return {\n            code: g.code,\n            alpha: g.alpha || '100',\n            oriAlpha: g.oriAlpha,\n            seriesIndex: f,\n            legendItemId: g.legendItemId\n          };\n          f += 1, g = e[f];\n        }\n\n        return {\n          outOfRange: !0\n        };\n      }\n\n      if (d.gradient) {\n        if (d.scaleMin <= a && d.scaleMax >= a) {\n          for (; g && g.maxvalue < a;) {\n            f += 1, g = e[f];\n          }\n\n          return c = (a - g.minvalue) / g.range, {\n            code: getTransitColor(e[f - 1].codeRGB, g.codeRGB, c).hex\n          };\n        }\n\n        return {\n          outOfRange: !0\n        };\n      }\n\n      for (; g;) {\n        if (a < g.minvalue && !b) return 0 == f ? {\n          code: g.code,\n          alpha: g.alpha || '100',\n          oriAlpha: g.oriAlpha,\n          seriesIndex: f,\n          name: g.name,\n          label: g.label,\n          outOfRange: !0,\n          bordercolor: g.bordercolor,\n          borderalpha: g.borderAlpha\n        } : {\n          code: e[f - 1].code,\n          alpha: e[f - 1].alpha || '100',\n          oriAlpha: e[f - 1].oriAlpha,\n          seriesIndex: f,\n          name: e[f - 1].name,\n          label: e[f - 1].label,\n          outOfRange: !0,\n          bordercolor: e[f - 1].bordercolor,\n          borderalpha: e[f - 1].borderAlpha\n        };\n        if (a > g.maxvalue && f == e.length - 1) return {\n          code: g.code,\n          alpha: g.alpha || '100',\n          oriAlpha: g.oriAlpha,\n          seriesIndex: f,\n          name: g.name,\n          label: g.label,\n          outOfRange: !0,\n          bordercolor: g.bordercolor,\n          borderalpha: g.borderAlpha\n        };\n        if (g.maxvalue > a && g.minvalue <= a) return {\n          code: g.code,\n          alpha: g.alpha || '100',\n          oriAlpha: g.oriAlpha,\n          seriesIndex: f,\n          name: g.name,\n          label: g.label,\n          bordercolor: g.bordercolor,\n          borderalpha: g.borderAlpha\n        };\n        if (a === g.maxvalue && (b = {\n          code: g.code,\n          alpha: g.alpha || '100',\n          oriAlpha: g.oriAlpha,\n          seriesIndex: f,\n          name: g.name,\n          label: g.label,\n          bordercolor: g.bordercolor,\n          borderalpha: g.borderAlpha\n        }), f == e.length - 1 && b) return b;\n        f += 1, g = e[f];\n      }\n\n      if (!e.length) return {\n        outOfRange: !0\n      };\n    }\n  }, {\n    key: \"getColorRangeArr\",\n    value: function getColorRangeArr(a, b) {\n      var c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          j,\n          k,\n          m = this.colorArr,\n          n = [];\n\n      if (!this.defaultAsigned && (a > b && (c = a, a = b, b = c), a < b && (f = this.getColorObj(a), h = this.getColorObj(b), f && h))) {\n        for (g = a, d = f.seriesIndex, e = h.seriesIndex; d <= e; d += 1) {\n          j = extend2({}, m[d]), j.minvalue !== g && (j.minvalue = g), n.push(j), k = j, g = j.maxvalue;\n        }\n\n        k && (k.maxvalue = b);\n      }\n\n      return n;\n    }\n  }]);\n\n  return ColorBucket;\n}(ComponentInterface);\n\nexport default ColorBucket;","map":null,"metadata":{},"sourceType":"module"}