{"ast":null,"code":"import _objectSpread from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\src\\\\components\\\\Content\\\\Marketing\\\\New\\\\New.js\";\nimport React, { Component } from 'react';\nimport { Button, Pagination, Switch, Checkbox, Select, Popconfirm, message, Form, Input } from 'antd';\nimport IconFont from '../../../../iconfont/font';\nimport './New.less';\nimport { withRouter } from 'react-router-dom';\n/*   -----------------     redux引入部分      ------------------- */\n\nimport * as actionCreators from '../../../../redux/actions/actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from \"redux\";\nvar Option = Select.Option;\nvar text = 'Are you sure to delete this task?';\nvar FormItem = Form.Item;\n\nvar Temp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Temp, _Component);\n\n  function Temp(props) {\n    var _this;\n\n    _classCallCheck(this, Temp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Temp).call(this, props));\n\n    _this.switchChange =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(valid, item, ele) {\n        var screenData, confirm, success, _success;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(valid, item, ele); //true \"新品\" {spuName: \"风味木耳\", unit: \"份\", spuId: 1201640229, tag: \"85608019\", activityTag: \"\", …}\n                //对valid是true还是false进行判断、\n\n                screenData = _this.initStoreData.data.filter(function (i) {\n                  //  筛选出新品类型 数据\n                  return i.categoryName === item;\n                });\n                confirm = screenData[0].spuList.filter(function (n) {\n                  return n.spuName === ele.spuName;\n                }); // 查看新品类型数据中是否有 传入的ele数据\n\n                if (!confirm.length) {\n                  _context.next = 13;\n                  break;\n                }\n\n                // 发现其中有confirm数据,提示已经存在\n                success = function success() {\n                  message.success(\"\".concat(ele.spuName, \" \\u5B58\\u5728 \\u3010\").concat(ele.categoryName, \"\\u3011 \\u63A8\\u8350\\u4E2D \\u8BF7\\u91CD\\u65B0\\u9009\\u62E9~ \"));\n                };\n\n                success();\n\n                if (valid) {\n                  _context.next = 11;\n                  break;\n                }\n\n                // 如果开关是false,将数据删除\n                _success = function _success() {\n                  message.success(\"\".concat(ele.spuName, \" \\u5DF2\\u7ECF \\u3010\").concat(ele.categoryName, \"\\u3011 \\u63A8\\u8350\\u4E2D \\u8BF7\\u91CD\\u65B0\\u9009\\u62E9~ \"));\n                };\n\n                _context.next = 10;\n                return _this.props.transRecommend(valid, item, ele, true);\n\n              case 10:\n                _success();\n\n              case 11:\n                _context.next = 15;\n                break;\n\n              case 13:\n                _context.next = 15;\n                return _this.props.transRecommend(valid, item, ele, true);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.renderItems = function (ele, index) {\n      if (ele == null) {\n        return React.createElement(\"tr\", {\n          key: \"1\",\n          style: {\n            height: 40,\n            textAlign: \"center\",\n            fontSize: 20,\n            width: \"100%\",\n            margin: \"0 auto\",\n            color: \"grey\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          style: {\n            width: 200,\n            borderLeft: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }), React.createElement(\"td\", {\n          style: {\n            width: 200,\n            borderLeft: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }), React.createElement(\"td\", {\n          style: {\n            width: 200,\n            borderLeft: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }), React.createElement(\"td\", {\n          style: {\n            width: 200,\n            borderLeft: \"none\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }), React.createElement(\"td\", {\n          style: {\n            color: \"grey\",\n            width: 500,\n            borderLeft: \"none\",\n            textAlign: \"right\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"\\u7ED3\\u679C\\u4E0D\\u5B58\\u5728\\uFF0C\"), React.createElement(\"td\", {\n          style: {\n            color: \"grey\",\n            width: 500,\n            borderLeft: \"none\",\n            textAlign: \"left\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"\\u8BF7\\u91CD\\u65B0\\u67E5\\u627E\\u3002\"));\n      } else {\n        return React.createElement(\"tr\", {\n          key: ele.spuId,\n          id: ele.spuId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          onChange: function onChange(ev) {\n            _this.checkedChange(index, ev);\n          } //传参小难点\n          // id={`num${index}`}\n          // indeterminate={this.state.storeArr[index]}\n          ,\n          checked: _this.state.storeArr[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, ele.spuId), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, ele.spuName), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, ele.categoryName), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, ele.saleVolume), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, \"\\uFFE5\", ele.currentPrice), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(Switch, {\n          size: \"default\",\n          defaultChecked: ele.categoryName === \"新品\",\n          onClick: function onClick(valid) {\n            _this.switchChange(valid, \"新品\", ele);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          onClick: function onClick(ev) {\n            _this.props.editClick(_this.props, ele, ev);\n          } //传参为tr索引\n          ,\n          style: {\n            fontSize: 13,\n            width: 60,\n            height: 25,\n            display: \"inline-block\",\n            color: \"#1890ff\",\n            cursor: \"pointer\",\n            borderRight: \"1px solid #ebeef5\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, \"\\u7F16\\u8F91\"), React.createElement(Popconfirm, {\n          placement: \"topRight\",\n          title: text,\n          okText: \"Yes\",\n          onConfirm: function onConfirm() {\n            return _this.props.transRecommend(false, ele.categoryName, ele);\n          },\n          cancelText: \"No\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          type: \"primary\",\n          size: \"small\",\n          style: {\n            fontSize: 13,\n            width: 60,\n            height: 25,\n            cursor: \"pointer\",\n            color: \"red\",\n            display: \"inline-block\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, \"\\u5220\\u9664\"))));\n      }\n    };\n\n    _this.checkedChange = function (index, ev) {\n      // 单个点击事件 index 为传入索引\n      ev.stopPropagation();\n      _this.itemsArr[index] = ev.target.checked; //改变操作复选框的数组        \n\n      if (_this.itemsArr.every(function (ele) {\n        return ele === true;\n      })) {\n        // 多选框全为 => true,全选按钮为true,indeterminate为false(indeterminate中间状态)\n        _this.setState({\n          storeArr: _this.itemsArr,\n          // 为了render\n          checkAll: true,\n          indeterminate: false\n        });\n      } else {\n        // console.log(this.selectValue)\n        _this.selectValue ? _this.setState({\n          storeArr: _this.itemsArr,\n          checkAll: false,\n          indeterminate: true,\n          booleanValue: false\n        }) : _this.setState({\n          // 存在多选框为 false\n          storeArr: _this.itemsArr,\n          checkAll: false,\n          indeterminate: true\n        });\n      }\n\n      if (!_this.itemsArr.some(function (ele) {\n        return ele === true;\n      })) {\n        //多选框全为 => false,indeterminate为false\n        _this.setState({\n          storeArr: _this.itemsArr,\n          indeterminate: false\n        });\n      }\n    };\n\n    _this.onCheckAllChange = function (e) {\n      //  全选 功能 \n      if (e.target.checked) {\n        _this.itemsArr.forEach(function (ele, index) {\n          _this.itemsArr[index] = e.target.checked;\n        });\n      } else {\n        _this.itemsArr.forEach(function (ele, index) {\n          _this.itemsArr[index] = e.target.checked;\n        });\n      }\n\n      _this.setState({\n        checkAll: e.target.checked,\n        storeArr: _this.itemsArr,\n        indeterminate: false\n      });\n    };\n\n    _this.confirm = function () {\n      // 气泡确认框内容\n      message.info('Clicked on Yes.');\n    };\n\n    _this.bulkOperation =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var tempArr, OperString, collateData, testExist, num, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _loop2, _iterator3, _step3;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              /* 思路： \r\n                  1.首先判断选中内容是哪些？(先看一下数组准不准,state 还是外面的准一些);\r\n                  2.确定选中内容后,判断select中内容;(附加条件select数值有效)\r\n                  3.点击确定发送请求,将选中数据发送到后台进行修改;\r\n                  4.后台接收到的是一个数组,怎样处理进行数组解构;\r\n                  5.后台进行判断,如果是一个数组一条一条增加处理？？\r\n              */\n              tempArr = []; // 创建数组 \n\n              _this.state.storeArr.forEach(function (ele, index) {\n                if (ele) {\n                  tempArr.push(_this.renderData[index]);\n                }\n              }); //1.拿到数据\n\n\n              console.log(tempArr); //选中数据\n\n              console.log(_this.renderData); //总数据\n\n              console.log(_this.state); //总数据\n              // 拿到索引,将点了对勾的数据push到新数组;\n              // 拿到选择内容再进行请求;\n              // console.log(tempArr)  拿到数据以后传送给后台进行修改;\n              // console.log(this.selectValue)  当下选框数组,不能为空字符串\n              // console.log(this.selectOption)  [\"设为优惠\", \"设为热销\", \"设为新品\", \"批量删除\"]\n\n              if (!(_this.selectValue && tempArr.length)) {\n                _context4.next = 39;\n                break;\n              }\n\n              console.log(1111); //select不能为空,复选框不能为空,进入判断;\n\n              OperString = _this.selectValue.substring(2, 4); //获取操作方式： 热销 优惠 新品 取消推荐  \n\n              collateData = function collateData() {\n                //查看是否存在\n                var tempData = [];\n\n                var data = _toConsumableArray(_this.initStoreData.data);\n\n                console.log(_this.initStoreData.data);\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                  for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var ele = _step.value;\n                    var _iteratorNormalCompletion2 = true;\n                    var _didIteratorError2 = false;\n                    var _iteratorError2 = undefined;\n\n                    try {\n                      for (var _iterator2 = ele.spuList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                        var item = _step2.value;\n                        //  将拿回来spuList数组,数据处理\n                        item.categoryName = ele.categoryName; // 类名\n\n                        item.checked = false; //拿到数据可以加小tag方便自己操作\n\n                        tempData.push(item);\n                      }\n                    } catch (err) {\n                      _didIteratorError2 = true;\n                      _iteratorError2 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                          _iterator2.return();\n                        }\n                      } finally {\n                        if (_didIteratorError2) {\n                          throw _iteratorError2;\n                        }\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n                  } finally {\n                    if (_didIteratorError) {\n                      throw _iteratorError;\n                    }\n                  }\n                }\n\n                tempData = tempData.filter(function (ele) {\n                  return ele.categoryName == \"新品\" || ele.categoryName == \"热销\" || ele.categoryName == \"优惠\";\n                });\n                console.log(tempData);\n                return tempData;\n                /* \r\n                  思路整理: \r\n                     拿到每个获取的信息;(操作方式用传入方式,推荐就直接操作就可以了)\r\n                     将信息进行匹配筛选,先按照categoryName查找再根据id查找\r\n                     查找结果放在一个数组中,如果数组没找到添加进去,找到就禁止添加已存在 \r\n                */\n              };\n\n              if (!(OperString === \"推荐\" && tempArr.length)) {\n                _context4.next = 17;\n                break;\n              }\n\n              console.log(\"取消推荐\"); // 批量操作选中推荐,并且有数据被checked进入判断\n              // 循环调用推荐,正常逻辑应该是一次请求结束,不能多次请求;\n\n              _context4.next = 13;\n              return _this.setState({\n                indeterminate: false\n              });\n\n            case 13:\n              _context4.next = 15;\n              return tempArr.forEach(function (ele) {\n                return _this.props.transRecommend(false, ele.categoryName, ele);\n              });\n\n            case 15:\n              _context4.next = 39;\n              break;\n\n            case 17:\n              // 三种推荐操作\n              testExist =\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function testExist() {\n                var _loop, _i;\n\n                return _regeneratorRuntime.wrap(function testExist$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _loop =\n                        /*#__PURE__*/\n                        _regeneratorRuntime.mark(function _loop() {\n                          var ele;\n                          return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  ele = tempArr[_i];\n                                  _context2.next = 3;\n                                  return collateData().filter(function (item) {\n                                    return ele.spuId === item.spuId && ele.categoryName === OperString;\n                                  });\n\n                                case 3:\n                                case \"end\":\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _loop, this);\n                        });\n                        _i = 0;\n\n                      case 2:\n                        if (!(_i < tempArr.length)) {\n                          _context3.next = 7;\n                          break;\n                        }\n\n                        return _context3.delegateYield(_loop(), \"t0\", 4);\n\n                      case 4:\n                        _i++;\n                        _context3.next = 2;\n                        break;\n\n                      case 7:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, testExist, this);\n              });\n              num = 0; //手动给循环加个索引,因为知道总数组,不知道循环的是谁\n\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _iteratorError3 = undefined;\n              _context4.prev = 22;\n\n              _loop2 = function _loop2() {\n                var ele = _step3.value;\n                //循环原理\n                //没有就添加,有的话警告：已经存在\n                ++num;\n\n                if (ele.length) {\n                  // 提示已经存在了\n                  var success = function success() {\n                    message.success(\"\".concat(ele[0].spuName, \" \\u5B58\\u5728 \\u3010\").concat(ele[0].categoryName, \"\\u3011 \\u63A8\\u8350\\u4E2D \\u8BF7\\u91CD\\u65B0\\u9009\\u62E9~ \"));\n                  };\n\n                  success();\n                } else {\n                  // 如果0,不存在就进行添加,不存在是谁\n                  tempArr[num - 1].categoryName = OperString;\n\n                  _this.props.transRecommend(true, tempArr[num - 1].categoryName, tempArr[num - 1], true);\n\n                  console.log(\"推荐中不存在进行添加,添加到推荐中\");\n                }\n              };\n\n              for (_iterator3 = testExist()[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                _loop2();\n              }\n\n              _context4.next = 31;\n              break;\n\n            case 27:\n              _context4.prev = 27;\n              _context4.t0 = _context4[\"catch\"](22);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context4.t0;\n\n            case 31:\n              _context4.prev = 31;\n              _context4.prev = 32;\n\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n\n            case 34:\n              _context4.prev = 34;\n\n              if (!_didIteratorError3) {\n                _context4.next = 37;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 37:\n              return _context4.finish(34);\n\n            case 38:\n              return _context4.finish(31);\n\n            case 39:\n              tempArr = null;\n\n            case 40:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2, this, [[22, 27, 31, 39], [32,, 34, 38]]);\n    }));\n    _this.Page = null; //用于包装Pagination组件;\n\n    _this.itemsArr = []; //初始化数组,page切换,清空\n\n    _this.renderArr = [\"已推荐\", \"未推荐\"];\n    _this.renderData = null; // 渲染的数据\n\n    _this.selectOption = [\"设为优惠\", \"设为热销\", \"设为新品\", \"取消推荐\"];\n    _this.selectValue = null; //选择内容\n\n    _this.categoryName = {}; //菜品类名\n\n    _this.initStoreData = null; //将redux传过来数据存一下作为搜索使用,redux已经改变（因为渲染）,所以将此数据再传过去\n\n    _this.state = {\n      current: 1,\n      storeData: [],\n      // 菜品数据\n      categoryName: {},\n      // 菜品类名 \n      indeterminate: false,\n      // 全选按钮 中间状态控制\n      checkAll: false,\n      // 全部选中\n      storeArr: [],\n      // 状态切换存储数据\n      booleanValue: true,\n      // 确认按钮disable 控制属性  \n      selecctValue: \"批量操作\",\n      // 批量操作 \n      colorBoolean: true // 控制select下拉框颜色\n\n    };\n    return _this;\n  }\n\n  _createClass(Temp, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.props.fetchFoodInfo();\n\n              case 2:\n                this.initStoreData = this.props.data;\n                /*  \r\n                问题：\r\n                   点请求数据异步,拿不到;\r\n                  在使用过成中将redux和state用导致变量无法更新,禁止混用;  \r\n                */\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\n\n  }, {\n    key: \"handleSearchClick\",\n    value: function () {\n      var _handleSearchClick = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var booleanValue, obj;\n        return _regeneratorRuntime.wrap(function _callee4$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                booleanValue = Object.values(this.props.form.getFieldsValue()).every(function (ele) {\n                  return !!ele === false;\n                });\n\n                if (!booleanValue) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", null);\n\n              case 5:\n                obj = this.props.form.getFieldsValue();\n\n                if (obj.recommendState === \"已推荐\") {\n                  obj.recommendState = \"新品\";\n                }\n\n                _context6.prev = 7;\n                _context6.next = 10;\n                return this.props.batchQuery(obj, this.props.data.data);\n\n              case 10:\n                _context6.next = 16;\n                break;\n\n              case 12:\n                _context6.prev = 12;\n                _context6.t0 = _context6[\"catch\"](7);\n                _context6.next = 16;\n                return this.props.batchQuery(obj, this.initStoreData.data);\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee4, this, [[7, 12]]);\n      }));\n\n      function handleSearchClick() {\n        return _handleSearchClick.apply(this, arguments);\n      }\n\n      return handleSearchClick;\n    }()\n  }, {\n    key: \"handleResetClick\",\n    value: function handleResetClick() {\n      if (this.props.data == null || this.props.data.code !== 0) {\n        //或者运算符有先后顺序\n        //查找不到再重置拿回来以后为null\n        this.props.fetchFoodInfo(); //简单减少请求\n      }\n\n      this.props.form.resetFields();\n    }\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\n\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\n\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return this.props.state === this.props.state;\n    }\n  }, {\n    key: \"ChangePage\",\n\n    /* --------------------------  批量操作部分(以下) -------------------- */\n\n    /* ------------------------  底部页码组件部分(以下) -------------------- */\n\n    /* \r\n      组件声明变量:\r\n           this.Page 和 this.state.current:1\r\n    \r\n      复用注意：首先判断数据格式     \r\n    */\n    value: function () {\n      var _ChangePage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(page) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                //  *** 改变页码 ***\n                // 使用<Pagination/>组件自带回调函数来设置页码对应渲染内容\n                // this.checkedChange()\n                this.itemsArr = [];\n                this.setState({\n                  current: page,\n                  storeArr: [],\n                  checkAll: false,\n                  indeterminate: false,\n                  selecctValue: \"批量操作\",\n                  colorBoolean: true,\n                  booleanValue: true // this.setState({selecctValue: value})\n\n                }); // 注意setState为异步,回调函数问题\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function ChangePage(_x4) {\n        return _ChangePage.apply(this, arguments);\n      }\n\n      return ChangePage;\n    }()\n  }, {\n    key: \"renderPage\",\n    value: function renderPage(tempData) {\n      //  *** 渲染底部page ***\n      //page第二步骤;\n      if (tempData.length) {\n        var length = tempData.length;\n        this.Page = React.createElement(Pagination //  底部页码组件\n        , {\n          defaultCurrent: 1,\n          pageSize: 5,\n          total: length,\n          onChange: this.ChangePage.bind(this),\n          style: {\n            marginRight: 25,\n            marginTop: 30,\n            float: \"right\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376\n          },\n          __self: this\n        });\n        return this.Page;\n      }\n    }\n    /* ------------------------  底部页码组件部分(以上) -------------------- */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var Items = null;\n      var tempData = [];\n\n      var data = _objectSpread({}, this.props.data);\n\n      var _this$props$form = this.props.form,\n          getFieldProps = _this$props$form.getFieldProps,\n          getFieldError = _this$props$form.getFieldError,\n          isFieldValidating = _this$props$form.isFieldValidating,\n          getFieldDecorator = _this$props$form.getFieldDecorator; // 初始为 {} 空对象\n\n      if (data.data) {\n        // 数据格式化处理,放在一个数组内,便于渲染\n        // Object.keys()  获取对象中keys值\n        // JSON.stringify(data) == \"{}\" //空对象判断方法\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = data.data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var ele = _step4.value;\n            this.categoryName[ele.categoryName] = ele.categoryName; // 存储类名\n\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = ele.spuList[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var item = _step5.value;\n                //  将拿回来spuList数组,数据处理\n                item.categoryName = ele.categoryName; // 类名\n\n                item.checked = false; // 拿到数据可以加小tag方便自己操作\n\n                if (ele.categoryName === \"新品\") {\n                  tempData.push(item);\n                }\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      if (JSON.stringify(this.props.data) !== \"{}\" && !data.data) {\n        if (Array.isArray(this.props.data)) {\n          // 如果搜索回来结果是一个数组\n          tempData = this.props.data; // 把数组直接丢进去进行渲染,渲染数组弄成最深层目录一个格式,最省事了,不用再考虑格式问题,直接丢数据就可以修改.\n        } else {\n          tempData.push(this.props.data);\n        } //弄成统一格式进行渲染,比如都放在一个数组里面,总是需要改格式,有深层嵌套很麻烦。\n\n      }\n      /* ------------------------         渲染主要列表       -------------------- */\n\n\n      if (tempData.length) {\n        // 注释:  见用户：Member组件\n        var _data = tempData;\n        console.log(_data);\n\n        if (_data.length < 5) {\n          Items = _data.map(this.renderItems);\n        } else {\n          this.renderData = _data.filter(function (e, index) {\n            return index >= 5 * (_this2.state.current - 1) && index < 5 * _this2.state.current;\n          });\n          Items = this.renderData.map(this.renderItems);\n\n          if (!Items.length) {\n            var temp = this.state.current * 1;\n            this.setState({\n              current: temp - 1\n            });\n            return this.state;\n          }\n        }\n\n        if (!this.itemsArr.length) {\n          //itemsArr为空初始化，非空不进判断，避免重复render\n          this.itemsArr = Array(Items.length).fill(false);\n        }\n      }\n\n      console.log(this.renderData);\n      return React.createElement(\"section\", {\n        className: \"marketing-info-new\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"app-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"el-serch-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"el-title-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }, React.createElement(IconFont, {\n        type: \"mall-doc-glass\",\n        style: {\n          fontSize: 16,\n          marginRight: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, \"\\u7B5B\\u9009\\u68C0\\u7D22\"), React.createElement(\"button\", {\n        className: \"add\",\n        onClick: function onClick() {\n          _this2.handleSearchClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, \"\\u67E5\\u8BE2\\u7ED3\\u679C\"), React.createElement(Button, {\n        className: \"btn\",\n        style: {\n          color: \"#1890ff\",\n          float: \"right\",\n          marginRight: 20\n        },\n        ghost: true,\n        onClick: this.handleResetClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457\n        },\n        __self: this\n      }, \"\\u91CD\\u7F6E\")), React.createElement(Form, {\n        layout: \"inline\",\n        action: \"\",\n        style: {\n          marginTop: 15,\n          marginBottom: 30,\n          marginLeft: 60,\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"\\u8F93\\u5165\\u68C0\\u7D22\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, getFieldDecorator(\"spuName\", {// initialValue: this.props.location.state[0].state\n      })(React.createElement(Input, {\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u83DC\\u540D\",\n        style: {\n          width: 170,\n          color: \"#606266\",\n          fontSize: 12,\n          marginRight: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }))), React.createElement(FormItem, {\n        label: \"\\u83DC\\u54C1\\u7C7B\\u578B\" // {...formItemLayout}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, getFieldDecorator(\"categoryName\", {// initialValue: this.props.location.state[0].state\n      })(React.createElement(Select, {\n        placeholder: \"\\u8BF7\\u9009\\u62E9\\u7C7B\\u578B\",\n        style: {\n          width: 170,\n          color: \"#606266\",\n          fontSize: 12,\n          marginRight: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, Object.keys(this.categoryName).filter(function (ele) {\n        return ele !== \"新品\" && ele !== \"优惠\" && ele !== \"热销\";\n      }).map(function (ele) {\n        return React.createElement(Option, {\n          value: ele,\n          key: ele,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 504\n          },\n          __self: this\n        }, ele);\n      })))), React.createElement(FormItem, {\n        label: \"\\u63A8\\u8350\\u72B6\\u6001\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509\n        },\n        __self: this\n      }, getFieldDecorator(\"recommendState\", {// initialValue: this.props.location.state[0].state\n      })(React.createElement(Select, {\n        placeholder: \"\\u63A8\\u8350\\u72B6\\u6001\",\n        style: {\n          width: 170,\n          color: \"#606266\",\n          fontSize: 12,\n          marginRight: \"0!imoprtant\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, this.renderArr.map(function (ele) {\n        return React.createElement(Option, {\n          value: ele,\n          key: ele,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 520\n          },\n          __self: this\n        }, ele);\n      }))))))), React.createElement(\"div\", {\n        className: \"el-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"el-title-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531\n        },\n        __self: this\n      }, React.createElement(IconFont, {\n        type: \"mall-doc-list\",\n        style: {\n          fontSize: 16,\n          marginRight: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }, \"\\u6570\\u636E\\u5217\\u8868\"), React.createElement(\"button\", {\n        className: \"add\",\n        style: {\n          margin: -4\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, \"\\u6DFB\\u52A0\\u83DC\\u54C1\"))), React.createElement(\"main\", {\n        className: \"table-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        cellPadding: \"0\",\n        cellSpacing: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        onChange: this.onCheckAllChange.bind(this),\n        indeterminate: this.state.indeterminate,\n        checked: this.state.checkAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      })), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      }, \"\\u7F16\\u53F7\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }, \"\\u83DC\\u54C1\\u540D\\u79F0\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, \"\\u83DC\\u54C1\\u7C7B\\u578B\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        },\n        __self: this\n      }, \"\\u9500\\u91CF\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552\n        },\n        __self: this\n      }, \"\\u72B6\\u6001\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, \"\\u662F\\u5426\\u63A8\\u8350\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, \"\\u64CD\\u4F5C\"))), React.createElement(\"tbody\", {\n        id: \"ItemWrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, Items))), React.createElement(Select // defaultValue= {this.state.defalutSelecctValue} //不能改变颜色\n      , {\n        placeholder: \"\\u6279\\u91CF\\u64CD\\u4F5C\" //默认值\n        ,\n        style: {\n          marginRight: 20,\n          marginTop: 40,\n          float: \"left\",\n          width: 150,\n          size: \"large\",\n          color: this.state.colorBoolean ? \"rgba(0, 0, 0, 0.45)\" : \"rgba(0, 0, 0, 1)\" // 颜色控制方法: 初始一个颜色下拉选择后一个颜色,page改变后内容和文字颜色都恢复\n\n        },\n        value: this.state.selecctValue,\n        onSelect: function onSelect(value) {\n          _this2.selectValue = value;\n\n          _this2.setState({\n            //下拉后改变颜色tag--colorBoolean,把下拉表内容也弄回去;\n            colorBoolean: false,\n            selecctValue: value\n          });\n\n          if (_this2.itemsArr.some(function (ele) {\n            return ele === true;\n          })) {\n            _this2.setState({\n              booleanValue: false\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, this.selectOption.map(function (item) {\n        return React.createElement(Option, {\n          value: item,\n          key: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 585\n          },\n          __self: this\n        }, item);\n      })), React.createElement(Button, {\n        type: \"primary\",\n        style: {\n          marginTop: 40,\n          fontSize: 13,\n          height: 30,\n          size: \"large\"\n        },\n        disabled: this.state.booleanValue,\n        onClick: function onClick() {\n          return _this2.bulkOperation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        },\n        __self: this\n      }, \"\\u786E\\u5B9A\"), this.renderPage(tempData)));\n    }\n  }]);\n\n  return Temp;\n}(Component);\n\nvar Demo = Form.create({\n  name: 'title'\n})(Temp);\nexport default withRouter(connect(function (state) {\n  return {\n    data: state.foodData\n  };\n}, //将redux变量赋值到组件,成组件变量Data\nfunction (dispatch) {\n  return bindActionCreators(actionCreators, dispatch);\n})(Demo)); // export default withRouter(Demo)","map":{"version":3,"sources":["F:\\App Store\\Coding\\Github_Download\\JS-\\React项目\\react-mall\\src\\components\\Content\\Marketing\\New\\New.js"],"names":["React","Component","Button","Pagination","Switch","Checkbox","Select","Popconfirm","message","Form","Input","IconFont","withRouter","actionCreators","connect","bindActionCreators","Option","text","FormItem","Item","Temp","props","switchChange","valid","item","ele","console","log","screenData","initStoreData","data","filter","i","categoryName","confirm","spuList","n","spuName","length","success","transRecommend","renderItems","index","height","textAlign","fontSize","width","margin","color","borderLeft","spuId","ev","checkedChange","state","storeArr","saleVolume","currentPrice","editClick","display","cursor","borderRight","stopPropagation","itemsArr","target","checked","every","setState","checkAll","indeterminate","selectValue","booleanValue","some","onCheckAllChange","e","forEach","info","bulkOperation","tempArr","push","renderData","OperString","substring","collateData","tempData","testExist","num","Page","renderArr","selectOption","current","storeData","selecctValue","colorBoolean","fetchFoodInfo","Object","values","form","getFieldsValue","obj","recommendState","batchQuery","code","resetFields","page","ChangePage","bind","marginRight","marginTop","float","Items","getFieldProps","getFieldError","isFieldValidating","getFieldDecorator","JSON","stringify","Array","isArray","map","temp","fill","handleSearchClick","handleResetClick","marginBottom","marginLeft","keys","size","value","renderPage","Demo","create","name","foodData","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Pagination, Switch, Checkbox, Select, Popconfirm, message, Form, Input } from 'antd';\r\nimport IconFont from '../../../../iconfont/font'\r\nimport './New.less';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n/*   -----------------     redux引入部分      ------------------- */\r\nimport * as actionCreators from '../../../../redux/actions/actions';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from \"redux\"\r\n\r\nconst Option = Select.Option;\r\nconst text = 'Are you sure to delete this task?';\r\nconst FormItem = Form.Item;\r\n\r\nclass Temp extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.Page = null;  //用于包装Pagination组件;\r\n        this.itemsArr = []; //初始化数组,page切换,清空\r\n        this.renderArr = [\"已推荐\", \"未推荐\"];\r\n        this.renderData = null;        // 渲染的数据\r\n        this.selectOption = [\"设为优惠\", \"设为热销\", \"设为新品\", \"取消推荐\"]\r\n        this.selectValue = null //选择内容\r\n        this.categoryName = {} //菜品类名\r\n        this.initStoreData = null; //将redux传过来数据存一下作为搜索使用,redux已经改变（因为渲染）,所以将此数据再传过去\r\n        this.state = {\r\n            current: 1,\r\n            storeData: [],        // 菜品数据\r\n            categoryName: {},      // 菜品类名 \r\n            indeterminate: false, // 全选按钮 中间状态控制\r\n            checkAll: false,      // 全部选中\r\n            storeArr: [],         // 状态切换存储数据\r\n            booleanValue: true,   // 确认按钮disable 控制属性  \r\n            selecctValue: \"批量操作\", // 批量操作 \r\n            colorBoolean: true,     // 控制select下拉框颜色\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        // 提前计划放入redux中的数据和方法\r\n        // console.log(this)\r\n        await this.props.fetchFoodInfo()\r\n        this.initStoreData = this.props.data\r\n\r\n        /*  \r\n       问题：\r\n           点请求数据异步,拿不到;\r\n \r\n       在使用过成中将redux和state用导致变量无法更新,禁止混用;  \r\n        */\r\n    }\r\n\r\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\r\n    async handleSearchClick() {\r\n        let booleanValue = Object.values(this.props.form.getFieldsValue()).every(ele => !!ele === false)\r\n        if (booleanValue) {\r\n            //   初次未设置任何筛选内容时点击搜索,不产生结果;\r\n            return null\r\n        } else {\r\n            let obj = this.props.form.getFieldsValue()\r\n            if (obj.recommendState === \"已推荐\") {\r\n                obj.recommendState = \"新品\"\r\n            }\r\n            try {\r\n                await this.props.batchQuery(obj, this.props.data.data)\r\n            } catch (error) {\r\n                // console.log( this.initStoreData ) // {data: Array(11), code: 0, msg: \"查找成功\"}\r\n                await this.props.batchQuery(obj, this.initStoreData.data)\r\n            }\r\n        }\r\n        // booleanValue? null :\r\n        // 调用redux操作数据,传入表单内设置值,并将操作前数据传过去\r\n    }\r\n    handleResetClick() {\r\n        if ((this.props.data == null) || (this.props.data.code !== 0)) { //或者运算符有先后顺序\r\n            //查找不到再重置拿回来以后为null\r\n            this.props.fetchFoodInfo()  //简单减少请求\r\n        }\r\n        this.props.form.resetFields()\r\n    }\r\n\r\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\r\n\r\n    /* ------------------    信息内容列表部分渲染(以下)   ------------------- */\r\n    switchChange = async (valid, item, ele) => {\r\n\r\n        console.log(valid, item, ele)\r\n\r\n        //true \"新品\" {spuName: \"风味木耳\", unit: \"份\", spuId: 1201640229, tag: \"85608019\", activityTag: \"\", …}\r\n\r\n        //对valid是true还是false进行判断、\r\n\r\n        let screenData = this.initStoreData.data.filter((i) => {\r\n            //  筛选出新品类型 数据\r\n            return i.categoryName === item\r\n        })\r\n        let confirm = screenData[0].spuList.filter(n => n.spuName === ele.spuName)\r\n        // 查看新品类型数据中是否有 传入的ele数据\r\n        if (confirm.length) {\r\n            // 发现其中有confirm数据,提示已经存在\r\n            const success = () => {\r\n                message.success(`${ele.spuName} 存在 【${ele.categoryName}】 推荐中 请重新选择~ `);\r\n            };\r\n            success()\r\n            if (!valid) {\r\n                // 如果开关是false,将数据删除\r\n                const success = () => {\r\n                    message.success(`${ele.spuName} 已经 【${ele.categoryName}】 推荐中 请重新选择~ `);\r\n                };\r\n                await this.props.transRecommend(valid, item, ele, true)\r\n                success()\r\n\r\n            }\r\n        } else {\r\n            // 其中没有的时候进行添加,只是添加数据库但是不往回拿,只更改数据库不更改redux\r\n            await this.props.transRecommend(valid, item, ele, true)\r\n        }\r\n\r\n\r\n\r\n\r\n        /* \r\n            思路整理：\r\n               0.判断是否存在\r\n               1.如果存在就提示\r\n               2.如果不存在true不了,设置为false\r\n        */\r\n    }\r\n    shouldComponentUpdate() {\r\n        return this.props.state === this.props.state\r\n    }\r\n    renderItems = (ele, index) => {\r\n\r\n        if (ele == null) {\r\n            return <tr key=\"1\"\r\n                style={{\r\n                    height: 40, textAlign: \"center\", fontSize: 20, width: \"100%\", margin: \"0 auto\",\r\n                    color: \"grey\"\r\n                }}>\r\n                {/* <td style={{ width: 200,borderRight:\"none\" }}></td> */}\r\n                <td style={{ width: 200, borderLeft: \"none\" }}></td>\r\n                <td style={{ width: 200, borderLeft: \"none\" }}></td>\r\n                <td style={{ width: 200, borderLeft: \"none\" }}></td>\r\n                <td style={{ width: 200, borderLeft: \"none\" }}></td>\r\n                <td style={{ color: \"grey\", width: 500, borderLeft: \"none\", textAlign: \"right\" }}>结果不存在，</td>\r\n                <td style={{ color: \"grey\", width: 500, borderLeft: \"none\", textAlign: \"left\" }}>请重新查找。</td>\r\n            </tr>\r\n        } else {\r\n            return (\r\n                <tr key={ele.spuId} id={ele.spuId}  >\r\n                    <td>\r\n                        < Checkbox\r\n                            onChange={(ev) => { this.checkedChange(index, ev) }}//传参小难点\r\n                            // id={`num${index}`}\r\n                            // indeterminate={this.state.storeArr[index]}\r\n                            checked={this.state.storeArr[index]}\r\n                        />\r\n                    </td>\r\n                    <td>{ele.spuId}</td>\r\n                    <td>{ele.spuName}</td>\r\n                    <td >{ele.categoryName}</td>\r\n                    <td>{ele.saleVolume}</td>\r\n                    <td>￥{ele.currentPrice}</td>\r\n                    <td>\r\n                        <Switch\r\n                            size=\"default\"\r\n                            defaultChecked={ele.categoryName === \"新品\"}\r\n                            onClick={(valid) => {\r\n                                this.switchChange(valid, \"新品\", ele)\r\n                            }}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <span\r\n                            onClick={(ev) => {\r\n                                this.props.editClick(this.props, ele, ev)\r\n                            }}//传参为tr索引\r\n                            style={{ fontSize: 13, width: 60, height: 25, display: \"inline-block\", color: \"#1890ff\", cursor: \"pointer\", borderRight: \"1px solid #ebeef5\" }}>\r\n                            编辑</span>\r\n                        <Popconfirm\r\n                            placement=\"topRight\"\r\n                            title={text}\r\n                            okText=\"Yes\"\r\n                            onConfirm={() =>\r\n                                this.props.transRecommend(false, ele.categoryName, ele)\r\n                            }\r\n                            cancelText=\"No\">\r\n                            <span\r\n                                type=\"primary\"\r\n                                size=\"small\"\r\n                                style={{ fontSize: 13, width: 60, height: 25, cursor: \"pointer\", color: \"red\", display: \"inline-block\" }}\r\n                            >删除</span>\r\n                        </Popconfirm>\r\n                    </td>\r\n                </tr>)\r\n        }\r\n    }\r\n    checkedChange = (index, ev) => {\r\n        // 单个点击事件 index 为传入索引\r\n        ev.stopPropagation()\r\n        this.itemsArr[index] = ev.target.checked  //改变操作复选框的数组        \r\n        if (this.itemsArr.every(ele => ele === true)) {\r\n            // 多选框全为 => true,全选按钮为true,indeterminate为false(indeterminate中间状态)\r\n            this.setState({\r\n                storeArr: this.itemsArr,  // 为了render\r\n                checkAll: true,\r\n                indeterminate: false\r\n            })\r\n        } else {\r\n            // console.log(this.selectValue)\r\n            (this.selectValue) ? this.setState({\r\n                storeArr: this.itemsArr,\r\n                checkAll: false,\r\n                indeterminate: true, booleanValue: false\r\n            }) : this.setState({ // 存在多选框为 false\r\n                storeArr: this.itemsArr,\r\n                checkAll: false,\r\n                indeterminate: true\r\n            })\r\n        }\r\n        if (!this.itemsArr.some(ele => ele === true)) {\r\n            //多选框全为 => false,indeterminate为false\r\n            this.setState({\r\n                storeArr: this.itemsArr,\r\n                indeterminate: false\r\n            })\r\n        }\r\n    }\r\n    onCheckAllChange = (e) => {\r\n        //  全选 功能 \r\n        if (e.target.checked) {\r\n            this.itemsArr.forEach((ele, index) => {\r\n                this.itemsArr[index] = e.target.checked\r\n            });\r\n        }\r\n        else {\r\n            this.itemsArr.forEach((ele, index) => {\r\n                this.itemsArr[index] = e.target.checked\r\n            });\r\n        }\r\n        this.setState({\r\n            checkAll: e.target.checked,\r\n            storeArr: this.itemsArr,\r\n            indeterminate: false\r\n        })\r\n\r\n    }\r\n    confirm = () => {\r\n        // 气泡确认框内容\r\n        message.info('Clicked on Yes.');\r\n    }\r\n    /* ------------------    信息内容列表部分渲染(以上)   ------------------- */\r\n\r\n    /* -------------------------- 批量操作部分(以下) -------------------- */\r\n    bulkOperation = async () => {\r\n        /* 思路： \r\n            1.首先判断选中内容是哪些？(先看一下数组准不准,state 还是外面的准一些);\r\n            2.确定选中内容后,判断select中内容;(附加条件select数值有效)\r\n            3.点击确定发送请求,将选中数据发送到后台进行修改;\r\n            4.后台接收到的是一个数组,怎样处理进行数组解构;\r\n            5.后台进行判断,如果是一个数组一条一条增加处理？？\r\n        */\r\n        let tempArr = [] // 创建数组 \r\n\r\n\r\n        this.state.storeArr.forEach((ele, index) => { if (ele) { tempArr.push(this.renderData[index]) } }) //1.拿到数据\r\n\r\n        console.log(tempArr) //选中数据\r\n        console.log(this.renderData) //总数据\r\n        console.log(this.state) //总数据\r\n\r\n        // 拿到索引,将点了对勾的数据push到新数组;\r\n        // 拿到选择内容再进行请求;\r\n        // console.log(tempArr)  拿到数据以后传送给后台进行修改;\r\n        // console.log(this.selectValue)  当下选框数组,不能为空字符串\r\n        // console.log(this.selectOption)  [\"设为优惠\", \"设为热销\", \"设为新品\", \"批量删除\"]\r\n\r\n        if (this.selectValue && tempArr.length) {\r\n            console.log(1111)\r\n            //select不能为空,复选框不能为空,进入判断;\r\n            let OperString = this.selectValue.substring(2, 4) //获取操作方式： 热销 优惠 新品 取消推荐  \r\n            let collateData = () => { //查看是否存在\r\n                let tempData = [];\r\n                let data = [...this.initStoreData.data]\r\n                console.log(    this.initStoreData.data    )\r\n                for (let ele of data) {\r\n                    for (let item of ele.spuList) {//  将拿回来spuList数组,数据处理\r\n                        item.categoryName = ele.categoryName // 类名\r\n                        item.checked = false  //拿到数据可以加小tag方便自己操作\r\n                        tempData.push(item)\r\n                    }\r\n                }\r\n                tempData = tempData.filter((ele) => ele.categoryName == \"新品\" || ele.categoryName == \"热销\" || ele.categoryName == \"优惠\"\r\n                )\r\n                console.log(tempData)\r\n                return tempData\r\n                /* \r\n                  思路整理: \r\n                     拿到每个获取的信息;(操作方式用传入方式,推荐就直接操作就可以了)\r\n                     将信息进行匹配筛选,先按照categoryName查找再根据id查找\r\n                     查找结果放在一个数组中,如果数组没找到添加进去,找到就禁止添加已存在 \r\n                */\r\n            }\r\n\r\n            if (OperString === \"推荐\" && tempArr.length) {\r\n                console.log(\"取消推荐\")\r\n                // 批量操作选中推荐,并且有数据被checked进入判断\r\n                // 循环调用推荐,正常逻辑应该是一次请求结束,不能多次请求;\r\n                await this.setState({\r\n                    indeterminate: false,\r\n                })\r\n                await tempArr.forEach((ele) => this.props.transRecommend(false, ele.categoryName, ele))\r\n\r\n            } else {\r\n                // 三种推荐操作\r\n                let testExist = function* () {\r\n                    for (let ele of tempArr) {\r\n                        yield collateData().filter((item) => {\r\n                            return ele.spuId === item.spuId && ele.categoryName === OperString\r\n                        })\r\n                    }\r\n                };\r\n                let num = 0;//手动给循环加个索引,因为知道总数组,不知道循环的是谁\r\n                for (let ele of testExist()) { //循环原理\r\n                    //没有就添加,有的话警告：已经存在\r\n                    ++num\r\n                    if (ele.length) {\r\n                        // 提示已经存在了\r\n                        const success = () => {\r\n                            message.success(`${ele[0].spuName} 存在 【${ele[0].categoryName}】 推荐中 请重新选择~ `);\r\n                        };\r\n                        success()\r\n                    } else {\r\n                        // 如果0,不存在就进行添加,不存在是谁\r\n                        tempArr[num - 1].categoryName = OperString\r\n                        this.props.transRecommend(true, tempArr[num - 1].categoryName, tempArr[num - 1],true)\r\n                        console.log(\"推荐中不存在进行添加,添加到推荐中\")\r\n                    }\r\n                }\r\n            }\r\n            // this.props.batchUpdate(tempArr, OperString) //(数据,操作方式)\r\n        }\r\n        tempArr = null\r\n    }\r\n    /* --------------------------  批量操作部分(以下) -------------------- */\r\n\r\n    /* ------------------------  底部页码组件部分(以下) -------------------- */\r\n    /* \r\n      组件声明变量:\r\n           this.Page 和 this.state.current:1\r\n    \r\n      复用注意：首先判断数据格式     \r\n    */\r\n    async ChangePage(page) {\r\n        //  *** 改变页码 ***\r\n        // 使用<Pagination/>组件自带回调函数来设置页码对应渲染内容\r\n        // this.checkedChange()\r\n        this.itemsArr = []\r\n        this.setState({\r\n            current: page,\r\n            storeArr: [],\r\n            checkAll: false,\r\n            indeterminate: false,\r\n            selecctValue: \"批量操作\",\r\n            colorBoolean: true,\r\n            booleanValue: true\r\n            // this.setState({selecctValue: value})\r\n        })\r\n        // 注意setState为异步,回调函数问题\r\n    }\r\n    renderPage(tempData) {\r\n        //  *** 渲染底部page ***\r\n        //page第二步骤;\r\n        if (tempData.length) {\r\n            let length = tempData.length;\r\n            this.Page = <Pagination  //  底部页码组件\r\n                defaultCurrent={1}\r\n                pageSize={5}\r\n                total={length}\r\n                onChange={this.ChangePage.bind(this)}\r\n                style={{\r\n                    marginRight: 25, marginTop: 30, float: \"right\"\r\n                }} />\r\n            return this.Page\r\n        }\r\n    }\r\n    /* ------------------------  底部页码组件部分(以上) -------------------- */\r\n    render() {\r\n\r\n        let Items = null;\r\n        let tempData = [];\r\n        let data = { ...this.props.data }\r\n        const { getFieldProps, getFieldError, isFieldValidating, getFieldDecorator } = this.props.form;\r\n        // 初始为 {} 空对象\r\n        if (data.data) {\r\n            // 数据格式化处理,放在一个数组内,便于渲染\r\n            // Object.keys()  获取对象中keys值\r\n            // JSON.stringify(data) == \"{}\" //空对象判断方法\r\n            for (let ele of data.data) {\r\n                this.categoryName[ele.categoryName] = ele.categoryName// 存储类名\r\n                for (let item of ele.spuList) {//  将拿回来spuList数组,数据处理\r\n                    item.categoryName = ele.categoryName // 类名\r\n                    item.checked = false  // 拿到数据可以加小tag方便自己操作\r\n                    if (ele.categoryName === \"新品\") {\r\n                        tempData.push(item)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (JSON.stringify(this.props.data) !== \"{}\" && !data.data) {\r\n            if (Array.isArray(this.props.data)) { // 如果搜索回来结果是一个数组\r\n                tempData = this.props.data  // 把数组直接丢进去进行渲染,渲染数组弄成最深层目录一个格式,最省事了,不用再考虑格式问题,直接丢数据就可以修改.\r\n            } else {\r\n                tempData.push(this.props.data)\r\n            }\r\n            //弄成统一格式进行渲染,比如都放在一个数组里面,总是需要改格式,有深层嵌套很麻烦。\r\n        }\r\n        /* ------------------------         渲染主要列表       -------------------- */\r\n\r\n        if (tempData.length) { // 注释:  见用户：Member组件\r\n            let data = tempData;\r\n            console.log(data)\r\n            \r\n            if (data.length < 5) {\r\n                Items = data.map(this.renderItems)\r\n            } else {\r\n                this.renderData = data.filter((e, index) =>\r\n                    index >= 5 * (this.state.current - 1) &&\r\n                    index < 5 * this.state.current\r\n                )\r\n                Items = (this.renderData).map(this.renderItems)\r\n                if (!Items.length) {\r\n                    let temp = this.state.current * 1\r\n                    this.setState({ current: temp - 1 })\r\n                    return this.state\r\n                }\r\n            }\r\n            if (!this.itemsArr.length) { //itemsArr为空初始化，非空不进判断，避免重复render\r\n                this.itemsArr = Array(Items.length).fill(false)\r\n            }\r\n          \r\n        }\r\n        console.log(this.renderData)\r\n        return (\r\n            <section className=\"marketing-info-new\">\r\n                {/*   员工信息组件  */}\r\n                <div className=\"app-container\">\r\n                    <div className=\"el-serch-wrap\">\r\n                        <div className=\"el-title-body\">\r\n                            <div>\r\n                                <IconFont type=\"mall-doc-glass\" style={{ fontSize: 16, marginRight: 5 }} />\r\n                                <span>筛选检索</span>\r\n                                <button className=\"add\"\r\n                                    onClick={() => { this.handleSearchClick() }}\r\n                                >查询结果</button>\r\n                                <Button\r\n                                    className=\"btn\"\r\n                                    style={{\r\n                                        color: \"#1890ff\",\r\n                                        float: \"right\",\r\n                                        marginRight: 20,\r\n                                    }}\r\n                                    ghost\r\n                                    onClick={this.handleResetClick.bind(this)}\r\n                                >重置</Button>\r\n                            </div>\r\n                            <Form\r\n                                layout=\"inline\"\r\n                                action=\"\"\r\n                                style={{\r\n                                    marginTop: 15,\r\n                                    marginBottom: 30,\r\n                                    marginLeft: 60,\r\n                                    fontSize: 12\r\n                                }}\r\n                            >\r\n                                <FormItem\r\n                                    label=\"输入检索\"\r\n                                >\r\n                                    {getFieldDecorator(\"spuName\", {\r\n                                        // initialValue: this.props.location.state[0].state\r\n                                    })(\r\n                                        <Input\r\n                                            placeholder=\"请输入菜名\"\r\n                                            style={{\r\n                                                width: 170, color: \"#606266\", fontSize: 12, marginRight: 20\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label=\"菜品类型\"\r\n                                // {...formItemLayout}\r\n                                >\r\n                                    {getFieldDecorator(\"categoryName\", {\r\n                                        // initialValue: this.props.location.state[0].state\r\n                                    })(\r\n                                        <Select\r\n                                            placeholder=\"请选择类型\"\r\n                                            style={{ width: 170, color: \"#606266\", fontSize: 12, marginRight: 20 }}\r\n                                        >\r\n                                            {Object.keys(this.categoryName).filter(ele => ele !== \"新品\" && ele !== \"优惠\" && ele !== \"热销\").map(ele =>\r\n                                                <Option value={ele} key={ele}>{ele}</Option>\r\n                                            )}\r\n                                        </Select>,\r\n                                    )}\r\n                                </FormItem>\r\n                                <FormItem\r\n                                    label=\"推荐状态\"\r\n                                >\r\n                                    {getFieldDecorator(\"recommendState\", {\r\n                                        // initialValue: this.props.location.state[0].state\r\n                                    })(\r\n                                        <Select\r\n                                            placeholder=\"推荐状态\"\r\n                                            style={{ width: 170, color: \"#606266\", fontSize: 12, marginRight: \"0!imoprtant\" }}\r\n                                        >\r\n                                            {this.renderArr.map(ele =>\r\n                                                <Option value={ele} key={ele}>{ele}</Option>\r\n                                            )}\r\n                                        </Select>\r\n                                    )}\r\n\r\n                                </FormItem>\r\n\r\n                            </Form >\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"el-title\">\r\n                        <div className=\"el-title-body\">\r\n                            <IconFont type=\"mall-doc-list\" style={{ fontSize: 16, marginRight: 5 }} />\r\n                            <span>数据列表</span>\r\n                            <button className=\"add\" style={{ margin: -4 }}>添加菜品</button>\r\n                        </div>\r\n                    </div>\r\n                    <main className=\"table-container\">\r\n                        <table cellPadding=\"0\" cellSpacing=\"0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>\r\n                                        < Checkbox\r\n                                            onChange={this.onCheckAllChange.bind(this)}\r\n                                            indeterminate={this.state.indeterminate}\r\n                                            checked={this.state.checkAll}\r\n                                        />\r\n                                    </th>\r\n                                    <th>编号</th>\r\n                                    <th>菜品名称</th>\r\n                                    <th>菜品类型</th>\r\n                                    <th>销量</th>\r\n                                    <th>状态</th>\r\n                                    <th>是否推荐</th>\r\n                                    <th>操作</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"ItemWrap\">{Items}</tbody>\r\n                        </table>\r\n                    </main>\r\n                    <Select\r\n                        // defaultValue= {this.state.defalutSelecctValue} //不能改变颜色\r\n                        placeholder=\"批量操作\" //默认值\r\n                        style={{\r\n                            marginRight: 20, marginTop: 40,\r\n                            float: \"left\", width: 150,\r\n                            size: \"large\",\r\n                            color: this.state.colorBoolean ? \"rgba(0, 0, 0, 0.45)\" : \"rgba(0, 0, 0, 1)\"\r\n                            // 颜色控制方法: 初始一个颜色下拉选择后一个颜色,page改变后内容和文字颜色都恢复\r\n                        }}\r\n                        value={this.state.selecctValue}\r\n                        onSelect={value => {\r\n                            this.selectValue = value\r\n                            this.setState({  //下拉后改变颜色tag--colorBoolean,把下拉表内容也弄回去;\r\n                                colorBoolean: false,\r\n                                selecctValue: value\r\n                            })\r\n                            if (this.itemsArr.some(ele => ele === true)) {\r\n                                this.setState({\r\n                                    booleanValue: false\r\n                                })\r\n                            }\r\n                        }}\r\n                    >\r\n                        {this.selectOption.map(item =>\r\n                            <Option value={item} key={item} >{item}</Option>\r\n                        )}\r\n                    </Select>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        style={{\r\n                            marginTop: 40, fontSize: 13,\r\n                            height: 30, size: \"large\"\r\n                        }}\r\n                        disabled={this.state.booleanValue}\r\n                        onClick={\r\n                            () => this.bulkOperation()}\r\n                    >确定</Button>\r\n                    {this.renderPage(tempData)}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst Demo = Form.create({ name: 'title' })(Temp);\r\n\r\nexport default withRouter(connect(\r\n    state => { return { data: state.foodData } },//将redux变量赋值到组件,成组件变量Data\r\n    dispatch => bindActionCreators(actionCreators, dispatch))(Demo))\r\n\r\n// export default withRouter(Demo)\r\n"]},"metadata":{},"sourceType":"module"}