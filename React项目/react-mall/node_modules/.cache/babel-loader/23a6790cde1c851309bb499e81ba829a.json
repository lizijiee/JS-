{"ast":null,"code":"import _classCallCheck from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\App Store\\\\Coding\\\\Github_Download\\\\JS-\\\\React\\u9879\\u76EE\\\\react-mall\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { extend2, PROJECT_VERSION, pluckNumber, pluck, RGBtoHex } from '../../../fc-core/src/lib';\nimport { ComponentInterface } from '../../../fc-core/src/component-interface';\nimport { downloadCharts, browserDetails, drawSvgOnCanvas, isCanvasElemSupported } from '../utils/lib-svg-to-canvas';\nimport { JpegToPdf, addImage, getDataUrl } from '../utils/jpeg-to-pdf';\nimport { EXPORTACTION, EXPORTMODE, EXPORTFORMAT, LOGMODE, createExportActionOldString, cacheAllImages, makeImageUrlsAbsolute, embedImagesWithNonDataURL, replaceImagesWithNonDataUrl, hasUndownloadableImage, logCharts, svgStrToDataUrl } from '../utils/export-utils';\n\nvar isObject = function isObject(a) {\n  return 'object' == typeof a;\n},\n    getBackgroundColor = function getBackgroundColor(a) {\n  var b = pluckNumber(a.options.containerBackgroundOpacity, 1);\n  return a.jsVars.transparent || 0 === b ? '' : a.options.containerBackgroundColor || '#FFFFFF';\n},\n    getBackgroundAlpha = function getBackgroundAlpha(a) {\n  return a.jsVars.transparent ? 0 : pluckNumber(a.options.containerBackgroundOpacity, 1) + '';\n},\n    IMAGEDATA = 'IMAGE-DATA',\n    xAttrRegx = /\\s\\bx\\b=['\"][^'\"]+?['\"]/ig,\n    yAttrRegx = /\\s\\by\\b=['\"][^'\"]+?['\"]/ig,\n    win = window,\n    doc = win.document,\n    DEFAULT_EXPORT_URL = 'https:' === win.location.protocol ? 'https://export.api3.fusioncharts.com/' : 'http://export.api3.fusioncharts.com/',\n    DEFAULT_LOG_URL = 'https:' === win.location.protocol ? 'https://export.api3.fusioncharts.com/api/v1.0/logs' : 'http://export.api3.fusioncharts.com/api/v1.0/logs',\n    isIOS = win.navigator.userAgent.match(/ (iPad|iPhone|iPod)/g);\n\nvar ExportModule =\n/*#__PURE__*/\nfunction (_ComponentInterface) {\n  _inherits(ExportModule, _ComponentInterface);\n\n  function ExportModule() {\n    var _this;\n\n    _classCallCheck(this, ExportModule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExportModule).call(this)), _this.config = {\n      exportOption: {},\n      chartConfig: {\n        caption: '',\n        subcaption: '',\n        width: '',\n        height: ''\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ExportModule, [{\n    key: \"getName\",\n    value: function getName() {\n      return 'exportModule';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'extension';\n    }\n  }, {\n    key: \"configureMenuBar\",\n    value: function configureMenuBar() {\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h,\n          j = this,\n          k = j.getFromEnv('chart'),\n          l = j.getFromEnv('toolbar'),\n          m = !!win.btoa,\n          n = j.getFromEnv('chart-attrib').exportformats,\n          o = l.getChild(\"hamburgerMenu-\".concat(l.getId(), \"-\").concat(k.getId(), \"-0\")),\n          p = {\n        PNG: 'Export As ' + EXPORTFORMAT.PNG.toUpperCase(),\n        JPG: 'Export As ' + EXPORTFORMAT.JPG.toUpperCase(),\n        PDF: 'Export As ' + EXPORTFORMAT.PDF.toUpperCase(),\n        SVG: 'Export As ' + EXPORTFORMAT.SVG.toUpperCase(),\n        XLS: 'Export As ' + EXPORTFORMAT.XLS.toUpperCase()\n      },\n          q = [];\n\n      if (j.config.exportOption.exportenabled) {\n        if (f = function f(a) {\n          return function () {\n            j.config.exportOption.exportformat = a, j.exportChart({});\n          };\n        }, n) for (a = n.split('|'), d = 0, e = a.length; d < e; d++) {\n          b = a[d].split('='), c = b[0].toUpperCase(), p[c] && (p[c] = b[1] || p[c]), p[c] && (h || (h = {})) && (h[c] = !0);\n        }\n\n        for (c in p) {\n          ('XLS' !== c || m) && (!h || h[c]) && (g = {\n            name: p[c],\n            handler: f(c),\n            action: 'click'\n          }, q.push(g));\n        }\n\n        o.appendInMenu(q);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(a) {\n      var b = this.getFromEnv('chartInstance'),\n          c = this.config,\n          d = c.chartConfig,\n          e = c.exportOption;\n      a = a.chartConfig, a.caption && (d.caption = pluck(a.caption, '')), a.subcaption && (d.subcaption = pluck(a.subcaption, '')), e.exportenabled = pluckNumber(a.exportenabled, 0), e.exportshowmenuitem = pluckNumber(a.exportshowmenuitem, 1), e.exportformat = pluck(a.exportformat, EXPORTFORMAT.PNG), e.exporthandler = pluck(a.html5exporthandler, a.exporthandler, DEFAULT_EXPORT_URL), e.exportaction = function () {\n        var b;\n        return a.exportaction && 'string' == typeof a.exportaction ? (b = a.exportaction.toLowerCase(), 0 <= [EXPORTACTION.DOWNLOAD, EXPORTACTION.SAVE, EXPORTACTION.DOWNLOADSAVE].indexOf(b) ? b : EXPORTACTION.DOWNLOAD) : EXPORTACTION.DOWNLOAD;\n      }(), e.exporttargetwindow = pluck(a.exporttargetwindow, isIOS ? '_blank' : '_self'), e.exportfilename = pluck(a.exportfilename, 'FusionCharts'), e.exportparameters = pluck(a.exportparameters, ''), e.exportcallback = pluck(a.exportcallback, ''), e.exportwithimages = pluckNumber(a.exportwithimages, 1), e.exportmode = function () {\n        var b;\n        return 'undefined' != typeof a.exportatclientside && (b = {\n          1: EXPORTMODE.AUTO,\n          0: EXPORTMODE.AUTO\n        }[a.exportatclientside]), b = a.exportmode || b || EXPORTMODE.AUTO, b = b.toLowerCase(), b;\n      }(), e.logenabled = pluckNumber(a.logenabled, 0), e.loghandler = pluck(a.html5loghandler, a.loghandler, DEFAULT_LOG_URL), e.logmode = function () {\n        var b = a.logmode;\n        return 'undefined' != typeof b && 'string' == typeof b && b.toUpperCase() in LOGMODE ? LOGMODE[b.toUpperCase()] : LOGMODE.AUTO;\n      }(), e.bgcolor = getBackgroundColor(b), e.bgalpha = getBackgroundAlpha(b), e.exportshowmenuitem && this.configureMenuBar();\n    }\n  }, {\n    key: \"exportChart\",\n    value: function exportChart(a) {\n      var b,\n          c,\n          d,\n          e,\n          f = this.getFromEnv('chartInstance'),\n          g = this.getFromEnv('chart'),\n          h = this.config.exportOption,\n          i = isObject(a) && function (a) {\n        var b,\n            c = {};\n\n        for (b in a) {\n          c[b.toLowerCase()] = a[b];\n        }\n\n        return c;\n      }(a) || {},\n          j = extend2(extend2({}, h), i),\n          k = (j.exportformat || EXPORTFORMAT.PNG).toLowerCase(),\n          l = j.exporthandler,\n          m = j.exportaction,\n          n = j.exporttargetwindow || '',\n          o = j.exportfilename,\n          p = j.exportparameters,\n          q = j.exportcallback,\n          r = j.exportwithimages,\n          s = j.exportmode,\n          t = j.logenabled,\n          u = j.loghandler,\n          v = j.logmode,\n          w = this;\n\n      g.fireChartInstanceEvent('beforeExport', j, e, function () {\n        var a,\n            h,\n            i,\n            x,\n            y,\n            z,\n            A,\n            B = f.id,\n            C = w.config.chartConfig.caption,\n            D = w.config.chartConfig.subcaption,\n            E = this.apiInstance.getFromEnv('paper'),\n            F = this.apiInstance.getFromEnv('core-options')['export'].useCanvas,\n            G = g.getChildren('chartMenuBar')[0],\n            H = G.getChild(\"hamburgerMenu-\".concat(G.getId(), \"-\").concat(g.getId(), \"-0\")),\n            I = H.getChild('listContainer'),\n            J = isCanvasElemSupported(),\n            K = {\n          DOMId: B,\n          height: E.height,\n          width: E.width,\n          fileName: o + '.' + k,\n          statusCode: e,\n          statusMessage: e,\n          notice: e\n        },\n            L = {\n          exportAction: m,\n          exportTargetWindow: n,\n          exportCallback: q,\n          fusionCharts: f,\n          paper: E,\n          chartId: B,\n          exportHandler: l,\n          logEnabled: t,\n          logMode: v,\n          logHandler: u\n        },\n            M = function M(a, b, c) {\n          var d, e, g, h;\n          return c = c || m, d = m, e = createExportActionOldString(m), g = ['exportfilename=' + o, 'exportformat=' + k, 'exportaction=' + e, 'exportactionnew=' + d, 'configuredexportaction=' + c, 'exportparameters=' + p].join('|'), h = !!t, v === LOGMODE.CLIENT && (h = !1), {\n            charttype: f.chartType(),\n            stream_type: a || '',\n            stream: b || '',\n            meta_bgColor: j.bgcolor || '',\n            meta_bgAlpha: j.bgalpha || '1',\n            meta_DOMId: f.id,\n            meta_width: E.width || w.config.chartConfig.width,\n            meta_height: E.height || w.config.chartConfig.height,\n            chart_caption: C,\n            chart_sub_caption: D,\n            is_single_export: !0,\n            is_full_version: !1,\n            version: PROJECT_VERSION,\n            user_time_zone: -new Date().getTimezoneOffset(),\n            log_enabled: h,\n            parameters: g\n          };\n        },\n            N = function N() {\n          var a = m;\n          return {\n            chartType: f.chartType(),\n            chartCaption: C,\n            chartSubCaption: D,\n            isSingleExport: !0,\n            isFullVersion: !1,\n            exportAction: a,\n            userTimeZone: -new Date().getTimezoneOffset(),\n            exportFileName: [o, k].join('.'),\n            exportFormat: k,\n            version: PROJECT_VERSION\n          };\n        },\n            O = function O(a) {\n          var b = M(EXPORTFORMAT.SVG, a);\n          downloadCharts(null, null, null, b, L);\n        },\n            P = function P(a) {\n          var b,\n              c,\n              d = hasUndownloadableImage(a);\n          browserDetails.hasCanvas && 'undefined' != typeof win.btoa ? (b = doc.createElement('canvas'), b.width = E.width, b.height = E.height, a = embedImagesWithNonDataURL(a), i = replaceImagesWithNonDataUrl(i), d || k === EXPORTFORMAT.SVG ? (c = M(EXPORTFORMAT.SVG, a), downloadCharts(null, null, null, c, L)) : drawSvgOnCanvas({\n            svg: i,\n            canvas: b,\n            x: 0,\n            y: 0,\n            width: E.width,\n            height: E.height,\n            useCanvas: F\n          }, function () {\n            var a;\n\n            switch (k) {\n              case EXPORTFORMAT.PNG:\n                a = b.toDataURL('image/png');\n                break;\n\n              case EXPORTFORMAT.JPEG:\n                a = b.toDataURL('image/jpeg');\n                break;\n\n              case EXPORTFORMAT.PDF:\n                JpegToPdf(E.height, E.width), addImage(b.toDataURL('image/jpeg')), a = getDataUrl();\n                break;\n\n              default:\n                a = b.toDataURL('image/jpeg');\n            }\n\n            c = M(IMAGEDATA, a), downloadCharts(null, null, null, c, L);\n          })) : O(a);\n        },\n            Q = function Q(a, b, c) {\n          var d;\n          d = doc.createElement('canvas'), d.width = E.width, d.height = E.height, drawSvgOnCanvas({\n            svg: i,\n            canvas: d,\n            x: 0,\n            y: 0,\n            width: E.width,\n            height: E.height,\n            useCanvas: F\n          }, function () {\n            switch (a) {\n              case EXPORTFORMAT.PNG:\n                b(a, d.toDataURL('image/png'), o, c);\n                break;\n\n              case EXPORTFORMAT.JPEG:\n                b(a, d.toDataURL('image/jpeg'), o, c);\n                break;\n\n              case EXPORTFORMAT.PDF:\n                b(a, d.toDataURL('image/jpeg'), o, c);\n                break;\n\n              default:\n                b(a, d.toDataURL('image/jpeg'), o, c);\n            }\n          });\n        },\n            R = function R(b, c, d, e, f) {\n          b === EXPORTFORMAT.PDF && (JpegToPdf(E.height, E.width), addImage(c), c = getDataUrl()), a = f === EXPORTMODE.AUTO ? M(IMAGEDATA, c) : null, downloadCharts('url', c, d + '.' + b, a, e);\n        },\n            S = function S(a, b, c) {\n          var d, e;\n          k === EXPORTFORMAT.SVG ? (d = svgStrToDataUrl(a), c(d, b)) : (e = function e() {\n            c(arguments[1], b);\n          }, Q(k, e, b));\n        },\n            T = function T(b, c, d) {\n          var e, f, g;\n          e = o + '.' + k, k === EXPORTFORMAT.SVG ? (f = svgStrToDataUrl(b), a = d === EXPORTMODE.AUTO ? M(IMAGEDATA, f) : null, downloadCharts('url', f, e, a, c)) : (g = function g() {\n            R(arguments[0], arguments[1], arguments[2], arguments[3], d);\n          }, Q(k, g, c));\n        },\n            U = function U() {\n          var a = 0;\n          b = [], c.replace(/[^\\r\\n]+/g, function (c) {\n            b[a] = [], b[a] = c.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/).map(function (a) {\n              return a.replace(/\"/g, '');\n            }), a += 1;\n          });\n        },\n            V = function V() {\n          function a() {\n            var a, c, d, e, f, g, h;\n            if (!b.length) return '';\n\n            for (a = '<table align=\\'center\\' >', e = 0, h = b.length; e < h; e += 1) {\n              if (0 === e) {\n                for (c = '<thead valign=\\'top\\'><tr>', f = 0, g = b[e].length; f < g; f += 1) {\n                  c += '<th>' + b[e][f] + '</th>';\n                }\n\n                c += '</tr></thead>', d = '<tbody>';\n              } else {\n                for (d += '<tr>', f = 0, g = b[e].length; f < g; f += 1) {\n                  d += '<td>' + b[e][f] + '</td>';\n                }\n\n                d += '</tr>';\n              }\n            }\n\n            return d += '</tbody>', a + c + d + '</table>';\n          }\n\n          return 'data:application/vnd.ms-excel;base64,' + function (a) {\n            return win.btoa(win.unescape(encodeURIComponent(a)));\n          }('<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\"><html xmlns:o=\\'urn:schemas-microsoft-com:office:office\\'xmlns:x=\\'urn:schemas-microsoft-com:office:excel\\'xmlns=\\'http://www.w3.org/TR/REC-html40\\'><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body>' + a() + '</body></html>');\n        },\n            W = function W(a) {\n          g.fireChartInstanceEvent('exportDataReady', a);\n        },\n            X = function X(a) {\n          a === LOGMODE.CLIENT && logCharts(N(), L);\n        };\n\n        if ('xls' === k) {\n          if ('undefined' != typeof win.btoa) c = f.getCSVData();else return g.fireChartInstanceEvent('exportCancelled', j), !1;\n          W(), U(), d = V(), y = 'undefined' != typeof win.btoa && ('Chrome' === browserDetails.name || 'Firefox' === browserDetails.name || 'Edge' === browserDetails.name || 'ie' === browserDetails.name), y ? ((m === EXPORTACTION.DOWNLOAD || m === EXPORTACTION.DOWNLOADSAVE) && (downloadCharts('url', d, o + '.' + k, null, L), g.fireChartInstanceEvent('exported', K)), m === EXPORTACTION.SAVE || m === EXPORTACTION.DOWNLOADSAVE ? (z = m, m === EXPORTACTION.DOWNLOADSAVE && (m = EXPORTACTION.SAVE), a = M(IMAGEDATA, d, z), downloadCharts(null, null, null, a, L), X(v)) : v !== LOGMODE.SERVER && logCharts(N(), L)) : (a = M(IMAGEDATA, d), downloadCharts(null, null, null, a, L), X(v));\n        } else x = I.getLinkedParent().getGraphicalElement('button', 'button'), x.attr('visibility', 'hidden'), h = E.toSVG(r), i = E.toSVG(r && J), i = i.replace(/&nbsp;/ig, ' '), x.attr('visibility', 'visible'), h = h.replace(/(\\sd\\s*=\\s*[\"'])[M\\s\\d\\.]*([\"'])/ig, '$1M 0 0 L 0 0$2'), h = h.replace(/NS\\d+:/gi, 'xlink:'), h = h.replace(/&nbsp;/ig, ' '), i = i.replace(/NS\\d+:/gi, 'xlink:'), i = i.replace(/(\\sd\\s*=\\s*[\"'])[M\\s\\d\\.]*([\"'])/ig, '$1M 0 0 L 0 0$2'), i = i.replace(/(xlink:title\\s*=\\s*)['\"].*[\"']/ig, ''), h = h.replace(/[\\w\\-]+\\=\\\"undefined\\\"/ig, ''), h = h.replace(/(xlink:title\\s*=\\s*)['\"].*[\"']/ig, ''), h = h.replace(/rgba\\(([^\\)]+)\\)/ig, function (a) {\n          return '#' + new RGBtoHex(a.split(','));\n        }), h = h.replace(/<svg[^>]+/i, function (a) {\n          return !a.match(/height/i) && (E.height || w.config.chartConfig.height) && (a += ' height=\"' + (E.height || w.config.chartConfig.height) + '\"'), !a.match(/width/i) && (E.width || w.config.chartConfig.width) && (a += ' width=\"' + (E.width || w.config.chartConfig.width) + '\"'), a;\n        }), h = h.replace(/(([\\w]+\\-)?opacity\\s*=\\s*)['\"][\\d\\.]+e[\\-\\+][\\d]+[\"']/ig, '$1\"0.001\"'), h = h.replace(/(([\\w]+\\-)?opacity\\s*:\\s*)[\\d\\.]+e[\\-\\+][\\d]+/ig, '$10.001'), h = h.replace(/<text[^\\>]+/ig, function (a) {\n          return a = a.replace(/stroke\\=[\\\"\\']([a-z0-9\\#]+)?[\\\"\\']/ig, ''), a = a.replace(/stroke\\s*\\:\\s*([a-z0-9\\#]+)?;?/ig, ''), a = a.replace(/stroke-width\\=[\\\"\\']([a-z0-9\\#]+)?[\\\"\\']/ig, ''), a = a.replace(/stroke-width\\s*\\:\\s*([a-z0-9\\#]+)?;?/ig, ''), a = a.replace(/stroke-opacity\\=[\\\"\\']([a-z0-9\\#]+)?[\\\"\\']/ig, ''), a = a.replace(/stroke-opacity\\s*\\:\\s*([a-z0-9\\#]+)?;?/ig, ''), a = a.replace(/(<text[^\\>]+fill\\=)([\\\"\\'][^\\\"\\']+[\\\"\\'])([^\\>]+)/ig, '$1$2 stroke=$2 stroke-width=\"0.2\"$3'), a = a.replace(/(<text[^\\>]+fill-opacity\\=)([\\\"\\'][^\\\"\\']+[\\\"\\'])([^\\>]+)/ig, '$1$2 stroke-opacity=$2 $3'), a;\n        }), h = h.replace(/<(\\b[^<>s\\s]+\\b)[^\\>]+?opacity\\s*=\\s*['\"][^1][^\\>]+?(\\/>|>[\\s\\r\\n]*?<\\/\\1>)/ig, function (a, b) {\n          var c,\n              d = xAttrRegx.exec(a) || '',\n              e = yAttrRegx.exec(a) || '';\n          return c = ' opacity=\"1\" stroke-opacity=\"1\" fill=\"#cccccc\" stroke-width=\"0\" r=\"0\"', c += ' height=\"0.5\" width=\"0.5\" d=\"M 0 0 L 1 1\" />', a + '<' + b + d + e + c;\n        }), h = makeImageUrlsAbsolute(h), i = makeImageUrlsAbsolute(i), A = s === EXPORTMODE.SERVER, cacheAllImages(h, A, function () {\n          a = M(EXPORTFORMAT.SVG, h), W(a), a = null;\n          var b,\n              c = 'undefined' != typeof win.btoa && ('Chrome' === browserDetails.name || 'Firefox' === browserDetails.name || 'Edge' === browserDetails.name || 'ie' === browserDetails.name),\n              d = hasUndownloadableImage(h);\n          (s === EXPORTMODE.CLIENT || s === EXPORTMODE.AUTO && !d) && c ? (i = replaceImagesWithNonDataUrl(i), (m === EXPORTACTION.DOWNLOAD || m === EXPORTACTION.DOWNLOADSAVE) && (T(i, L, s), g.fireChartInstanceEvent('exported', K)), m === EXPORTACTION.SAVE || m === EXPORTACTION.DOWNLOADSAVE ? (b = m, m === EXPORTACTION.DOWNLOADSAVE && (m = EXPORTACTION.SAVE), S(i, L, function (c, d) {\n            a = M(IMAGEDATA, c, b), downloadCharts(null, null, null, a, d), X(v);\n          }), g.fireChartInstanceEvent('exported', K)) : v !== LOGMODE.SERVER && logCharts(N(), L)) : s === EXPORTMODE.AUTO ? (P(h), X(v)) : s === EXPORTMODE.SERVER && (O(h), X(v));\n        });\n      }, function () {\n        g.fireChartInstanceEvent('exportCancelled', j);\n      });\n    }\n  }]);\n\n  return ExportModule;\n}(ComponentInterface);\n\nexport { ExportModule as default };","map":null,"metadata":{},"sourceType":"module"}