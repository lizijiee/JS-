import SmartRenderer from'../../../../fc-core/src/component-interface/smart-renderer';import{convertColor}from'../../../../fc-core/src/lib/lib-graphics';import{pluckNumber,pluck}from'../../../../fc-core/src/lib';import timeMarkerFactory from'../factories/time-marker-factory';import refLineFactory from'../factories/reference-line-factory';import gridLineFactory from'../factories/grid-line-factory';import mouseTracker from'../factories/mouse-tracker-factory';import MouseActionFactory from'../factories/tooltip-and-hover-factory';import wheelFactory from'../factories/interactions/wheel-factory';import dbTapFactory from'../factories/interactions/db-tap-factory';import swipeFactory from'../factories/interactions/swipe-factory';import pinchZoomFactory from'../factories/interactions/pinch-zoom-factory';import datasetFactory from'../factories/dataset-factory-v2';import verticalCrosslineFactory from'../factories/vertical-crossline-factory';import horizontalCrosslineFactory from'../factories/horizontal-crossline-factory';let M='M',H='H',V='V',HORIZONTAL='horizontal',DEFAULT_BORDER_WIDTH=2;class Canvas extends SmartRenderer{constructor(){super(),this.registerFactory('dataset',datasetFactory),this.registerFactory('gridLine',gridLineFactory),this.registerFactory('timeMarker',timeMarkerFactory),this.registerFactory('referenceLine',refLineFactory),this.registerFactory('mouseTracker',mouseTracker),this.registerFactory('tooltip',MouseActionFactory,['mouseTracker']),this.registerFactory('wheel',wheelFactory),this.registerFactory('dbTap',dbTapFactory),this.registerFactory('swipe',swipeFactory),this.registerFactory('pinchZoom',pinchZoomFactory),this.registerFactory('verticalCrossline',verticalCrosslineFactory,['dataset']),this.registerFactory('horizontalCrossline',horizontalCrosslineFactory,['dataset'])}__setDefaultConfig(){super.__setDefaultConfig(),this.config.padding={left:0,right:0,top:0,bottom:0}}getName(){return'canvas'}getType(){return'canvas'}configureAttributes(a){var b=this,c=b.config,d=b.getFromEnv('dataSource'),e=d.chart&&d.chart.style||{},f=d.styledefinition||{},g={},h=c.borderConfig||(c.borderConfig={});a.xConfigs&&(b.config.xConfigs=a.xConfigs),a.yConfigs&&(b.config.yConfigs=a.yConfigs),a.plotConfigs&&(b.config.plotConfigs=a.plotConfigs),a.tableMap&&(b.config.tableMap=a.tableMap),a.enableGridLines&&(b.config.enableGridLines=a.enableGridLines),a.isContext&&(b.config.isContext=a.isContext),'object'==typeof e.canvas?g=e.canvas:'string'==typeof e.canvas&&e.canvas.split(' ').forEach(a=>Object.assign(g,f[a.toLowerCase()]||{})),['leftBorder','topBorder','rightBorder','bottomBorder'].forEach(b=>{h[b]=a[b]?pluckNumber(g['stroke-width'],DEFAULT_BORDER_WIDTH):h[b]||0}),c.canvasBorderColor=convertColor(pluck(g.stroke,'D6D6D6'),pluckNumber(g['stroke-opacity'],100)),c.canvasBGColor=convertColor(pluck(g.fill,'ffffff'),pluckNumber(g['fill-opacity'],100)),c.enableMouseTracking=pluckNumber(a.enableMouseTracking,1),c.enableMarkers=pluckNumber(a.enableMarkers,1),c.enableTimeMarkers=pluckNumber(a.enableTimeMarkers,1),c.enableReferenceLine=pluckNumber(a.enableReferenceLine,1),c.enableInteraction=pluckNumber(a.enableInteraction,0),c.includeLegend=pluckNumber(a.includeLegend,1),c.gridLineDirection=pluck(a.gridLineDirection,HORIZONTAL),c.styleGridLines=pluckNumber(a.styleGridLines,1),c.gridLineStyle=pluck(a.gridLineStyle)}setDimension(a={}){let b=this,c=b.config,d=c.borderConfig,e=b.getFromEnv('chartConfig');c.canvasTop=a.top||0,c.canvasLeft=a.left||0,c.canvasWidth=a.width||e.origRenderWidth,c.canvasHeight=a.height||e.origRenderHeight,c.canvasBGTop=c.canvasTop+d.topBorder,c.canvasBGLeft=c.canvasLeft+d.leftBorder,c.canvasBGWidth=c.canvasWidth-d.rightBorder-d.leftBorder,c.canvasBGHeight=c.canvasHeight-d.bottomBorder}isWithinCanvas(a,b){var c=Math.floor;let d=this,e=d.config,f=e.canvasBGLeft,g=c(f+e.canvasBGWidth),h=e.canvasBGTop,i=e.padding,j=c(h+e.canvasBGHeight),k=d.getTranslation();return a=a-(k.x||0)+(i.left||0),b=b-(k.y||0)+(i.top||0),a>f&&a<g&&b>h&&b<j}draw(){this._createGroup(),this._drawCanvas()}_drawCanvas(){var a,b=this,c=b.config,d=c.borderConfig,e=c.canvasTop+d.topBorder/2,f=c.canvasLeft+d.leftBorder/2,g=c.canvasWidth-(d.rightBorder/2+d.leftBorder/2),h=c.canvasHeight-(d.bottomBorder/2+d.topBorder/2),i={leftBorder:[M,f,e,V,e+h],rightBorder:[M,f+g,e,V,e+h],topBorder:[M,f,e,H,f+g],bottomBorder:[M,f,e+h,H,f+g]};for(a in b.addGraphicalElement({el:'rect',component:b,label:'canvas',container:{id:'tropo',label:'group',isParent:!1},attr:{y:c.canvasBGTop,x:c.canvasBGLeft,width:c.canvasBGWidth,height:c.canvasBGHeight,fill:c.canvasBGColor,"stroke-width":0,stroke:'none'},id:'background'},!0),d)b.addGraphicalElement({el:'path',component:b,label:'canvas',container:{id:'tropo',label:'group',isParent:!1},attr:{path:i[a],stroke:c.canvasBorderColor,"stroke-width":d[a]},id:'border'},!0)}_createGroup(){let a=this,b=a.config,c=b.borderConfig,d=b.padding,e=b.canvasLeft+c.leftBorder-d.left,f=b.canvasTop+c.topBorder-d.top,g=b.canvasWidth-c.rightBorder+d.left,h=b.canvasHeight-c.bottomBorder+d.top,i=[`M${e},${f}`,`L${e+g},${f}`,`L${e+g},${f+h}`,`L${e},${f+h}Z`];a.addGraphicalElement({el:'group',container:{id:'tropo',label:'group',isParent:!0},component:a,label:'group',attr:{name:'canvas-tropo',transform:b.canvasTranslation},id:'tropo'}),a.addGraphicalElement({el:'group',container:{id:'strato',label:'group',isParent:!0},component:a,label:'strato',attr:{name:'canvas-strato',transform:b.translate},id:'strato'}),a.addGraphicalElement({el:'group',container:{id:'meso',label:'group',isParent:!0},component:a,label:'meso',attr:{name:'canvas-meso',transform:b.translate,"clip-path":i},id:'meso'}),a.addGraphicalElement({el:'group',container:{id:'thermo',label:'group',isParent:!0},component:a,label:'thermo',attr:{name:'canvas-thermo',transform:b.translate},id:'thermo'}),a.addToEnv('dsGroupclipPath',i)}setTranslation(a,b){const c=this.config,d=c.borderConfig,e=c.padding;c._translateX=a+d.leftBorder,c._translateY=b+d.topBorder,c.canvasTranslation='t'+c._translateX+','+c._translateY,c._translateX+=e.left,c._translateY+=e.top,c.translate='t'+c._translateX+','+c._translateY}getCanvasBorder(){return this.config.borderConfig}setPadding(a={}){Object.assign(this.config.padding,a)}}export default Canvas;