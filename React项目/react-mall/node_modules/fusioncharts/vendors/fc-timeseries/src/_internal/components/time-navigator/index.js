import{SmartRenderer}from'../../../../../fc-core/src/component-interface';import Canvas from'../../components/canvas';import Line from'../../components/dataset/line';import timeNavigatorAxisFactory from'../../factories/time-navigator-axis';import scrollerFactory from'../../factories/scroller-factory';import brushFactory from'../../factories/time-navigator-brush-factory';const timeNavCanvas=a=>{let b=a.config;a.attachChild(Canvas,'canvas').configure({xConfigs:b.xConfigs,yConfigs:b.yConfigs,plotConfigs:b.plotConfigs,tableMap:b.tableMap,enableGridLines:!0,gridLineDirection:'vertical',enableMarkers:!1,enableReferenceLine:!1,leftBorder:b.border.left,bottomBorder:b.border.bottom,topBorder:b.border.top,rightBorder:b.border.right,enableTimeMarkers:!1,styleGridLines:0,includeLegend:0,enableMouseTracking:0,isContext:!0,gridLineStyle:{stroke:'#F1F1F1',"stroke-width":'1',"stroke-opacity":'1'}})},extractScales=a=>a.scale,COLOR_E3E3E3='#e3e3e3',COLOR_F8F8F8='#f8f8f8',COLOR_8B8B8B='#8b8b8b';class TimeNavigator extends SmartRenderer{constructor(){super(),this._dimensions={},this._translation={},this._scrollerConfig={},this.registerFactory('timeNavigatorAxis',timeNavigatorAxisFactory),this.registerFactory('scroller',scrollerFactory),this.registerFactory('brush',brushFactory),this.registerFactory('canvas',timeNavCanvas)}__setDefaultConfig(a={}){super.__setDefaultConfig(a);let b=this.config;b.startX=0,b.startY=0,b.scrollerHeight=18,b.scrollerStart=-17.5,b.scrollerButtonWidth=17,b.yScalePadding=20,b.border={left:1,right:1,top:1,bottom:0}}_setSelectiveData(a){let b=this.config;for(let c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);this.asyncDraw()}setDimension(a){let b=this,c=b.config,d=b.getChildren('canvas')[0],e=b.getChildren('brush')[0],f=c.border,g=e.getLabelSpace();b._dimensions.width=a.width,b._dimensions.height=a.height,d.setDimension({left:c.startX,top:g,width:this._dimensions.width,height:this._dimensions.height-g-c.scrollerHeight}),b.getChildren('timeAxis').forEach(a=>{a.setTranslation(0,g),a.placeAxis()}),c.xConfigs.map(extractScales).forEach(a=>a.setRange([f.left,this._dimensions.width-(f.left/2+f.right/2)])),c.yConfigs.map(extractScales).forEach(a=>a.setRange([this._dimensions.height-c.scrollerHeight-f.top-f.bottom,g]))}getPosition(){return{x:this.config._translateX,y:this.config._translateY}}setChildDimension(){let a=this,b=a.config,c=a.getChildren('brush')[0],d=c.getLabelSpace(),e=a.getChildren('scroller')[0];c.setMaxBrushDimensions({x:b.startX,y:d,width:this._dimensions.width,height:this._dimensions.height-d-b.scrollerHeight}),e.setDimension({x:b.scrollerStart,y:this._dimensions.height-b.scrollerHeight,height:b.scrollerHeight,width:this._dimensions.width+2*b.scrollerButtonWidth+1}),a.setScrollerConfig('width',this._dimensions.width+2*b.scrollerButtonWidth+1),e.config.scrollRatio=a.getScrollRatio(),a.setScrollerConfig('scrollRatio',e.config.scrollRatio),e.config.scrollPosition=a.getScrollPosition(),a.setScrollerConfig('scrollPosition',e.config.scrollPosition)}getDimension(){return this._dimensions}configureAttributes(a={}){super.configureAttributes(a);let b=this,c=b.config;a.x&&(c.xConfigs=a.x),a.y&&(c.yConfigs=a.y),a.tableMap&&(c.tableMap=a.tableMap),a.values&&(c.values=a.values),a.plots&&(c.plotConfigs=a.plots),b.addToEnv('timeNavigator',b),b.addToEnv('timeNavigatorConfig',c),b.setScrollerConfig('anchorFill',COLOR_E3E3E3),b.setScrollerConfig('anchorStroke','none'),b.setScrollerConfig('trackFill',COLOR_F8F8F8),b.setScrollerConfig('trackStroke','none'),b.setScrollerConfig('buttonFill',COLOR_E3E3E3),b.setScrollerConfig('buttonStroke','none'),b.setScrollerConfig('buttonPointerFill',COLOR_8B8B8B),b.setScrollerConfig('drawStripes',1),b.setScrollerConfig('stripesStroke',COLOR_8B8B8B),b.setScrollerConfig('restrictScrollAnchor',0)}attachHandlers(){let a,b,c,d=this;d.addEventListener('fc-mouseover',d.mouseoverHandler||(d.mouseoverHandler=function(){a=this.getChildren('brush')[0],b=a.getChildren('leftLabel')[0],c=a.getChildren('rightLabel')[0],b.config.showLabel=c.config.showLabel=!0,b.asyncDraw(),c.asyncDraw()})),d.addEventListener('fc-mouseup',d.mouseupHandler||(d.mouseupHandler=function(){a.config.pointerReleasedOnParent=!0})),d.addEventListener('fc-mouseout',d.mouseoutHandler||(d.mouseoutHandler=function(){d.config.labelsGettingDragged||(b.config.showLabel=c.config.showLabel=!1,b.asyncDraw(),c.asyncDraw())}))}draw(){let a=this;a.addGraphicalElement({el:'group',container:{id:'tropo',label:'group',isParent:!0},component:a,label:'group',attr:{name:'timenav-tropo',transform:a.config.translate},id:'tropo'}),a.addGraphicalElement({el:'group',container:{id:'strato',label:'group',isParent:!0},component:a,label:'group',attr:{name:'timenav-strato',transform:a.config.translate},id:'strato'}),a.addGraphicalElement({el:'group',container:{id:'meso',label:'group',isParent:!0},component:a,label:'group',attr:{name:'timenav-meso',transform:a.config.translate},id:'meso'}),a.addGraphicalElement({el:'group',container:{id:'thermo',label:'group',isParent:!0},component:a,label:'group',attr:{name:'timenav-thermo',transform:a.config.translate},id:'thermo'}),a.addGraphicalElement({el:'group',attr:{name:'time-axis-group'},id:'axisTopGroup',label:'group',container:{id:'strato',label:'group'},component:a},!0),a.addGraphicalElement({el:'group',attr:{name:'scroller-group'},id:'scrollerContainer',label:'scroller',container:{id:'thermo',label:'group'},component:a},!0),a.setChildDimension()}setScrollerConfig(a,b){this._scrollerConfig[a]=b}getScrollerConfig(a){return a?this._scrollerConfig[a]:this._scrollerConfig}validateDomain(a){let b=this,c=b.getFromEnv('chart'),d=b.config.xConfigs.map(extractScales)[0],e=d.getDomainValue(a[0]),f=d.getDomainValue(a[1]);c.setFocusLimit([e,f])}getScrollRatio(){let a=this,b=a.getChildren('scroller')[0].config,c=b.width,d=b.height,e=2*Math.min(d,.5*c),f=a.getChildren('brush')[0],g=f.getCurrentBrushDimensions().width;return(g+1)/(c-e)}getScrollPosition(){let a=this,b=a.getChildren('scroller')[0].config,c=b.width,d=b.height,e=2*Math.min(d,.5*c),f=a.getChildren('brush')[0],g=f.getCurrentBrushDimensions().x,h=f.getCurrentBrushDimensions().width,i=a.getScrollerConfig('scrollRatio'),j=i*(c-e),k=e/2+j/2-a.config.scrollerButtonWidth;return(g+h/2-k)/(c-(e+j))}getDSdef(){return Line}}export default TimeNavigator;