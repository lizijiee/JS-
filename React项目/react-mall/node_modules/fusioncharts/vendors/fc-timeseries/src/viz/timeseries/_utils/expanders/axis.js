import arrayHasContent from'../../../../../../fc-utils/src/type/array-has-content';import stringHasContent from'../../../../../../fc-utils/src/type/string-has-content';import isObject from'../../../../../../fc-utils/src/type/is-object';import isArray from'../../../../../../fc-utils/src/type/is-array';import isString from'../../../../../../fc-utils/src/type/is-string';const VALID_PLOT_TYPES=['column','line','step-line','smooth-line','area','step-area','smooth-area','candlestick','ohlc'];let truthFn=()=>!0,sanitisePlotType=(a='',b=!0)=>{if(VALID_PLOT_TYPES.includes(a.toLowerCase()))return a;return b?'line':void 0},objectHasContent=a=>isObject(a)&&(stringHasContent(a.plot)||arrayHasContent(a.plot)||isObject(a.plot)),stringExpando=(a,b)=>{let c=[];return stringHasContent(a)&&b(a)&&c.push({plot:[{value:a,aggregation:'avg',type:'line'}]}),c},sanitiseObj=(a,b)=>{const c=sanitisePlotType(a.type),d='candlestick'===c||'ohlc'===c,e=a=>b(a)?a:void 0,f=e(a.value),g=e(a.open),h=e(a.close),i=e(a.high),j=e(a.low);let k={};if(k=d?g||i||j||h?Object.assign({},a,{type:c,high:i,low:j,open:g,close:h,value:null}):Object.assign({},a,{type:c,high:f,low:f,open:f,close:f,value:f}):Object.assign({},a,{type:c,value:f}),k.typeinnavigator=sanitisePlotType(k.typeinnavigator,!1),d&&(f||g||h||i||j)||f)return k},objectExpando=(a,b)=>{let c,d=[],e=a=>stringHasContent(a)&&b(a);if(objectHasContent(a)){c=a.plot;const b=[];if(d.push(Object.assign({},a,{plot:b})),(isObject(c)||stringHasContent(c))&&(c=[c]),arrayHasContent(c)){const d=c.filter(a=>!!a);d.forEach(c=>{let d;if(isObject(c)){const b=c.type||a.plottype;d=sanitiseObj(Object.assign({},c,{aggregation:c.aggregation||a.aggregation||'avg',type:b}),e)}else e(c)&&(d=sanitiseObj({value:c,type:a.plottype,aggregation:a.aggregation||'avg'},e));d&&b.push(d)})}}return d[0]&&d[0].plot.length?d:[]},arrayExpando=(a,b)=>{let c=[];return a.forEach(a=>{isString(a)?c=c.concat(stringExpando(a,b)):isObject(a)&&(c=c.concat(objectExpando(a,b)))}),c},expander=(a,b=truthFn)=>{let c=[];return isString(a)?c=stringExpando(a,b):isObject(a)?c=objectExpando(a,b):isArray(a)&&(c=arrayExpando(a,b)),c},expando=(a=[],b,c=!0)=>{let d=[];return b&&(d=expander(b,b=>0<=a.indexOf(b))),d.length||(d=expander(a)),c&&d.forEach(a=>{if(!isString(a.title)){const b=a.plot.map(a=>a.value);a.title=b.join(' - ')}}),d};export default expando;